// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../transactions/destroy_nft.cdc (499B)
// ../../../transactions/mint_nft.cdc (1.112kB)
// ../../../transactions/scripts/borrow_nft.cdc (571B)
// ../../../transactions/scripts/get_collection_length.cdc (455B)
// ../../../transactions/scripts/get_total_supply.cdc (118B)
// ../../../transactions/setup_account.cdc (849B)
// ../../../transactions/transfer_nft.cdc (1.133kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _destroy_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x4e\xc2\x40\x10\x86\xef\x7d\x8a\x3f\x3d\x68\x39\xd8\x5e\x8c\x87\x06\x25\x04\x25\xe1\xc2\xc1\xe0\x03\x2c\xdb\x29\x6c\x2c\x33\xcd\x74\x9a\x6a\x0c\xef\x6e\x0a\x52\xc0\x30\xa7\xa6\xf3\x7f\xdf\xcc\x6c\xd8\xd5\xa2\x86\xa5\xf0\xbc\xe5\x4d\x58\x57\xb4\x92\x4f\x62\x94\x2a\x3b\xc4\x69\x9a\x79\x61\x53\xe7\xad\xc9\xfe\x67\x52\x5f\xf8\x38\xfa\x13\xbc\x7d\xb9\x5d\x5d\xd1\x72\xbe\xba\x85\x9e\xbb\x47\x28\x32\x75\xdc\x38\x6f\x41\x38\x09\x45\x8e\x8f\x05\xdb\xd3\xe3\x08\x3f\x11\x00\xd4\x4a\xb5\x53\x4a\x9a\xb0\x61\xd2\x1c\xd3\xd6\xb6\x53\xef\xa5\x65\x3b\x45\xfa\xaa\xc8\xe0\xa5\xaa\xe8\xe0\x79\xa7\x12\xcf\x38\x22\xe9\x5a\x54\xa5\x1b\xdf\x5d\x0c\x9e\x0d\xc9\x97\xa4\x5f\x31\x47\xd6\x98\xa8\xdb\x50\xb6\x9c\xaf\xce\xdd\xd1\xe0\xef\x6b\x32\x41\xed\x38\xf8\x24\x9e\x49\x5b\x15\x60\x31\x1c\xe5\x70\x50\x2a\x49\x89\x3d\xc1\x04\xb6\x25\x48\xc7\xa4\xf7\xcd\xc5\x56\xf1\x28\x1a\x7c\x59\x86\x2e\xd8\xb6\x50\xd7\x1d\xd2\xc3\x63\xdd\x46\xaf\xee\xe4\xd2\x30\x7e\xb8\x3e\x37\x3d\xd9\x92\xd3\xc7\xe2\x35\x47\x28\x2e\x46\x16\xd4\x98\xca\x77\x8f\x1f\xfe\xed\xa3\x7d\xf4\x1b\x00\x00\xff\xff\x09\x2c\xf1\x05\xf3\x01\x00\x00"

func destroy_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_destroy_nftCdc,
		"destroy_nft.cdc",
	)
}

func destroy_nftCdc() (*asset, error) {
	bytes, err := destroy_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "destroy_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0x31, 0xab, 0x52, 0x78, 0xd1, 0x93, 0x72, 0xd5, 0xb8, 0x0, 0xaa, 0x41, 0xd4, 0xe1, 0xae, 0xb6, 0xa3, 0xbb, 0x52, 0xff, 0x2d, 0x23, 0xa7, 0x84, 0xed, 0x95, 0x47, 0x26, 0xb4, 0x2, 0xa1}}
	return a, nil
}

var _mint_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\x41\x8f\x9b\x30\x10\x85\xef\xfc\x8a\xa7\x1c\x5a\xf6\x82\xef\xab\x76\x57\xdb\xa8\x91\x7a\x68\xd4\x43\xfe\x80\x31\x13\x18\xd5\xd8\xc8\x1e\x36\x5b\xad\xf2\xdf\x2b\x03\x01\x92\xa6\xad\x2f\x89\xe4\x79\x6f\x66\xbe\x87\xb9\xed\x7c\x10\xec\xbd\xdb\xf5\xae\xe6\xd2\xd2\xc1\xff\x24\x87\x63\xf0\x2d\x36\x45\xa1\x8c\x77\x12\xb4\x91\xa8\x6e\x6b\x0a\x53\x99\x4d\x36\x19\x7c\x7d\xd3\x6d\x67\x69\xbf\x3b\xdc\x93\x2e\xb7\xa3\x28\x53\x0a\x87\x86\x23\xa2\x09\xdc\x09\xfa\x48\x11\xd2\x10\xf6\xbb\xc3\x77\x76\x42\x01\x81\xa2\xef\x83\x21\x88\x47\xcb\x4e\xa0\xe1\xe8\x94\x0a\x92\xf8\x9b\xa0\xed\xa3\xa0\x24\x84\xde\xe1\xc4\xd2\x0c\x7a\x6d\x8c\xef\x9d\x40\x1a\x2d\x68\xf4\x68\xda\x5e\x3b\x26\x7d\x14\x1f\xa8\x02\x3b\xa8\xf4\x57\xd7\xa4\xe6\xd6\x59\x26\x41\xbb\xa8\x8d\xb0\x77\x79\x20\xc3\x1d\x93\x93\x47\xbc\x54\x55\xa0\x18\x1f\xf0\x9e\x65\x00\xa0\x14\xac\x37\xda\xe2\x55\x07\xd6\xa5\x25\x1c\x7d\x18\xac\xd9\xd5\xd7\x9d\x8f\x14\xc8\x19\x1a\x64\x96\x64\xba\x78\xc4\x87\x15\x99\xd5\x00\xa9\xac\x0b\xd4\xe9\x40\x79\xe4\xda\xa5\xd2\x97\x5e\x9a\x97\x71\xbd\x34\x01\xa6\xa3\x14\x4a\x1f\x82\x3f\x41\x2f\x7d\x12\xb4\xbf\xe0\x64\x87\x69\xe3\xd9\x22\x92\x3d\x16\xd3\xa8\x9f\x31\xf6\x2b\x46\xd3\x4f\x77\x07\x7c\xca\x53\xc6\x8f\x77\xd8\x3d\xcc\xa6\xe9\x3c\x3f\xa3\xd3\x8e\x4d\xbe\xd9\xfa\xde\x56\x70\x5e\xfe\x3d\xec\xc4\x65\x33\xda\x9c\x47\x10\xf4\x46\xa6\x17\xba\xde\xf9\xcb\x68\x93\x74\x73\x42\x1f\x23\xba\xbe\xb4\x6c\x06\x2b\xe3\xad\xa5\x21\xc3\x1b\xfe\x97\x0c\x02\x19\xe2\xd7\x61\xe7\x9a\x64\x42\xbb\xe4\x7d\xbd\x4a\x51\x93\x6c\x75\xa7\x4b\xb6\x2c\xbf\x72\x35\x36\x4a\x8b\x6f\xe7\x3e\x37\x8a\x0b\xc1\xf7\x3f\x1e\xce\x22\xf9\x31\xd8\x9c\x9f\xf2\xff\x83\xab\xd7\x23\xdf\x85\xb7\xd8\x6e\x1e\xb2\x35\xac\x94\xcd\x5c\xa5\x5d\x85\x8a\x3a\x1f\x59\xc0\x72\xd1\xaf\x21\x2e\xe4\xee\x7d\x22\xc3\xcf\x7e\x77\x58\xbf\x8c\xcb\x5c\x97\xdc\xce\xd9\xef\x00\x00\x00\xff\xff\x0a\x5d\xb4\xf6\x58\x04\x00\x00"

func mint_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_mint_nftCdc,
		"mint_nft.cdc",
	)
}

func mint_nftCdc() (*asset, error) {
	bytes, err := mint_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mint_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf0, 0xd6, 0xb2, 0xfb, 0xf1, 0xd5, 0x78, 0x90, 0x47, 0xe2, 0xa8, 0x26, 0x65, 0x72, 0x20, 0x76, 0x1b, 0x1c, 0xc5, 0xe9, 0xc, 0xf, 0xb5, 0x69, 0x92, 0x11, 0xc1, 0xf3, 0x47, 0xf1, 0xf8, 0x30}}
	return a, nil
}

var _scriptsBorrow_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x4f\x4b\xc3\x30\x18\xc6\xef\xfd\x14\x0f\x3d\x48\x0b\xd2\x5c\xc4\xc3\x70\x8e\x39\x2c\x78\x29\x22\xf5\x2c\x69\xfa\x76\x7b\x31\x4d\x42\x9a\xa2\x32\xf6\xdd\x65\xeb\xda\x4e\xc5\x9c\x12\xf2\xfc\xde\x3f\x3f\x6e\x9d\xf5\x01\x85\x35\x79\x6f\xb6\x5c\x69\x2a\xed\x3b\x19\x34\xde\xb6\x88\xb3\x4c\x64\x99\x50\xd6\x04\x2f\x55\xe8\xc4\xef\x58\xa6\x6a\x15\x47\xe7\x1a\x8f\x9f\xb2\x75\x9a\x8a\xbc\xfc\x87\x9e\x03\x03\x17\x09\x81\x72\xc7\x1d\x3a\xe5\xd9\x05\x54\xd6\x7b\xfb\xd1\x41\x1a\x4c\x45\x24\x94\xd5\x9a\x54\x60\x6b\x22\xd7\x57\x68\x7a\x83\x56\xb2\x49\x64\x5d\x7b\xea\xba\x05\xd6\xc3\xe5\x1a\x5c\x2f\xf0\xfa\x64\xc2\xed\x4d\x8a\x7d\x04\x00\x9a\x02\xa4\x52\xb6\x37\x01\x4b\x6c\x29\xac\x87\xc7\x08\xa7\xd1\x14\x9b\xdb\xbc\x50\x83\xe5\x88\x9d\xfe\x8f\x27\xdb\x52\xd8\x48\x27\x2b\xd6\x1c\xbe\x12\xe1\xfa\x4a\xb3\x12\x45\x5e\x6e\x26\x32\x9d\xd3\xc3\x2e\x77\x57\xfb\x3f\xca\xe6\xf8\xf3\xa9\xc4\xe1\x3e\x99\xb9\xd5\x0a\x4e\x1a\x56\x49\xbc\xb1\xbd\xae\x61\xec\xa8\x05\x6a\x6a\x3e\x98\x19\x06\xb8\x98\x3b\x3e\x6f\x23\x04\x1e\x06\x44\xc2\x53\x43\x9e\x8c\x22\x04\x0b\x89\xce\x91\xe2\x86\xd5\xc9\x2f\x1b\x84\x1d\x5d\xfa\x1d\x5d\xbc\x61\xf9\xd3\xc7\x79\x9d\x22\x2f\x93\xa3\x64\xae\xd3\xe8\x10\x7d\x07\x00\x00\xff\xff\xca\x1e\x3d\x11\x3b\x02\x00\x00"

func scriptsBorrow_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBorrow_nftCdc,
		"scripts/borrow_nft.cdc",
	)
}

func scriptsBorrow_nftCdc() (*asset, error) {
	bytes, err := scriptsBorrow_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/borrow_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0x1f, 0x4c, 0xe2, 0xa, 0xde, 0xe4, 0x18, 0xb8, 0x21, 0xaa, 0x29, 0x2a, 0x8f, 0x33, 0x67, 0xde, 0x8a, 0x13, 0x2b, 0x97, 0x99, 0xf7, 0x10, 0x95, 0x15, 0x33, 0xe8, 0x2d, 0xa, 0xc8, 0x19}}
	return a, nil
}

var _scriptsGet_collection_lengthCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcd\x6a\xb4\x30\x14\x86\xf7\xb9\x8a\x83\x8b\x0f\xdd\xc4\xfd\xf0\x4d\x87\xc1\x56\x98\x8d\x94\xe2\x0d\xc4\x18\x6d\x68\x3c\x27\xc4\x13\xda\x32\xcc\xbd\x97\x31\x1d\xed\x0f\x75\x21\x09\x79\x9e\x37\xe7\x8d\x9d\x3c\x05\x86\x86\xb0\x8e\x38\xda\xce\x99\x96\x5e\x0c\xc2\x10\x68\x82\x4c\xca\x52\xca\x52\x13\x72\x50\x9a\xe7\xf2\x27\x26\x75\xaf\x33\xf1\x99\xf1\xf0\xa6\x26\xef\x4c\x53\xb7\x7f\xd8\x1b\x90\x3c\xe1\x63\x07\x43\x44\x98\x94\xc5\x5c\xf5\x7d\x30\xf3\xbc\x83\x63\x5a\x14\x3b\x38\x21\xc3\x59\x00\x00\x38\xc3\xa0\xb4\xa6\x88\x0c\x7b\x18\x0d\x1f\xd3\xe6\x66\x15\x62\xc5\x34\x39\x67\x34\x5b\xc2\x27\x33\xc0\xfe\xa6\x2d\xe7\xd7\x4f\x8e\x86\x2b\xe5\x55\x67\x9d\xe5\xf7\xbc\xf4\xb1\x73\x56\x97\x4d\xdd\x56\xab\x59\x6c\x74\x47\x21\xd0\xeb\xff\x7f\xe7\x5f\xdd\x37\xfc\x71\x89\xb8\xdc\xe5\x9b\x77\x38\x80\x57\x68\x75\x9e\x55\x14\x5d\x0f\x48\x0c\x29\x0a\xf4\x7a\x79\x7a\xa7\x34\xc0\x97\xb9\xb3\x14\xb3\xfc\x82\xe1\x18\xf0\x7b\xa9\x6b\x83\xd3\xfd\x9c\x17\xd2\x19\x1c\xf9\x59\x5c\xc4\x47\x00\x00\x00\xff\xff\x8a\x33\x85\x7b\xc7\x01\x00\x00"

func scriptsGet_collection_lengthCdcBytes() ([]byte, error) {
	return bindataRead(
		_scriptsGet_collection_lengthCdc,
		"scripts/get_collection_length.cdc",
	)
}

func scriptsGet_collection_lengthCdc() (*asset, error) {
	bytes, err := scriptsGet_collection_lengthCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/get_collection_length.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0x6b, 0x76, 0x1e, 0x72, 0x52, 0x12, 0xa4, 0x3d, 0x9e, 0xdc, 0x40, 0xd3, 0x47, 0x4e, 0xc3, 0xc9, 0x8b, 0x80, 0x35, 0x3c, 0xc9, 0x9, 0xc1, 0xfd, 0xa8, 0xee, 0xe, 0xfa, 0x56, 0x97, 0xc4}}
	return a, nil
}

var _scriptsGet_total_supplyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x31\x0a\x42\x31\x0c\x06\xe0\x3d\xa7\xf8\x79\x93\x2e\xe9\x22\x0e\xee\x0a\x2e\x2e\xea\x01\x6a\x7d\x0f\x0a\x6d\x1a\x62\x02\x8a\x78\x77\x47\xdd\x3f\xbe\xda\x75\x98\x63\xff\xcc\x5d\xdb\x7c\x3a\x5c\xb0\xd8\xe8\x98\x98\x13\x73\x2a\x43\xdc\x72\xf1\x47\xfa\x01\x2e\xf7\x32\x11\x69\xdc\xb0\x84\xa0\xe7\x2a\xab\xf5\x0e\xd7\xa3\xf8\x76\x83\x37\x01\x80\xcd\x1e\x26\x7f\x2b\xfb\xf0\xdc\xce\xa1\xda\x5e\xf4\xa1\x6f\x00\x00\x00\xff\xff\xab\xdd\xb2\x0f\x76\x00\x00\x00"

func scriptsGet_total_supplyCdcBytes() ([]byte, error) {
	return bindataRead(
		_scriptsGet_total_supplyCdc,
		"scripts/get_total_supply.cdc",
	)
}

func scriptsGet_total_supplyCdc() (*asset, error) {
	bytes, err := scriptsGet_total_supplyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/get_total_supply.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x81, 0x9, 0x60, 0xa2, 0xa5, 0x58, 0x7b, 0xb8, 0xa2, 0x87, 0x3a, 0x50, 0x8b, 0x97, 0x82, 0xd3, 0xf7, 0x78, 0xfa, 0x17, 0x8a, 0xda, 0xc8, 0x54, 0x76, 0x3b, 0xe3, 0x9c, 0x92, 0x0, 0x29, 0x87}}
	return a, nil
}

var _setup_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xe2\x30\x10\xbe\xe7\x29\xbe\xed\xa1\x0a\x52\x8b\xef\x15\x5b\xa9\xaa\xca\x11\xad\x56\x79\x81\xc1\x4c\x88\x55\x63\x47\xe3\x49\x59\x84\x78\xf7\x55\x12\x36\x3f\x5b\xf0\x71\xfc\xfd\x8e\xed\x0e\x75\x14\xc5\x26\x86\x75\x13\xf6\x6e\xeb\xb9\x88\x9f\x1c\x50\x4a\x3c\xe0\x61\xb9\x34\x36\x06\x15\xb2\x9a\xcc\xff\x98\xa5\xdd\xd9\x87\xec\x2a\xf0\xf1\x87\x0e\xb5\xe7\xcd\xba\xb8\x45\x1d\x6f\x7b\x52\x66\x0c\x8a\xca\x25\xa8\x50\x48\x64\xd5\xc5\x00\x97\x70\xac\x48\x41\x01\x64\x6d\x6c\x82\xe2\x18\x1b\xbf\x83\x34\xa1\x25\x68\x44\x62\x85\xd3\xc4\xbe\x44\x53\xb7\x03\x61\xcb\xee\x8b\xb1\x59\x17\x29\xcb\xa6\x6a\xe7\x2c\x03\x80\x5a\xb8\x26\xe1\x3c\xb9\x7d\x60\x79\xc1\x5b\xa3\xd5\x5b\xaf\xbe\xc0\xb9\x83\xb4\xc7\x18\xfc\x66\x6d\x24\x80\x49\xfc\x09\xae\x84\x56\x3c\xe4\x20\x2f\x4c\xbb\x13\x2a\x4a\x20\xd8\xe8\x3d\x77\x2e\x03\xdf\x95\xe8\x1d\x96\xdb\x28\x12\x8f\xab\xc7\x49\xe5\xf7\x01\xff\x9a\xb7\xcb\x79\x81\x49\x1a\x85\xf6\x6c\x36\xeb\x62\xbc\x5d\xe0\xc7\x4f\x04\xe7\x27\xb9\xda\x23\x5d\xb0\x61\x74\xc9\xa6\xa9\xdf\x85\x49\x19\x84\xc0\x47\xf0\xa1\xd6\xd3\xad\x78\x9e\x75\x32\xc6\xea\x19\xd3\x17\xe9\x24\x3e\x5a\xee\x98\x25\x5f\xcc\x6c\x12\x7d\x31\x9c\xb6\x2b\x9f\xec\x65\x40\x5c\xbb\xb7\xa8\x7c\xf5\x3c\x3a\x3d\x41\xe3\xdd\xb6\x33\x03\xfb\xaf\x47\xdd\x6c\xbd\xb3\xb0\x54\xd3\xd6\x79\xa7\x27\x94\x51\x3a\xd3\x1b\xbd\xae\xbe\xde\x85\xcf\xd5\xe3\xf9\xdb\x07\x1d\xcd\x7e\x75\xaa\x97\xd7\x7c\xb6\x59\xd3\x9b\xcd\x73\x3d\xcd\x20\x4a\xb2\x67\xbd\xd7\x61\x80\x2e\xb2\xfe\x69\x2e\xd9\xdf\x00\x00\x00\xff\xff\xc3\x61\x51\x4a\x51\x03\x00\x00"

func setup_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_setup_accountCdc,
		"setup_account.cdc",
	)
}

func setup_accountCdc() (*asset, error) {
	bytes, err := setup_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "setup_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc9, 0x54, 0x80, 0x5d, 0x8, 0x88, 0xed, 0xf6, 0x5e, 0xf1, 0x6c, 0x88, 0x7d, 0x81, 0x13, 0xb, 0x70, 0x92, 0xeb, 0xe2, 0x8d, 0x34, 0x1, 0x21, 0x29, 0x1, 0xee, 0x37, 0x81, 0xe, 0x70, 0x2b}}
	return a, nil
}

var _transfer_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\x1c\x36\x07\x58\xed\xcb\xb0\x43\x90\xb6\x08\xd2\x05\xe8\x25\x18\x86\xec\x03\x64\x99\xb6\xb5\x39\xa4\x41\xd1\xcb\x86\x22\xff\x3e\x38\x72\xec\x78\x4d\x73\xa9\x4e\x82\xc4\xf7\x1e\xdf\x13\xe5\xf6\x0d\x8b\xc2\x96\x69\xd3\x52\xe9\xb2\x1a\x77\xfc\x0b\x09\x0a\xe1\x3d\xcc\x92\x24\xb5\x4c\x2a\xc6\xaa\x4f\xff\xaf\x49\x6c\x6e\x67\x51\x4f\xf0\xf5\x8f\xd9\x37\x35\x6e\x37\xbb\x6b\xd0\xf1\x36\x80\xa2\x34\x85\x5d\xe5\x3c\xa8\x18\xf2\xc6\xaa\x63\x02\xe7\xa1\x60\x09\x47\x05\x8a\x38\x2a\xc1\x50\x0e\x67\xce\x0e\xc4\x84\x60\xac\xe5\x96\x14\x94\xc1\x10\x6b\x85\x12\x45\x17\x3c\xb1\xa0\x75\x8d\x43\xd2\x05\xac\xf2\x5c\xd0\xfb\x4f\x70\x70\x5a\xe5\x62\x0e\xcf\x4f\x0b\xf8\xf1\x4c\xfa\xe5\xf3\x1c\x5e\xa2\x08\x00\xa0\x11\x6c\x8c\x60\xec\x5d\x49\x28\x0b\x58\xb5\x5a\xad\x82\x44\x57\x03\xfd\x4a\x53\x28\x51\x41\x2b\x84\x41\xc0\x43\xd3\x66\xb5\xb3\x43\x4b\x9c\xfd\x44\xab\x03\xa6\x46\x1d\x8b\xe1\xbe\x23\xe8\x99\xc7\x26\xe7\xd1\xa5\x44\xc6\x22\x7c\x00\x03\x82\x05\x0a\x92\xc5\xce\x66\x27\x1a\xda\xfb\xe8\x4f\x71\x58\xae\x6b\x3c\xb9\x9d\x68\x8d\xc7\xdf\xb1\x80\xfb\x1e\x93\x04\xd2\xe5\x87\x8b\x57\x58\x0f\x95\x0f\x71\x97\xed\x02\x52\xaf\x2c\xa6\xc4\x74\xbb\xd9\x8d\xb7\xf3\x81\xbf\x5b\x8f\x8f\xd0\x18\x72\x36\x9e\xad\xb9\xad\x73\x20\xd6\x1b\x1d\xf3\x21\x34\x3c\x76\x35\x7b\xc3\x6c\x9f\xe2\x2b\x06\x41\x8b\xee\x37\x8a\x7f\xcb\x70\x8e\x0d\x7b\xa7\xc1\xed\x10\x69\x52\xa2\xae\x4d\x63\x32\x57\x3b\xfd\x1b\xa7\x81\xfe\x96\xb1\x21\xa2\x97\x57\x43\x3e\x42\xbe\x9d\x68\x8e\x0f\xf1\x7b\x42\x39\x5b\xba\x95\xcb\x79\x58\x4f\x80\xe1\x47\x5d\x8f\x74\x12\x07\x15\x0a\xcb\xbb\xe9\x18\x24\x67\xb6\xf8\xf2\x0f\x8c\xfb\xa9\xf4\x53\x08\x74\x50\x76\x34\x9d\xf8\xeb\xda\xe3\x33\x24\xfd\x36\xd6\x2e\xbc\x05\x2c\xef\xa8\xd0\x90\xd7\x31\x3a\xfe\x0b\x00\x00\xff\xff\x0b\x16\x45\xaa\x6d\x04\x00\x00"

func transfer_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_transfer_nftCdc,
		"transfer_nft.cdc",
	)
}

func transfer_nftCdc() (*asset, error) {
	bytes, err := transfer_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "transfer_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0x4, 0x1, 0x4c, 0xec, 0xaf, 0xb9, 0xd3, 0x4, 0x9, 0xa, 0x93, 0xae, 0x2f, 0x53, 0xf5, 0x95, 0xcf, 0x9a, 0x68, 0xfe, 0xa8, 0x9d, 0x85, 0x72, 0x3e, 0xad, 0xa4, 0xab, 0x80, 0x96, 0x4a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"destroy_nft.cdc":                   destroy_nftCdc,
	"mint_nft.cdc":                      mint_nftCdc,
	"scripts/borrow_nft.cdc":            scriptsBorrow_nftCdc,
	"scripts/get_collection_length.cdc": scriptsGet_collection_lengthCdc,
	"scripts/get_total_supply.cdc":      scriptsGet_total_supplyCdc,
	"setup_account.cdc":                 setup_accountCdc,
	"transfer_nft.cdc":                  transfer_nftCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"destroy_nft.cdc": {destroy_nftCdc, map[string]*bintree{}},
	"mint_nft.cdc": {mint_nftCdc, map[string]*bintree{}},
	"scripts": {nil, map[string]*bintree{
		"borrow_nft.cdc": {scriptsBorrow_nftCdc, map[string]*bintree{}},
		"get_collection_length.cdc": {scriptsGet_collection_lengthCdc, map[string]*bintree{}},
		"get_total_supply.cdc": {scriptsGet_total_supplyCdc, map[string]*bintree{}},
	}},
	"setup_account.cdc": {setup_accountCdc, map[string]*bintree{}},
	"transfer_nft.cdc": {transfer_nftCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
