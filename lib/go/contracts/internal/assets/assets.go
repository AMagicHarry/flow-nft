// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleNFT.cdc (6.16kB)
// ../../../contracts/MetadataViews.cdc (1.543kB)
// ../../../contracts/NonFungibleToken.cdc (4.832kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplenftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xdd\x6f\xdc\xb8\x11\x7f\xdf\xbf\x62\xce\x0f\xa9\x84\xda\xab\x16\x28\xfa\x20\xd8\x71\x0e\xf1\x2d\xe0\x87\x33\x0e\xc9\xb6\x7d\x08\x82\x1e\x57\x9c\xdd\x65\x2d\x91\x02\x49\xed\x56\xf5\xed\xff\x5e\x0c\xa9\x0f\xea\xcb\x4e\x7a\x40\x85\x20\xd6\x8a\x33\xc3\xf9\x9e\x1f\x99\x24\xb0\x3d\x0a\x03\xc2\x00\x93\x80\xff\x66\x45\x99\x23\x08\xfa\xbf\x40\x69\x99\x15\x4a\x82\xda\x03\x83\x4d\xae\xce\xf0\xa4\xe4\xcd\xa6\x92\x07\xb1\xcb\x11\xb6\xea\x19\xe5\x2a\x49\xe0\xd1\x12\xbf\x54\x16\x4a\xa6\x2d\x91\xdb\x23\x82\xda\xef\x45\x26\x58\x0e\xc6\x32\xc9\x99\xe6\xb0\xab\x2c\x08\x0b\xcc\x98\xaa\x40\x0e\x56\xc1\x0e\x89\xff\x84\xba\x06\x23\x0a\x91\x33\x4d\x5f\x8f\xea\x0c\x05\x93\x35\x3c\x6d\xb6\x06\xce\xaa\xca\x79\xaf\x92\x93\x9d\x29\x8d\xb0\xaf\x64\x46\xfa\xb1\x5c\xd8\x7a\xbd\x5a\x89\xa2\x54\xda\x92\x8e\xad\x8a\x4e\x43\xd8\x6b\x55\xc0\xd5\x3a\x19\x2f\xac\x33\x9e\x5d\xb5\x5c\x3f\xa3\x65\x9c\x59\xf6\x77\x81\x67\xd3\xb1\x0c\xbe\x7a\xfa\x55\x59\xed\x20\x53\xd2\x6a\x96\x59\xf8\xc9\x7b\xec\x69\xb3\x4d\xa7\x1b\xbf\xac\x56\x00\x00\xc4\x70\x72\x96\x59\x96\x7f\xae\xca\x32\xaf\x53\xf8\xdb\xa3\xb4\x7f\xfd\x4b\x4f\x80\x27\xb2\xed\x63\x23\xf7\x51\x0a\x2b\x58\x2e\xfe\x83\x3c\x8a\x47\x34\xff\x10\xf6\xc8\x35\x3b\x47\x82\xb7\x62\xae\x9d\xc2\x29\xfc\xc8\xb9\x46\x63\xee\xc7\x2c\x0f\x58\x2a\x23\xec\x80\xc3\xaa\x90\xbe\x63\xd0\x68\x54\xa5\x33\x84\x59\x93\xd6\x8f\x4f\x9b\xed\xf5\xd0\x59\xeb\x4f\x68\x54\x7e\x42\x0d\x2f\x4e\x4a\x2b\x29\x47\x0b\xfd\x86\xab\xc9\x9a\x64\x05\xa6\xf0\xd9\x6a\x21\x0f\x93\x45\x7b\xac\x8a\x9d\x64\x22\x5f\xa4\xe0\x68\x32\x2d\x4a\x4a\x80\x8e\xa6\x23\x12\x52\xd8\xa8\xfb\xe5\xbe\xf4\xa6\x0f\xbe\x87\x5a\x0c\x57\x66\x36\x18\x12\x4c\x74\xec\x97\xe3\xc0\x17\xf4\x18\xcc\xf7\x6b\xc1\xe1\x0e\x04\x9f\x2e\x90\x0e\x70\xe7\x54\x99\x2e\x76\xbb\xc0\x5d\xbf\xe3\x94\x2c\xd0\x16\xee\x42\xdd\x3b\xd2\x8b\x7b\x1b\xf8\x71\x5f\x49\x38\xa0\x75\x61\x8c\xe2\x14\xbe\x6c\xeb\x12\xbf\x8e\x74\xd7\x68\x2b\x2d\xe1\xcb\xe0\x23\x3d\x44\x7c\x3b\x4c\x85\x07\x61\xca\x9c\xd5\xef\xa3\xf8\xfa\x5b\xc8\xb7\xad\x3d\xef\x9b\x2c\x6f\x9f\xaf\x81\xd6\x13\x8d\xb5\xcf\x37\x12\x11\xfd\x13\x4e\x02\xcf\xa9\x13\x1e\xa7\xf0\xa3\xac\x3f\x5b\x5d\x65\xf6\x7e\x1c\x80\xb3\xb0\xd9\xd1\x11\x8f\x56\xe8\xc9\x98\xc1\xd7\xcd\x49\x27\x3c\x81\x6b\x66\x99\xa2\x59\x0e\xe8\x52\xae\x8b\xfc\xd4\x53\xed\x33\xc8\xc0\x71\x94\xe7\xd9\xe2\x6f\xb6\x2d\xf4\xfd\x77\x58\xd7\xb1\x2d\xdb\x57\x69\x91\x8e\x72\x77\xd9\xc6\x42\x14\x68\xeb\x12\x53\xb8\x12\x05\x3b\x60\xf2\xaf\x12\x0f\x57\xdf\x62\x5c\x90\x19\x81\xb6\x32\x28\x0e\x9f\xf1\x97\x99\xe6\x26\xa4\x45\xbd\x67\x19\x06\x0d\xfc\xa3\xca\x73\x74\x03\xe5\x97\x6a\x97\x8b\x6c\xd4\xce\x28\xf3\x78\xd3\x47\x2d\xf5\xc2\x14\x3e\x4c\xda\xe3\xd3\x66\x1b\xcf\x55\xd8\xe3\x83\xaf\x2f\xdf\x81\xbe\x4e\x48\x76\x4a\x6b\x75\x7e\xda\x6c\x83\x16\x1d\xa7\xf0\x6e\x6e\x83\x05\xe6\xde\x90\x91\x8c\x7e\x81\xb8\xc7\x85\x51\x2a\x63\x67\x2a\x22\xd2\x68\xaa\xdc\xc2\xdd\x1d\x79\x34\x86\xdf\x7e\x6b\x3f\xdd\xbb\x3e\x46\x8d\x6c\x21\x6d\xae\x3e\x32\x49\x58\xc0\xab\x15\x38\x18\x34\xee\x51\xa3\xcc\x30\x75\x43\xfc\xf1\xa1\x85\x0a\x3e\x76\xc8\x7b\x0a\x02\x14\x42\x66\x4a\x6b\xcc\xec\xd5\x28\xee\x6f\xc7\xb7\x8f\x65\xfa\x4a\x84\xaf\xa7\xf3\xed\x17\xad\x4e\x82\xa3\x9e\x59\xfa\x84\x19\x8a\xd3\xec\xd2\x2b\xa9\x93\x24\xc0\x85\x87\x29\xba\x26\x7b\xc9\x11\x99\x92\x7b\xa5\x0b\x21\x0f\xe0\x52\xc9\x84\xe4\x44\x40\x70\xac\xb7\x86\xea\x03\xce\xc2\x1e\x09\xa3\xfd\xea\x23\xfb\x2b\xb9\x6f\x2f\x30\xe7\x83\x7c\x20\x9c\xa1\xce\x12\x39\x41\xa7\x14\x3e\xbc\x78\xea\x99\x49\xfe\xb4\xd9\x5e\x86\x03\x13\xa2\xd9\xb1\xd5\x89\x83\xdb\x1b\x78\xb9\xcc\x75\xe6\x24\x71\xea\x11\x2a\x01\x8d\x85\x3a\xa1\x83\x93\x64\x89\x43\x52\x1e\xb2\xb5\x3e\x02\x26\x39\x78\x22\x61\x09\xef\xb9\x65\x96\xe7\xa8\x27\xb9\xdd\x8a\x8d\xda\x97\xc7\x87\x20\xb7\x67\x0b\x70\x64\x83\x43\x13\x0e\x8e\xdd\xde\x8c\x0c\x5a\x7b\x5d\xa3\x67\xac\x53\xe8\x37\x88\xe1\xfe\x1e\x4a\x26\x45\x16\x5d\x15\xc2\x18\x0a\xd3\xd3\x66\x7b\x15\x0f\x1b\x0e\x16\x62\x04\xc6\xdc\x36\x6b\xc1\x5b\x38\xd6\xed\xa6\xef\xd7\xcc\x43\xad\x78\xb6\x69\xdd\xde\x38\xd6\x05\xd7\x36\x5d\x07\x2c\x7b\x26\xbf\x3a\xb7\x92\x0b\x19\xe7\x03\x0f\x76\x0e\x36\x41\xca\x85\x82\x3a\xa6\xa6\xfa\x1a\x46\xc1\x81\x69\xcd\xea\xff\xad\xdd\xbd\xe6\x6e\xff\xc2\xcc\x0f\xf0\x61\xd8\x85\x56\x13\x9e\xbe\x67\x11\xce\x69\x1c\x39\x24\x23\x0b\x38\x77\x2a\x4b\x3c\x37\xc2\x1b\x1b\x82\x1a\x3b\x1f\x45\x76\xec\xd2\xd0\x9d\x44\x72\x0e\x4a\xe2\x64\x4f\x95\xf3\xed\x7c\x66\x7c\x11\xfc\x6b\x67\xc0\x4c\xd8\x43\x40\x4d\xf1\x26\x30\xfd\x76\xb4\x39\x1a\xab\x55\xdd\xed\xbb\x10\x6f\x3f\x2f\x9a\xdc\x70\x85\xe4\xc2\xd3\x36\x4b\x5a\xb3\x47\x66\x81\x69\x1a\x64\xa3\xd8\x7f\xc3\xf4\x99\xc7\x77\xa3\xd2\x78\xc6\xda\x2c\xe8\xd7\x0d\x2b\x92\xed\x1b\x55\xdb\xb5\xad\x6a\xeb\x7e\x59\xb1\x24\x01\xa3\xbc\x05\x7d\xe1\x43\xc6\x08\xd8\x31\x0e\xc2\x1a\x28\x1a\xc8\xe1\x32\x96\x08\xda\xaf\x47\xc5\xcd\xef\x1a\x9e\xf3\xb6\xbf\x9b\x89\x3e\x33\x6f\x8c\xdf\xcb\x6a\x0a\xa6\x7f\xd7\x28\x16\xfb\xb9\x2c\xfc\xc1\x4d\xe0\x99\x11\x9d\x24\xf0\x51\x23\xb3\xe8\x32\xa4\xb2\x47\xa5\xe9\xbc\x38\x8a\x46\x4e\xc7\x76\xae\xce\x32\x63\xc6\x86\xe7\xa8\xb0\x10\x34\xee\xe1\x6e\xc9\x0b\x24\xfa\x0d\x57\x8c\xdc\x49\xe2\xa8\xe8\x47\xf6\x7e\x37\x7a\xeb\x5e\x9b\xc2\x99\xcc\xa7\xb6\xa0\x86\x8a\xcf\xe3\x83\x24\xa1\x28\xd1\x70\x6e\xef\x0d\x9a\x2a\x92\xb5\x92\xe8\xf2\xcf\x65\x9a\x55\x90\x35\x6e\x75\x6d\x06\x8b\xd2\xd6\xe3\x3c\x6e\xe3\xed\x29\x7f\x22\x92\x1e\x03\x44\xb3\x93\xa9\x5f\x0f\x8c\xe8\xfa\x7f\xbb\x67\x28\x65\xa4\xfd\xa7\x0e\x0e\x78\xb5\x81\xf1\x42\x48\x50\x1a\x8c\xa2\xd2\xa0\x31\xd5\x5e\xa2\xf8\x3b\x13\x75\x96\xcd\x25\x4b\x23\x82\xed\x72\x97\x15\x85\x90\xd6\x19\xd7\xb9\x2b\x49\x66\x6f\x00\x7e\x76\x40\xb9\xbd\xc8\x68\xa4\x10\x37\x95\x12\xfd\x35\x8d\x97\xe8\xb7\x47\x28\xee\xe7\xe3\xc3\x78\xee\xb4\x43\x8c\xfe\xc9\x06\xf4\x65\xa2\x14\x48\x32\x02\x6c\x50\xb9\x71\x6b\x8f\x28\x74\xf8\xb9\x4b\xea\x49\xc9\x35\xda\x44\xa3\x74\x6a\x64\xa7\xf0\xee\xe5\x4d\xb8\x76\xf9\x7f\x5d\x09\x8c\xc7\xd9\x20\xd1\xc6\x15\x42\x50\x4e\xa2\xeb\xb3\x7d\x7e\x4c\x2c\x85\xe6\x6e\x23\x28\xb5\xe0\x9e\x69\x7a\x8e\xf2\xc6\xcd\x9f\x3b\x07\xe6\xbd\x7a\xd4\x0c\xec\x5c\x38\xe3\xc5\x13\x63\x5f\xc9\x80\x3f\x18\x60\x59\xa6\x2a\x69\x07\xf1\x9f\x06\x1d\xc2\xd8\xae\x47\xf8\xe4\xf6\xc6\xbb\x6b\xb4\xf5\xbc\x67\xe0\x6e\x69\xe1\x8f\x4d\xc3\x8e\xfe\x1c\xcf\x77\x12\x77\xb9\x14\x0f\x31\x7e\x7f\x61\xe7\x2c\x73\xf2\xc0\x38\x81\x1d\x99\x3f\x12\x0f\x54\xf8\xd3\xa0\xb0\xda\x76\x1e\x74\x81\xbe\x1a\xa9\x88\x0c\x3b\x61\x83\xf8\x8c\x55\x9a\x1d\x7a\xcf\x50\x1b\x0f\xea\xe5\x95\x8e\xd2\xa9\xd2\xb8\x7c\x4d\x52\xa3\xdb\x9b\x9e\xdb\xe3\x99\xa4\xd9\x22\x19\x9c\x9c\xe2\x81\xc6\x5d\x02\x37\xad\x35\x63\x25\xdb\x89\x5c\xd8\x1a\xf6\x4a\x2f\x21\x80\xc1\xee\xb9\x90\xcf\xb7\xe1\xa4\xe8\xf7\x7a\xbb\x72\xaf\xc3\x20\x2e\x1f\xf4\x2e\xef\x87\x45\x93\x78\x75\x87\x96\x8d\x2a\x99\xe9\x03\xda\x25\x2f\xac\x66\xd2\x3c\x0c\x60\xd3\x37\xbf\x27\x78\x85\x67\x19\x94\xba\x17\xf3\x46\xdc\x3c\xe3\x34\x66\x9e\x39\x50\xd0\x21\xd7\xe5\x1b\xe6\xcb\xea\xb2\x5a\xfd\x37\x00\x00\xff\xff\xd8\x3b\xe3\x4e\x10\x18\x00\x00"

func examplenftCdcBytes() ([]byte, error) {
	return bindataRead(
		_examplenftCdc,
		"ExampleNFT.cdc",
	)
}

func examplenftCdc() (*asset, error) {
	bytes, err := examplenftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleNFT.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x68, 0x46, 0x58, 0xe5, 0xd9, 0x6f, 0x99, 0x1a, 0xf4, 0x66, 0xbb, 0xe0, 0x4c, 0x6e, 0x89, 0xba, 0x4a, 0x4d, 0x5e, 0xa8, 0xc9, 0xa1, 0x37, 0x50, 0x1c, 0x9c, 0xf6, 0x18, 0xa9, 0x5c, 0xba, 0x93}}
	return a, nil
}

var _metadataviewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x61\x6b\xe3\x38\x10\xfd\xae\x5f\x31\x1f\x93\xd2\xda\x6d\x0f\x0a\x17\x08\x47\xe1\xda\xe3\x96\x6d\x29\x6d\xd8\x2f\xcb\xb2\x8c\xe5\x71\xac\x5d\x59\x32\x9a\x51\x4a\x28\xfd\xef\x8b\xdc\xd8\x71\xe2\x96\x5d\x7f\x30\xb6\xe7\xe9\xe9\xcd\x7b\x23\xe7\x27\x27\x4a\xad\x6a\xc3\xa0\xbd\x93\x80\x5a\xc0\x34\xad\xa5\x86\x9c\x30\x48\x4d\xd0\x90\x60\x89\x82\xc0\x82\xae\xc4\x50\x42\x1b\x7c\xeb\x99\x4a\x65\x1c\xdc\x7e\xfe\xff\xe1\xec\xfc\xea\xaf\xab\x4c\xa9\x47\xaa\x16\x50\x8b\xb4\xbc\xc8\xf3\xb5\x91\x3a\x16\x99\xf6\x4d\xee\x5d\x65\xfd\x73\xde\xdd\x0a\xeb\x8b\xbc\x41\x16\x0a\x79\x65\x4d\xcb\xf9\xe5\xf9\xe5\xc5\xf9\xdf\x17\x57\x67\xae\x92\xb3\x7e\xb3\xac\x29\x95\x7a\x92\x10\xb5\x30\xa0\x2b\x21\x10\xfb\x18\x34\x31\x68\x74\x7b\x89\xe0\x1d\x81\x0f\xd0\xf8\x40\x6a\x50\x2a\xdb\x96\xf8\x14\x34\x5a\x4b\x25\x6c\x0c\x3d\x73\x06\x37\xa8\xeb\xee\xb9\x2b\x43\xa0\x36\x10\xa7\x2e\x15\x42\x69\xaa\x8a\x42\xe2\xfb\x69\x5c\x09\xbe\x1a\xba\x3e\x05\x8e\xba\x06\x64\x40\xd0\x81\x50\x7c\x80\xc2\xf8\x75\xc0\xb6\xde\x2a\x1f\x00\xe1\xd3\xc3\xcd\x7f\x60\x1a\x5c\x13\x54\xc6\x52\xa6\x4e\x72\xa5\xda\x58\xec\x1d\xbd\xdb\x91\x7d\x49\x4a\xe0\x45\x29\x00\x80\x3c\x87\x6b\x48\x5f\x1e\x89\xbd\xdd\x50\x48\xbe\x6e\x4c\x49\x0c\xa8\x35\x31\x83\x78\x40\x60\x92\xb1\x9e\x5d\x37\x3b\x86\x3d\x11\x77\x5e\x25\x2b\x7a\xa7\x60\x46\xd9\x3a\x03\x74\x70\x7f\xbb\x9a\x1f\xd9\x26\x29\x71\xe3\x84\x42\x85\x9a\x7a\x1a\xf1\xbd\x86\x91\x84\x34\x03\xdd\xa6\x20\x35\x0a\x18\x01\x8e\x6d\xeb\x83\x1c\xaa\x48\x0d\x0f\x5b\x0f\xcc\x30\x34\xf7\xd2\xa1\x7a\x64\x15\x1d\xac\x49\x3a\x43\x66\xf3\x05\x7c\x5d\x6d\x5b\xfa\x36\x81\x84\xb7\xd5\x09\x36\xfb\xde\xa9\x58\x40\x42\xce\x17\x70\xed\xb6\x6f\xf3\xf1\x4f\xb7\xea\x75\x30\xf5\x5f\xc3\xad\xc5\x2d\x98\x14\x59\x81\x6c\xf4\x2e\xf5\x4e\xbd\xd3\x36\x26\x8b\x53\x57\x0e\x1b\xea\x86\xab\x24\xd6\xc1\xb4\x62\xbc\xeb\x59\x7c\x95\x9c\xf3\xc5\x0f\xd2\x92\xc1\x9d\x67\xd9\xbd\x30\x70\xed\xa3\x2d\x8f\xcd\x4c\x7b\x4c\x0c\xd9\xa5\xd2\x4b\x3a\xf4\xc0\x92\x74\x12\x16\xf0\x24\xc1\xb8\xf5\xa4\x38\x92\x35\x60\x06\x90\x71\x46\x66\xc3\x5b\xba\xc6\x5c\xa7\x07\x95\x77\x88\xf6\x80\xf9\x48\x56\xba\x98\x6c\x95\x25\xae\x65\xba\x4d\x4b\x23\xb2\xe5\xb1\x71\x6f\x49\x1c\xe6\xb1\xaa\x63\x53\x38\x34\x16\x02\x49\x0c\x2e\xc5\x22\xc3\xb7\xdd\xb9\x49\x07\x69\xb0\xfb\x68\xb8\xef\xd0\x6d\xd3\x0c\x8f\xfe\x01\xef\x78\x3f\x1e\xde\x7e\x25\x02\x77\x48\xd8\x18\x8e\x68\xf7\x67\x1e\x93\xe2\x94\x71\x1a\x83\xfb\xdb\xd5\x47\xc1\xed\xb5\x4f\xa3\x8b\xc1\x7c\x98\x5c\x63\x1a\x4a\x7f\x99\x3f\x89\x6d\xc4\x73\x98\xda\x31\xc9\x6f\x22\x8b\xc1\x2c\x63\x30\xd3\x42\xcf\xb3\xec\x1f\x26\x51\xbd\xaa\x5f\x01\x00\x00\xff\xff\x4d\x5e\x81\xf4\x07\x06\x00\x00"

func metadataviewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_metadataviewsCdc,
		"MetadataViews.cdc",
	)
}

func metadataviewsCdc() (*asset, error) {
	bytes, err := metadataviewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MetadataViews.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0x7f, 0xee, 0x58, 0xfb, 0xe, 0x59, 0xd5, 0xb2, 0xcc, 0xa6, 0xc1, 0x56, 0xf9, 0xd3, 0xc4, 0x41, 0x4f, 0xd4, 0x49, 0xbe, 0xa4, 0x71, 0x3f, 0x8a, 0x4c, 0x98, 0x84, 0x5, 0xf8, 0xe4, 0xf5}}
	return a, nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x8f\xdb\xba\x11\xbe\xeb\x57\xcc\xcb\x03\x9a\xdd\xc0\x6b\xf7\x50\xf4\x60\x20\x68\xda\xb7\x6f\x01\x5f\xb6\x0f\x5b\x17\x3d\x04\x01\x4c\x8b\x23\x9b\x08\x45\x2a\x24\x65\xc7\x0d\xf6\xbf\x17\x33\x24\x25\xca\xf6\x26\x9b\x5b\x73\x89\x57\x22\xbf\x99\xf9\xe6\x9b\x8f\xd4\xe2\xdd\xbb\xaa\xfa\xf5\x57\x58\xef\x11\x1e\xb4\x3d\xc2\xa3\x35\x77\x0f\xbd\xd9\xa9\xad\x46\x58\xdb\xcf\x68\xc0\x07\x61\xa4\x70\x92\x17\x6e\x1e\xad\xc9\xef\xf9\xf5\x06\x6a\x6b\x82\x13\x75\x00\x65\x02\xba\x46\xd4\x58\x55\x84\x37\xfc\x09\x61\x2f\x02\x08\xad\xc1\x58\x73\xd7\x64\xf4\xc0\xe8\x79\xb7\x87\xda\xf6\x5a\xd2\xdf\x8d\x75\x2d\x04\x3b\xaf\x56\x0d\x08\xe8\x3d\x3a\x38\x0a\x13\x3c\x04\x0b\x12\x3b\x6d\x4f\x20\xc0\xe0\x11\x4c\x13\x86\xfd\x33\x08\x7b\x54\x6e\xcc\xe6\xc8\x70\x06\x51\x56\xc1\x82\x6a\x3b\x8d\x2d\x9a\x40\xcb\xe0\xbc\x88\x31\xd7\x39\xe7\x7e\x89\xb3\x17\x07\xca\x18\x1a\xab\x89\x26\x2a\x86\x80\x5c\xaf\xd1\x83\x30\x12\x8c\x68\x95\xd9\x55\x5c\x6a\x98\x54\xef\x3b\xac\x55\xa3\xd0\xcf\x13\x83\x0f\xeb\x0d\x38\xf4\xb6\x77\x99\xaa\xda\x3a\x1c\x1e\x41\x38\x75\x89\x33\x87\x9d\x43\x8f\x54\xbb\x30\xf0\xf8\xb0\x06\x65\x18\xdd\xb7\xc2\x8d\xb5\x27\xe0\xdf\xac\xd6\x58\x07\x65\xcd\x06\x9e\x26\xf8\x23\x34\xa1\xfa\x60\x1d\x65\xcd\xd4\xbe\xf5\x8c\x5b\x0f\x7b\xe7\xd5\x8a\x5a\x59\xeb\x5e\xf2\xa2\x06\x8f\xd0\xf4\x86\xdf\x71\x0b\x04\x33\x40\x59\xd8\xa3\x41\x47\x8f\x50\x78\xa5\x4f\x55\x6b\x0f\xa9\xad\x9e\x12\x25\x5a\x6c\x1f\xc0\x36\xbc\xba\x0c\xc1\xf9\xfe\xe1\xec\x41\x49\x74\x1b\x5e\xb9\x79\xc2\x1a\xd5\x81\xfe\x1c\xd2\x1d\x48\xf4\x5c\x87\x2f\x9f\x80\xc4\x5a\x0b\x87\x45\x72\x47\x15\xf6\xe0\x6d\x8b\xd0\x39\x64\xd0\xce\x7a\xa6\x49\x2a\x5e\x51\x25\x56\xbf\xf4\xca\x21\x27\x35\x72\x56\x74\xb7\x46\x17\x84\x32\xa9\xa7\x0c\xb4\xc5\xbd\x38\x28\xeb\x86\x69\xf0\x51\x29\x27\xa0\x14\x3c\x76\xc2\x89\x80\xb0\xc5\x5a\xf4\x94\x66\x80\x9d\x3a\xa0\xe7\x18\xac\x60\xfa\x21\xb6\x4a\xab\x70\xa2\x48\x7e\x4f\xfb\x04\x38\x6c\xd0\xa1\xa9\x91\x44\x1a\x15\x5c\xa6\x44\xe9\x5a\xa3\x4f\x80\x5f\x3b\xeb\x13\x5e\xa3\x50\xcb\xa8\xba\xb1\x76\x65\xc0\x1a\x04\xeb\xa0\xb5\x0e\xab\xc4\xf9\x48\xd7\x1c\x56\x34\x83\xde\xa6\xc4\x28\x29\x7f\x9e\x55\x2b\x3e\x23\xd4\xbd\x0f\xb6\x1d\x9a\x90\x48\x9b\x0c\xd0\xb4\x11\x34\x96\x16\x0e\xc2\x29\xdb\x13\xa4\x32\xbb\xd4\x0b\x82\x8f\x7a\x98\x57\xd5\x3f\x4e\xd0\x7b\xe2\x73\x40\xe6\x12\x46\xa0\x59\x4a\xca\x36\x2c\xc9\xa9\xc6\x3d\xd4\xc2\x80\x47\x23\x2b\xda\xe5\xa2\x58\xb2\xda\x3a\x44\x77\x17\xec\x1d\xfd\x3f\xe3\xd8\x24\x3c\x6a\x99\xd9\x51\x7e\x1c\x84\xa7\x99\xd2\x12\x50\x23\xa1\x6a\xd0\x28\x77\xe8\xaa\x8b\x71\x5a\x5b\x0e\x95\xa7\x8e\x54\x6f\x6c\xd8\xa3\xe3\x14\x67\x83\x2d\xb1\x37\x78\xe2\xe6\xc4\xd0\xd2\x89\x38\x1a\x8f\x0f\xeb\xaa\x71\xb6\xbd\xe8\x29\xfb\x94\x81\x3a\x3b\x88\xc4\xce\x7a\x15\x86\x4e\x82\x35\x93\x58\x6f\x7d\x35\xd5\x68\x6d\xa9\x13\x21\xca\x37\x38\x61\x7c\x83\x6e\x5e\x55\xef\x16\x55\xb5\x58\xb0\x93\xb7\x24\xde\x38\xd5\xe7\xd6\x3c\x87\x7f\x32\x74\xf9\x96\x9a\xa5\x35\x6d\x56\x6d\x67\x5d\x88\x6d\x29\xfa\xad\x7c\xe1\xed\x8b\x45\xd5\xf5\xdb\x2b\xd0\x97\xae\xfa\xad\xaa\x00\x00\x52\x56\xc1\x06\xa1\xc1\xf4\xed\x16\x1d\x7b\x42\x6c\x1d\x2b\x55\xf9\xe8\x7a\xca\x00\x7e\x55\x3e\xf0\x44\xd0\x5e\x0a\x75\x10\x2e\x6e\xfe\x57\xdf\x75\xfa\xb4\x84\x7f\xaf\x4c\xf8\xeb\x5f\x06\xf0\xdf\x0f\x31\x4d\x11\x00\x5b\x15\x02\x4a\x38\x12\xc7\xa9\x0f\x45\xaa\x54\x87\x0a\x4a\x68\xf5\x5f\x94\x69\xfb\x10\x06\x19\xe6\xb7\xb4\x78\x35\x2e\xbc\xb9\xbd\x16\x4a\xf9\x69\x34\x91\x0e\x34\xe5\x07\x25\x98\x59\xde\xa7\x8c\x54\xb5\x08\xac\xc6\xc1\x38\x2f\x7c\x31\x01\x07\x38\x8a\x02\x04\x48\x47\xf3\x32\xdb\xc5\x02\x56\x17\x7b\x95\x07\x63\x43\xf4\x5d\x10\x75\x6d\x7b\x13\xde\x7a\x36\x7b\xb1\xc3\x19\x6c\x08\x66\xc3\xad\x86\x2d\xc2\xc6\x28\xbd\x99\x5f\xe7\xe0\x3f\x29\xf4\x8d\x92\x99\xec\x19\x67\xb1\x84\xbf\x4b\xe9\xd0\xfb\xbf\x5d\xa5\xe4\x25\x3e\x92\xc6\x51\xf2\x20\x4d\x0e\x82\xb3\xaa\x42\x66\x2a\x59\xdd\x6b\x88\x2a\xd1\x5f\x28\xe8\x3e\x2e\x99\xd4\x13\xec\xb5\x6a\x56\xd3\x4b\x4b\x92\x90\x1f\xce\xff\xf1\x7a\x72\x1e\xe9\xf2\xd0\x82\x15\xa9\xef\x1b\xaf\x28\xe6\xa0\x37\xea\x4b\x8f\xb0\xba\x4f\xa4\x89\x7a\xcf\x32\xdd\x0b\x3f\x2c\x25\x40\x8d\x01\xc6\x84\xf9\xd5\xf3\x90\xe7\x53\x3c\xc3\xda\x81\x7b\xf2\x93\x94\x1c\xa9\xec\x9a\x81\x52\x0d\x79\x3f\x5f\xa5\x1a\x65\xe2\x19\x94\x32\x27\x53\x42\x19\x1d\x8f\x30\x13\x1e\x3b\x3c\xd5\x72\x59\xeb\xe3\xc3\x7a\x79\x5e\xe6\x0f\x73\x2f\x38\xb6\xd0\xa2\x54\x74\x72\x66\xb9\x7b\xc8\xb6\x59\x98\xe6\x2b\xb8\xce\x97\x89\x29\xdf\x83\x27\x3b\xa4\xcb\xc9\x70\x8d\x1a\x62\x14\x9a\x22\xd7\x8b\x8b\x54\x80\x78\x1a\x47\x46\xdc\xa4\xb4\xa6\x37\x03\xec\x4d\xfe\xb1\xba\xcf\xb5\xde\x2e\xe1\xc3\x94\x0f\xde\x48\xf7\x90\xe9\x23\xfa\xe7\xd0\xf7\x3a\xcc\x95\x84\xf7\xef\xa1\xc4\x7a\x43\x42\x59\xdd\x67\xe5\x8f\x5e\x10\x67\xaa\xed\x7d\xa0\x21\xe6\xab\xa0\x68\x11\x44\x1c\x17\xba\xd9\xa0\xa7\x51\x58\xdd\xbf\x99\x44\x7b\xae\xa6\xbf\x7e\xd0\x8d\x34\x53\x3e\xf3\xf0\x53\xad\xc8\x17\xb9\xec\xff\x29\x50\x3e\xe9\x82\xf8\x3c\x36\x42\xf0\x2f\xe1\x76\x3d\x4b\x99\x7a\x20\xa4\x2c\x5b\x70\x16\xba\x08\x5f\x76\x24\x81\xdf\x30\x3f\xb1\x05\xb7\x2f\x17\xca\x03\x33\xb8\x64\x3a\xc6\x6b\xdb\xb6\x7c\xd7\xca\x1b\xba\x7e\xab\x95\xdf\x43\x63\xdd\xf0\x71\x31\xc9\xe5\x85\xfa\xc7\x8c\xff\x20\x84\xfa\x6c\x36\xbe\x9b\x6e\xb9\x68\x87\x61\x75\xef\x6f\x6e\x97\xf0\x31\x6a\xeb\xd3\xc5\x92\xad\x75\xce\x1e\x1f\x1f\xd6\x85\xb5\xdd\x2e\xe1\x4f\x79\x58\xaf\x1b\x46\x2a\x28\x0d\x80\xa9\x1d\x5d\x27\x26\x9f\x1f\x85\x4d\x6c\x31\xdf\xb4\x65\xfe\xfa\x18\xee\x06\xe4\x34\xd9\x5f\x5e\x14\xc6\x48\xc7\x72\x98\xd2\xd9\x20\x92\xd9\x35\xba\x4a\xd9\xdc\x2b\x7e\x27\x1c\xdf\x50\xf7\x56\xcb\xd1\x95\x53\x3e\x57\x24\x92\xef\x0d\x74\x80\x48\x5a\xbb\x84\x0f\xdf\x22\x3f\x4b\xda\xfb\x5c\xfd\x5f\xd8\xc4\xf7\x06\x24\xce\xc7\xe5\x40\x8c\xb9\x78\x90\x03\x39\x25\xd0\xb0\x29\x44\x17\x49\x1b\x95\x04\xe1\x9c\x38\xbd\x4e\x8d\x25\x60\x54\x22\x38\x0c\xbd\x33\x69\x62\x9d\x38\x65\x7b\xa2\x77\x71\xa6\x1c\xe6\x9e\xd4\xd7\x7b\xf2\x82\xae\xcb\x60\x4f\x39\x4a\x52\x37\xca\xf1\x2b\x29\xde\xc4\xcb\x2f\xe1\x2b\x71\x16\x0b\xf0\x76\x3c\xbf\x63\x73\xf8\xf3\xc1\xa1\x90\x20\x45\x10\x4c\x11\xdf\xc1\x5b\x0c\x7b\x2b\xd3\xa9\xa3\xc2\xcf\x4c\xd8\xb9\xc7\x3b\xbc\x62\xf1\x1e\x75\x33\x1f\x54\xf8\x51\xc9\x4f\xf0\xcb\x7b\x30\x4a\x2f\xe1\x0d\x61\x48\x8b\xf1\xe2\xc6\xf7\xde\xcb\xaa\x7e\x79\xad\x8f\xd7\x0e\x45\xc0\xdf\xdb\x2e\x9c\x8a\x0f\x86\xf8\x94\x5b\x86\xf4\xea\xd2\xc9\x21\x7e\x4e\x45\xce\xcf\x25\x5d\x12\x79\x62\x0a\xed\x91\xe9\xf7\x55\x49\xd2\xd5\xd8\xd4\xe0\x0f\x45\x2a\x85\x0b\x5e\x9e\x86\xe9\x24\xcc\xd2\x98\x6b\x34\xbb\xb0\xa7\x63\xf1\xcf\xe9\x34\x8c\x31\x64\x39\x8a\xf9\x18\xe4\xca\x0a\xa2\x32\x35\xcf\xd5\xff\x02\x00\x00\xff\xff\x33\x4d\x81\x27\xe0\x12\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x61, 0xca, 0x9d, 0xaa, 0x66, 0x36, 0xdf, 0xbc, 0x51, 0xdb, 0x7b, 0x51, 0xd8, 0x3d, 0x6f, 0x4e, 0x9c, 0x8e, 0x50, 0x28, 0x7c, 0x18, 0x1d, 0x2, 0xb2, 0xc2, 0x2b, 0x26, 0xa1, 0xfe, 0x2d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleNFT.cdc":       examplenftCdc,
	"MetadataViews.cdc":    metadataviewsCdc,
	"NonFungibleToken.cdc": nonfungibletokenCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleNFT.cdc": {examplenftCdc, map[string]*bintree{}},
	"MetadataViews.cdc": {metadataviewsCdc, map[string]*bintree{}},
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
