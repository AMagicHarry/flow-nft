// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleNFT.cdc (7.03kB)
// ../../../contracts/MetadataViews.cdc (939B)
// ../../../contracts/NonFungibleToken.cdc (4.832kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplenftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5f\x8f\xdb\xb8\x11\x7f\xf7\xa7\x98\xdb\x87\xd4\x46\x77\xad\x16\x28\xfa\x60\xac\x6f\x13\x64\xcf\xc0\x3e\xdc\x22\x48\xdc\xf6\x21\x08\x7a\xb4\x38\x5e\x13\x2b\x91\x02\x49\xd9\x55\xf7\xfc\xdd\x8b\x21\xf5\x87\x92\xa8\x75\xd2\x00\x17\x23\x70\x2c\x71\x66\x38\xff\xe7\x47\x6e\x92\xc0\xf6\x20\x0c\x08\x03\x4c\x02\xfe\x87\xe5\x45\x86\x20\xe8\x3b\x47\x69\x99\x15\x4a\x82\xda\x03\x83\x4d\xa6\x4e\xf0\xa8\xe4\xcd\xa6\x94\x4f\x62\x97\x21\x6c\xd5\x33\xca\x59\x92\xc0\x83\x25\x7e\xa9\x2c\x14\x4c\x5b\x22\xb7\x07\x04\xb5\xdf\x8b\x54\xb0\x0c\x8c\x65\x92\x33\xcd\x61\x57\x5a\x10\x16\x98\x31\x65\x8e\x1c\xac\x82\x1d\x12\xff\x11\x75\x05\x46\xe4\x22\x63\x9a\xde\x1e\xd4\x09\x72\x26\x2b\x78\xdc\x6c\x0d\x9c\x54\x99\xf1\x4e\x25\x27\x3b\x55\x1a\x61\x5f\xca\x94\xf4\x63\x99\xb0\xd5\x72\x36\x13\x79\xa1\xb4\x25\x1d\x1b\x15\x9d\x86\xb0\xd7\x2a\x87\xab\x65\x32\x5c\x58\xa6\x3c\xbd\x6a\xb8\x7e\x45\xcb\x38\xb3\xec\x9f\x02\x4f\xa6\x65\xe9\xbd\xf5\xf4\xb3\xa2\xdc\x41\xaa\xa4\xd5\x2c\xb5\xf0\x8b\xf7\xd8\xe3\x66\xbb\x1a\x6f\xfc\x32\x9b\x01\x00\x10\xc3\xd1\x59\x66\x59\xf6\xa9\x2c\x8a\xac\x5a\xc1\x3f\x1e\xa4\xfd\xfb\xdf\x3a\x02\x3c\x92\x6d\xef\x6b\xb9\x0f\x52\x58\xc1\x32\xf1\x5f\xe4\xf3\xc5\x80\xe6\x5f\xc2\x1e\xb8\x66\xa7\xb9\xe0\x8d\x98\x6b\xa7\xf0\x0a\xde\x71\xae\xd1\x98\xbb\x21\xcb\x3d\x16\xca\x08\xdb\xe3\xb0\x2a\xa4\x6f\x19\x32\x24\x2d\xb2\x0c\x9d\x6b\x3f\x59\xa5\xd9\x13\x7e\x60\xf6\xb0\x82\xe0\x61\x82\xfc\x43\xb9\xcb\x44\xea\xa9\xbb\xdf\x3d\xe2\x5f\x85\xb4\xa8\x27\xe5\xb6\xb4\xc6\xea\x32\xed\xc2\x72\x2f\x4c\x91\xb1\xaa\x76\x77\xe3\xd9\x50\xb0\x64\x39\x92\x2c\x2d\xe4\xd3\x68\x91\xa3\x49\xb5\x28\x48\xc7\x49\x1a\x7b\x28\xf3\x9d\x64\x22\x6b\x29\x5a\x12\x21\x85\x9d\xb7\x4f\xf4\x09\x77\xbb\xee\xad\x44\xb6\xea\x13\x8c\xf6\xe9\x96\x17\xf0\xd2\x23\x35\x98\xed\x97\xb4\x15\xac\xdd\x8e\xe3\xc5\x60\x37\x58\x87\x7b\x8f\x49\xdb\x7d\x61\xdd\xe9\xd0\x92\x9d\x67\xfe\xbb\x0d\x80\x46\xa3\x4a\x9d\x22\x44\x73\x7b\xf9\xf0\xb8\xd9\x5e\xf7\xab\x66\xf9\x11\x8d\xca\x8e\xa8\x03\x2b\x1a\xe7\x76\x99\xf7\xa3\x23\x17\xd4\xc0\x8f\x8a\xa8\xe0\xb0\x06\xc1\x7f\x6c\xa8\x7b\x5e\xdc\x97\x12\x9e\xd0\xba\x30\xce\x17\x2b\xf8\xbc\xad\x0a\xfc\x32\xd0\x5d\xa3\x2d\xb5\x84\xcf\xbd\x97\xf4\x21\xe2\xdb\x78\xa5\xfe\x5c\xb7\xaf\xe6\xf3\x25\xd0\x62\xa4\x81\xf6\xf9\x43\x5a\xcc\xff\x0d\x47\x81\xa7\x95\x93\xbd\x58\xc1\x3b\x59\x7d\x72\x1d\xe1\x6e\xe8\xd0\x93\xb0\xe9\xc1\x11\x0f\x56\xe8\x93\x32\x83\x17\xd4\x5b\x8d\x98\x02\x5b\xe3\x5c\xf3\x28\x0b\xb4\x49\xd4\xc6\xf2\x7a\x92\xb0\x97\x53\xc3\xf0\x4e\xb3\x05\x99\xd6\x0f\x74\x9c\xa5\xef\xfb\xc0\xe3\x81\x89\xf2\xab\x9a\x80\xeb\xda\x7b\x96\x62\x30\xf1\x86\x7d\x7f\x50\xf6\x14\x51\x5e\x0f\x1e\x4b\x3d\x63\x05\x6f\x47\x6d\xe4\x71\xb3\x5d\xc4\x32\xf1\xe1\xde\xe7\xa1\xaf\xd4\x2f\x23\x92\x9d\xd2\x5a\x9d\x1e\x37\xdb\x60\xa6\x2d\x56\xf0\x26\xb6\xc1\x04\x73\x67\xc8\x40\x46\xb7\x40\xdc\xc3\x84\x2b\x94\xb1\x91\x4c\x9b\x6b\x34\x65\x66\x61\xbd\x26\x8f\x2e\xe0\xf7\xdf\x9b\x57\x77\xae\xde\xa9\xe0\x27\x72\xed\xea\x3d\x93\x04\x9e\xbc\x5a\x81\x83\x41\xe3\x1e\x35\xca\x14\x57\x0e\xf5\x3c\xdc\x37\xd8\xca\xc7\x0e\x79\x47\x41\x08\x4c\xc8\x54\x69\x8d\xa9\xbd\x1a\xc4\xfd\x72\x7c\xbb\x58\xae\x5e\x89\xf0\xf5\x78\x0e\x7c\xd0\xea\x28\x38\xea\xc8\xd2\x47\x4c\x51\x1c\xa3\x4b\x63\xc1\xf1\x49\xd2\xd1\x05\x2e\x4f\x12\xe0\xc2\x23\x3f\x5d\x91\x47\xc8\x55\xa9\x92\x7b\xa5\x73\x21\x9f\xc0\x25\x9b\x09\xc9\x89\x80\x10\x6e\x67\xaf\xad\x0a\x84\x93\xb0\x07\x82\xbd\xbf\xf9\xd8\xff\x46\x0e\xde\x0b\xcc\x78\x2f\x63\x08\xba\xa9\x93\x44\x4e\x68\x74\x05\x6f\x5f\x3c\x75\x64\x26\x3e\x6e\xb6\xe7\xfe\xe8\x81\x79\x74\x00\xb4\xe2\xe0\xf6\x06\x5e\xce\xb1\x9e\x98\x24\x4e\x3d\x02\x7a\xa0\x31\x57\x47\x74\x08\x9d\x2c\x71\xe0\xd4\xa3\xe0\xd6\x3b\x4c\x72\xf0\x44\xc2\x12\x84\x76\xcb\x2c\xcb\x50\x8f\xb2\xbf\x11\x3b\x6f\x7e\x3c\xdc\x07\xd9\x1f\x2d\xd1\x81\x0d\x6e\xe6\x3a\x84\x7b\x7b\x33\x30\x68\xe9\x75\x9d\x3f\x63\xb5\x82\x6e\x83\x05\xdc\xdd\x41\xc1\xa4\x48\xe7\x57\xb9\x30\x86\xc2\xf4\xb8\xd9\x5e\x2d\xfa\x2d\x09\x73\x31\xc0\xb7\x6e\x9b\xa5\xe0\x0d\xc2\x6d\x77\xd3\x77\x4b\xe6\xd1\xeb\x22\xda\xd6\x6e\x6f\x1c\xeb\x84\x6b\xeb\xbe\x04\x96\x3d\x93\x5f\x9d\x5b\xc9\x85\x8c\xf3\x9e\x07\x5b\x07\x9b\x20\xe5\x42\x41\x2d\x53\x5d\x9f\x35\xa3\xe0\xc0\xb4\x66\xd5\xff\xd7\x10\x5f\x73\xb7\xff\xc1\xcc\x4f\xf0\xb6\xdf\xa7\x66\x23\x9e\xae\xab\x11\x0c\xa8\x1d\xd9\x27\x23\x0b\x38\x77\x2a\x4b\x3c\xd5\xc2\x6b\x1b\x82\x1a\x3b\x1d\x44\x7a\x68\xd3\xd0\x1d\xee\x32\x0e\x4a\xe2\x68\x4f\x95\xf1\x6d\x3c\x33\x3e\x0b\xfe\xa5\x35\x20\x12\xf6\xf0\x8c\x42\xf1\xa6\xf3\xc9\xe5\x68\x73\x34\x56\xab\xaa\xdd\x77\x22\xde\x7e\xa2\xd4\xb9\xe1\x0a\xc9\x85\xa7\x69\xa7\xb4\x66\x0f\xcc\x02\xd3\x34\xea\x06\xb1\xff\x8a\xf9\x14\x47\x4a\x83\xd2\x78\xc6\xca\x4c\xe8\xd7\x8e\x33\x92\xed\x1b\x55\xd3\xd7\xad\x6a\xea\x7e\x5a\xb1\x24\x01\xa3\xbc\x05\x5d\xe1\x43\xca\x08\x52\x31\x0e\xc2\x1a\xc8\xeb\xfe\xea\x32\x96\x08\x9a\xb7\x07\xc5\xcd\x77\x8d\xd7\xb8\xed\x6f\x22\xd1\x67\xe6\xc2\x80\x3e\xcf\xc6\xb0\xf4\xbb\x86\xb5\xd8\xc7\xb2\xf0\x27\x37\xa3\x23\x43\x3c\x49\xe0\xbd\x46\x66\xd1\x65\x48\x69\x0f\x4a\xd3\x11\x7c\x10\x8d\x2c\x53\x27\xe0\xea\x24\x53\x66\x6c\x78\x1e\x09\x0b\x41\xe3\x1e\xd6\x53\x5e\x20\xd1\x17\x5c\x31\x70\x27\x89\xa3\xa2\x1f\xd8\xfb\xcd\xf8\x6e\xc2\xbd\x34\x75\x9b\x99\x3b\x70\xf0\x3b\x59\x7d\xac\xa7\xe6\x4b\x7c\x48\x9f\x23\xfd\x4a\xee\xed\x77\x9b\x4f\x72\xb0\x03\x43\x6b\x27\xf4\x92\x13\x6a\xab\x03\x3e\xca\xba\xaf\x30\x22\xe6\xa4\xba\xbb\x8c\x86\x78\xd3\x75\xfa\xe6\xc5\x61\x56\x92\x90\xaf\x09\x1e\x37\xf7\x55\x75\xab\x91\x95\x92\xe8\x8a\xd4\x95\xa3\x55\x90\xd6\xb9\xe7\x7a\x31\xe6\x85\xad\x86\xc5\xde\x44\xcd\x53\xfe\x42\x24\x1d\x44\x9a\x47\xc7\x77\x14\x42\xb5\x43\xb2\xd9\x33\x94\x32\xd0\xfe\x63\x8b\x99\xbc\xda\xc0\x78\x2e\x24\x28\x0d\x46\x51\xff\xa0\x59\xde\x5c\xde\xf9\xbb\x3a\x75\x92\xf5\xe5\x5e\x2d\x82\xed\x32\x57\x3a\xb9\x90\xd6\x19\xd7\xba\x2b\x49\xa2\x17\x0e\xfe\x96\x28\xbc\xe6\x49\x12\xc7\x4d\x01\xa5\xff\x4d\xed\x25\x7a\xf6\x30\xce\x3d\x3e\xdc\x0f\x87\x73\x33\xe9\xe9\x9f\xac\xb1\x73\x2a\x0a\x81\x24\x23\x00\x50\xa5\xc3\x24\xf6\x80\x42\x87\xaf\xdb\xca\x1f\x15\x4e\xad\xcd\x7c\x90\x7d\xb5\xec\x15\xbc\x79\xb9\x88\x7a\xcf\x7f\xd4\x0d\xc4\x70\xe6\xf7\x12\x6d\x58\x41\x84\x77\x25\xba\x61\xd4\xe5\xc7\xc8\x52\xa8\xaf\x52\x82\x52\x0c\xee\x37\xc7\xc7\x51\x6f\x5c\xfc\x50\xdc\x33\xef\xd5\x73\x70\x60\xe7\xc4\xd1\x77\x31\x32\xf6\x95\x0c\xf8\x93\x01\x96\xa6\xaa\x94\xb6\x17\xff\x71\xd0\x21\x8c\xed\x72\x00\xe2\x6e\x6f\xbc\xbb\x06\x5b\xc7\x3d\x03\xeb\xa9\x85\x3f\xd7\x4d\x77\xfe\xd7\x45\xbc\x93\xb8\xbb\xac\x45\xff\x20\xd4\x5d\x14\x3b\xcb\x9c\x3c\x30\x4e\x60\x4b\xe6\x6f\x0a\x7a\x2a\xfc\xa5\x57\x58\x9f\xd0\xe3\x06\x8a\x0e\x87\x82\xd9\x83\xe9\x33\x47\x2f\x84\x61\x0d\x89\xf1\x8f\x09\x46\x8e\x8c\x53\x22\xba\x8b\x61\x92\xe0\x7b\xe3\x57\x08\x18\x5d\x1c\xc7\xf7\xf7\x64\x3d\xf3\x9a\x91\x1e\x34\xb9\xae\xd9\x50\x8f\x30\xec\x88\x35\xea\xaf\x05\xb6\xec\x34\x83\x82\x76\xf0\x4a\xc3\x6c\x15\xad\x33\x6a\x49\x52\xe7\xb7\x37\x1d\x77\x80\x69\xa3\x0e\x5d\xf4\xb4\x6e\x6b\xb4\x9e\x1e\x29\x2b\xd8\x4e\x64\xc2\x56\xb0\x57\x7a\x0a\x09\xf6\x34\xc8\x84\x7c\xbe\x0d\x87\x65\xb7\xed\xe5\xe6\x74\x1d\xe6\xe9\xf4\x95\xc0\xf9\xe7\xf9\xf8\x7c\x1b\x0b\xf6\xa0\x61\x31\xfd\x84\xf6\x35\x6f\xcc\x22\x15\x1d\x06\xb3\x1e\x11\xdf\x12\xc8\xdc\xb3\xf4\xba\x9a\x17\x73\x21\x86\x9e\x31\x88\xdf\x28\x19\x03\x25\xdd\x69\x66\xfa\x0f\x39\xe7\xd9\x79\xf6\xbf\x00\x00\x00\xff\xff\x3d\x54\x21\xdd\x76\x1b\x00\x00"

func examplenftCdcBytes() ([]byte, error) {
	return bindataRead(
		_examplenftCdc,
		"ExampleNFT.cdc",
	)
}

func examplenftCdc() (*asset, error) {
	bytes, err := examplenftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleNFT.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0xed, 0x59, 0xd5, 0x3b, 0xdb, 0x84, 0x34, 0x44, 0xc, 0x5, 0x33, 0xf6, 0xd3, 0xb3, 0x56, 0xdf, 0x95, 0xa8, 0x90, 0x66, 0xf4, 0x26, 0x6a, 0x11, 0x66, 0x24, 0x1d, 0x6a, 0xe2, 0x8b, 0x36}}
	return a, nil
}

var _metadataviewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x6f\xd4\x30\x10\x85\xef\xfe\x15\xef\x84\x76\xab\x36\x69\x0b\x5a\x89\x5c\x50\x45\x5b\xb4\x08\x50\x55\x0a\x17\x54\x21\xc7\x9e\x6c\x2c\x12\xdb\x1a\x4f\x5a\x56\x55\xff\x3b\x72\x76\xb3\x5b\x68\x2f\x5c\xa2\x28\x79\x7e\xf3\xde\x37\x2e\x0f\x0e\x94\xba\x69\x5d\x82\x09\x5e\x58\x1b\x81\xeb\x63\x47\x3d\x79\x49\x90\x96\xd0\x93\x68\xab\x45\x23\x89\xf6\x56\xb3\x45\xe4\x10\x43\x22\xab\x9c\xc7\xe5\xa7\xe5\xd5\xd1\xf1\xe2\xf5\xa2\x50\xea\x9a\x9a\x0a\xad\x48\x4c\x55\x59\xae\x9c\xb4\x43\x5d\x98\xd0\x97\xc1\x37\x5d\xb8\x2f\xc7\x47\xdd\x85\xba\xec\x75\x12\xe2\xb2\xe9\x5c\x4c\xe5\xe9\xf1\xe9\xc9\xf1\xdb\x93\xc5\x91\x6f\xe4\x68\x1a\x56\xf4\x56\xa9\xaf\xc2\x83\x91\x04\xed\x2d\x98\x52\x18\xd8\x50\x82\xd1\x7e\x1f\x11\xc1\x13\x02\xa3\x0f\x4c\x6a\x97\x54\xd6\x91\xd2\x21\x8c\xee\x3a\xb2\xb8\x73\x74\x9f\x0a\x5c\x68\xd3\x8e\xef\xe3\x6f\x30\x45\xa6\x94\x5b\x2a\x0d\xeb\x9a\x86\x38\xfb\xfd\x72\xde\x22\x34\xbb\xd6\x87\x48\x83\x69\xa1\x13\x34\x0c\x93\x96\xc0\xa8\x5d\x58\xb1\x8e\xed\x5a\x05\x86\xc6\xc7\xab\x8b\x0f\x70\xbd\x5e\x11\x1a\xd7\x51\xa1\x0e\x4a\xa5\xe2\x50\xef\x89\x7e\xde\x9a\x7d\xcf\x49\xf0\xa0\x14\x00\x94\x25\xce\x70\x4d\x29\x74\x77\xc4\x99\xe9\x9d\xb3\x94\xa0\x8d\xa1\x94\x20\x01\x1a\x89\xe4\x69\x96\x6d\x93\xed\xe9\xbd\x49\x1a\x39\x65\x0c\x13\x25\xcc\xa8\x58\x15\xd0\x1e\x5f\x2e\x6f\xe6\xff\x20\x93\xbc\x6d\xe7\x85\xb8\xd1\x86\x26\x1b\x09\x53\x86\x27\x11\xf2\xfe\xc7\xa1\x90\x56\x0b\x9c\x20\x0d\x31\x06\x96\xbf\x53\xe4\xb2\xbb\xd1\x3b\xe7\x7d\xb9\x87\x51\x35\x29\x9b\xc1\x63\x45\x32\xc2\x98\xcd\x2b\xfc\xb8\x59\x47\xba\x7d\x26\xe1\xcd\xe9\x2c\x9b\xfd\x1c\x53\x54\xc8\xca\x79\x85\x33\xbf\xde\xdc\x8d\x77\xe3\xa9\xc7\x17\x80\xbe\x0f\x5d\x47\x46\x5c\xf0\x70\x79\x77\x2b\x0e\x43\xcc\x30\xc7\x1b\xb0\xf5\xe6\xcc\xc1\xd2\x6f\xd4\x6b\x2c\xcf\xff\xa7\xd2\x13\xfb\xe7\xe5\xea\xc0\x1c\xee\x73\xf0\x49\x3e\x73\xb6\xc2\xb7\xa5\x97\xc5\x9b\x79\x85\x57\x0f\xd3\xf7\xc7\x97\xc0\x2c\xcf\x37\x58\x36\xfa\xdb\x6d\xc5\x47\xf5\x27\x00\x00\xff\xff\x6b\xbc\xec\xe6\xab\x03\x00\x00"

func metadataviewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_metadataviewsCdc,
		"MetadataViews.cdc",
	)
}

func metadataviewsCdc() (*asset, error) {
	bytes, err := metadataviewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MetadataViews.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0xdf, 0xa9, 0xa6, 0x82, 0xc8, 0xd0, 0x1d, 0x68, 0xb8, 0x85, 0xea, 0xa2, 0x89, 0x70, 0x2e, 0x78, 0xae, 0x7e, 0x12, 0x63, 0x2e, 0x74, 0x94, 0x8f, 0x72, 0x83, 0x6a, 0xc1, 0x10, 0x70, 0xfb}}
	return a, nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x8f\xdb\xba\x11\xbe\xeb\x57\xcc\xcb\x03\x9a\xdd\xc0\x6b\xf7\x50\xf4\x60\x20\x68\xda\xb7\x6f\x01\x5f\xb6\x0f\x5b\x17\x3d\x04\x01\x4c\x8b\x23\x9b\x08\x45\x2a\x24\x65\xc7\x0d\xf6\xbf\x17\x33\x24\x25\xca\xf6\x26\x9b\x5b\x73\x89\x57\x22\xbf\x99\xf9\xe6\x9b\x8f\xd4\xe2\xdd\xbb\xaa\xfa\xf5\x57\x58\xef\x11\x1e\xb4\x3d\xc2\xa3\x35\x77\x0f\xbd\xd9\xa9\xad\x46\x58\xdb\xcf\x68\xc0\x07\x61\xa4\x70\x92\x17\x6e\x1e\xad\xc9\xef\xf9\xf5\x06\x6a\x6b\x82\x13\x75\x00\x65\x02\xba\x46\xd4\x58\x55\x84\x37\xfc\x09\x61\x2f\x02\x08\xad\xc1\x58\x73\xd7\x64\xf4\xc0\xe8\x79\xb7\x87\xda\xf6\x5a\xd2\xdf\x8d\x75\x2d\x04\x3b\xaf\x56\x0d\x08\xe8\x3d\x3a\x38\x0a\x13\x3c\x04\x0b\x12\x3b\x6d\x4f\x20\xc0\xe0\x11\x4c\x13\x86\xfd\x33\x08\x7b\x54\x6e\xcc\xe6\xc8\x70\x06\x51\x56\xc1\x82\x6a\x3b\x8d\x2d\x9a\x40\xcb\xe0\xbc\x88\x31\xd7\x39\xe7\x7e\x89\xb3\x17\x07\xca\x18\x1a\xab\x89\x26\x2a\x86\x80\x5c\xaf\xd1\x83\x30\x12\x8c\x68\x95\xd9\x55\x5c\x6a\x98\x54\xef\x3b\xac\x55\xa3\xd0\xcf\x13\x83\x0f\xeb\x0d\x38\xf4\xb6\x77\x99\xaa\xda\x3a\x1c\x1e\x41\x38\x75\x89\x33\x87\x9d\x43\x8f\x54\xbb\x30\xf0\xf8\xb0\x06\x65\x18\xdd\xb7\xc2\x8d\xb5\x27\xe0\xdf\xac\xd6\x58\x07\x65\xcd\x06\x9e\x26\xf8\x23\x34\xa1\xfa\x60\x1d\x65\xcd\xd4\xbe\xf5\x8c\x5b\x0f\x7b\xe7\xd5\x8a\x5a\x59\xeb\x5e\xf2\xa2\x06\x8f\xd0\xf4\x86\xdf\x71\x0b\x04\x33\x40\x59\xd8\xa3\x41\x47\x8f\x50\x78\xa5\x4f\x55\x6b\x0f\xa9\xad\x9e\x12\x25\x5a\x6c\x1f\xc0\x36\xbc\xba\x0c\xc1\xf9\xfe\xe1\xec\x41\x49\x74\x1b\x5e\xb9\x79\xc2\x1a\xd5\x81\xfe\x1c\xd2\x1d\x48\xf4\x5c\x87\x2f\x9f\x80\xc4\x5a\x0b\x87\x45\x72\x47\x15\xf6\xe0\x6d\x8b\xd0\x39\x64\xd0\xce\x7a\xa6\x49\x2a\x5e\x51\x25\x56\xbf\xf4\xca\x21\x27\x35\x72\x56\x74\xb7\x46\x17\x84\x32\xa9\xa7\x0c\xb4\xc5\xbd\x38\x28\xeb\x86\x69\xf0\x51\x29\x27\xa0\x14\x3c\x76\xc2\x89\x80\xb0\xc5\x5a\xf4\x94\x66\x80\x9d\x3a\xa0\xe7\x18\xac\x60\xfa\x21\xb6\x4a\xab\x70\xa2\x48\x7e\x4f\xfb\x04\x38\x6c\xd0\xa1\xa9\x91\x44\x1a\x15\x5c\xa6\x44\xe9\x5a\xa3\x4f\x80\x5f\x3b\xeb\x13\x5e\xa3\x50\xcb\xa8\xba\xb1\x76\x65\xc0\x1a\x04\xeb\xa0\xb5\x0e\xab\xc4\xf9\x48\xd7\x1c\x56\x34\x83\xde\xa6\xc4\x28\x29\x7f\x9e\x55\x2b\x3e\x23\xd4\xbd\x0f\xb6\x1d\x9a\x90\x48\x9b\x0c\xd0\xb4\x11\x34\x96\x16\x0e\xc2\x29\xdb\x13\xa4\x32\xbb\xd4\x0b\x82\x8f\x7a\x98\x57\xd5\x3f\x4e\xd0\x7b\xe2\x73\x40\xe6\x12\x46\xa0\x59\x4a\xca\x36\x2c\xc9\xa9\xc6\x3d\xd4\xc2\x80\x47\x23\x2b\xda\xe5\xa2\x58\xb2\xda\x3a\x44\x77\x17\xec\x1d\xfd\x3f\xe3\xd8\x24\x3c\x6a\x99\xd9\x51\x7e\x1c\x84\xa7\x99\xd2\x12\x50\x23\xa1\x6a\xd0\x28\x77\xe8\xaa\x8b\x71\x5a\x5b\x0e\x95\xa7\x8e\x54\x6f\x6c\xd8\xa3\xe3\x14\x67\x83\x2d\xb1\x37\x78\xe2\xe6\xc4\xd0\xd2\x89\x38\x1a\x8f\x0f\xeb\xaa\x71\xb6\xbd\xe8\x29\xfb\x94\x81\x3a\x3b\x88\xc4\xce\x7a\x15\x86\x4e\x82\x35\x93\x58\x6f\x7d\x35\xd5\x68\x6d\xa9\x13\x21\xca\x37\x38\x61\x7c\x83\x6e\x5e\x55\xef\x16\x55\xb5\x58\xb0\x93\xb7\x24\xde\x38\xd5\xe7\xd6\x3c\x87\x7f\x32\x74\xf9\x96\x9a\xa5\x35\x6d\x56\x6d\x67\x5d\x88\x6d\x29\xfa\xad\x7c\xe1\xed\x8b\x45\xd5\xf5\xdb\x2b\xd0\x97\xae\xfa\xad\xaa\x00\x00\x52\x56\xc1\x06\xa1\xc1\xf4\xed\x16\x1d\x7b\x42\x6c\x1d\x2b\x55\xf9\xe8\x7a\xca\x00\x7e\x55\x3e\xf0\x44\xd0\x5e\x0a\x75\x10\x2e\x6e\xfe\x57\xdf\x75\xfa\xb4\x84\x7f\xaf\x4c\xf8\xeb\x5f\x06\xf0\xdf\x0f\x31\x4d\x11\x00\x5b\x15\x02\x4a\x38\x12\xc7\xa9\x0f\x45\xaa\x54\x87\x0a\x4a\x68\xf5\x5f\x94\x69\xfb\x10\x06\x19\xe6\xb7\xb4\x78\x35\x2e\xbc\xb9\xbd\x16\x4a\xf9\x69\x34\x91\x0e\x34\xe5\x07\x25\x98\x59\xde\xa7\x8c\x54\xb5\x08\xac\xc6\xc1\x38\x2f\x7c\x31\x01\x07\x38\x8a\x02\x04\x48\x47\xf3\x32\xdb\xc5\x02\x56\x17\x7b\x95\x07\x63\x43\xf4\x5d\x10\x75\x6d\x7b\x13\xde\x7a\x36\x7b\xb1\xc3\x19\x6c\x08\x66\xc3\xad\x86\x2d\xc2\xc6\x28\xbd\x99\x5f\xe7\xe0\x3f\x29\xf4\x8d\x92\x99\xec\x19\x67\xb1\x84\xbf\x4b\xe9\xd0\xfb\xbf\x5d\xa5\xe4\x25\x3e\x92\xc6\x51\xf2\x20\x4d\x0e\x82\xb3\xaa\x42\x66\x2a\x59\xdd\x6b\x88\x2a\xd1\x5f\x28\xe8\x3e\x2e\x99\xd4\x13\xec\xb5\x6a\x56\xd3\x4b\x4b\x92\x90\x1f\xce\xff\xf1\x7a\x72\x1e\xe9\xf2\xd0\x82\x15\xa9\xef\x1b\xaf\x28\xe6\xa0\x37\xea\x4b\x8f\xb0\xba\x4f\xa4\x89\x7a\xcf\x32\xdd\x0b\x3f\x2c\x25\x40\x8d\x01\xc6\x84\xf9\xd5\xf3\x90\xe7\x53\x3c\xc3\xda\x81\x7b\xf2\x93\x94\x1c\xa9\xec\x9a\x81\x52\x0d\x79\x3f\x5f\xa5\x1a\x65\xe2\x19\x94\x32\x27\x53\x42\x19\x1d\x8f\x30\x13\x1e\x3b\x3c\xd5\x72\x59\xeb\xe3\xc3\x7a\x79\x5e\xe6\x0f\x73\x2f\x38\xb6\xd0\xa2\x54\x74\x72\x66\xb9\x7b\xc8\xb6\x59\x98\xe6\x2b\xb8\xce\x97\x89\x29\xdf\x83\x27\x3b\xa4\xcb\xc9\x70\x8d\x1a\x62\x14\x9a\x22\xd7\x8b\x8b\x54\x80\x78\x1a\x47\x46\xdc\xa4\xb4\xa6\x37\x03\xec\x4d\xfe\xb1\xba\xcf\xb5\xde\x2e\xe1\xc3\x94\x0f\xde\x48\xf7\x90\xe9\x23\xfa\xe7\xd0\xf7\x3a\xcc\x95\x84\xf7\xef\xa1\xc4\x7a\x43\x42\x59\xdd\x67\xe5\x8f\x5e\x10\x67\xaa\xed\x7d\xa0\x21\xe6\xab\xa0\x68\x11\x44\x1c\x17\xba\xd9\xa0\xa7\x51\x58\xdd\xbf\x99\x44\x7b\xae\xa6\xbf\x7e\xd0\x8d\x34\x53\x3e\xf3\xf0\x53\xad\xc8\x17\xb9\xec\xff\x29\x50\x3e\xe9\x82\xf8\x3c\x36\x42\xf0\x2f\xe1\x76\x3d\x4b\x99\x7a\x20\xa4\x2c\x5b\x70\x16\xba\x08\x5f\x76\x24\x81\xdf\x30\x3f\xb1\x05\xb7\x2f\x17\xca\x03\x33\xb8\x64\x3a\xc6\x6b\xdb\xb6\x7c\xd7\xca\x1b\xba\x7e\xab\x95\xdf\x43\x63\xdd\xf0\x71\x31\xc9\xe5\x85\xfa\xc7\x8c\xff\x20\x84\xfa\x6c\x36\xbe\x9b\x6e\xb9\x68\x87\x61\x75\xef\x6f\x6e\x97\xf0\x31\x6a\xeb\xd3\xc5\x92\xad\x75\xce\x1e\x1f\x1f\xd6\x85\xb5\xdd\x2e\xe1\x4f\x79\x58\xaf\x1b\x46\x2a\x28\x0d\x80\xa9\x1d\x5d\x27\x26\x9f\x1f\x85\x4d\x6c\x31\xdf\xb4\x65\xfe\xfa\x18\xee\x06\xe4\x34\xd9\x5f\x5e\x14\xc6\x48\xc7\x72\x98\xd2\xd9\x20\x92\xd9\x35\xba\x4a\xd9\xdc\x2b\x7e\x27\x1c\xdf\x50\xf7\x56\xcb\xd1\x95\x53\x3e\x57\x24\x92\xef\x0d\x74\x80\x48\x5a\xbb\x84\x0f\xdf\x22\x3f\x4b\xda\xfb\x5c\xfd\x5f\xd8\xc4\xf7\x06\x24\xce\xc7\xe5\x40\x8c\xb9\x78\x90\x03\x39\x25\xd0\xb0\x29\x44\x17\x49\x1b\x95\x04\xe1\x9c\x38\xbd\x4e\x8d\x25\x60\x54\x22\x38\x0c\xbd\x33\x69\x62\x9d\x38\x65\x7b\xa2\x77\x71\xa6\x1c\xe6\x9e\xd4\xd7\x7b\xf2\x82\xae\xcb\x60\x4f\x39\x4a\x52\x37\xca\xf1\x2b\x29\xde\xc4\xcb\x2f\xe1\x2b\x71\x16\x0b\xf0\x76\x3c\xbf\x63\x73\xf8\xf3\xc1\xa1\x90\x20\x45\x10\x4c\x11\xdf\xc1\x5b\x0c\x7b\x2b\xd3\xa9\xa3\xc2\xcf\x4c\xd8\xb9\xc7\x3b\xbc\x62\xf1\x1e\x75\x33\x1f\x54\xf8\x51\xc9\x4f\xf0\xcb\x7b\x30\x4a\x2f\xe1\x0d\x61\x48\x8b\xf1\xe2\xc6\xf7\xde\xcb\xaa\x7e\x79\xad\x8f\xd7\x0e\x45\xc0\xdf\xdb\x2e\x9c\x8a\x0f\x86\xf8\x94\x5b\x86\xf4\xea\xd2\xc9\x21\x7e\x4e\x45\xce\xcf\x25\x5d\x12\x79\x62\x0a\xed\x91\xe9\xf7\x55\x49\xd2\xd5\xd8\xd4\xe0\x0f\x45\x2a\x85\x0b\x5e\x9e\x86\xe9\x24\xcc\xd2\x98\x6b\x34\xbb\xb0\xa7\x63\xf1\xcf\xe9\x34\x8c\x31\x64\x39\x8a\xf9\x18\xe4\xca\x0a\xa2\x32\x35\xcf\xd5\xff\x02\x00\x00\xff\xff\x33\x4d\x81\x27\xe0\x12\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x61, 0xca, 0x9d, 0xaa, 0x66, 0x36, 0xdf, 0xbc, 0x51, 0xdb, 0x7b, 0x51, 0xd8, 0x3d, 0x6f, 0x4e, 0x9c, 0x8e, 0x50, 0x28, 0x7c, 0x18, 0x1d, 0x2, 0xb2, 0xc2, 0x2b, 0x26, 0xa1, 0xfe, 0x2d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleNFT.cdc":       examplenftCdc,
	"MetadataViews.cdc":    metadataviewsCdc,
	"NonFungibleToken.cdc": nonfungibletokenCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleNFT.cdc": {examplenftCdc, map[string]*bintree{}},
	"MetadataViews.cdc": {metadataviewsCdc, map[string]*bintree{}},
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
