// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleNFT.cdc (6.535kB)
// ../../../contracts/MetadataViews.cdc (1.543kB)
// ../../../contracts/NonFungibleToken.cdc (4.832kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplenftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5f\x6f\xdc\xb8\x11\x7f\xdf\x4f\x31\xe7\x87\x54\x8b\xda\xab\x16\x28\xfa\x20\xd8\x71\x0e\xf1\x2d\xe0\x87\x33\x82\x64\xdb\x3e\x04\x41\x8f\x2b\xce\x7a\x59\x4b\xa4\x40\x52\xbb\xdd\xfa\xf6\xbb\x17\x43\xea\x0f\x25\x51\xb6\xd3\x00\x5d\x04\xb1\x24\xce\x0c\xe7\xff\xfc\xc8\x34\x85\xcd\x5e\x18\x10\x06\x98\x04\xfc\x37\x2b\xab\x02\x41\xd0\xff\x25\x4a\xcb\xac\x50\x12\xd4\x0e\x18\xac\x0b\x75\x84\x07\x25\xaf\xd6\xb5\x7c\x14\xdb\x02\x61\xa3\x9e\x50\x2e\xd2\x14\xee\x2d\xf1\x4b\x65\xa1\x62\xda\x12\xb9\xdd\x23\xa8\xdd\x4e\xe4\x82\x15\x60\x2c\x93\x9c\x69\x0e\xdb\xda\x82\xb0\xc0\x8c\xa9\x4b\xe4\x60\x15\x6c\x91\xf8\x0f\xa8\x4f\x60\x44\x29\x0a\xa6\xe9\xeb\x5e\x1d\xa1\x64\xf2\x04\x0f\xeb\x8d\x81\xa3\xaa\x0b\xde\xab\xe4\x64\xe7\x4a\x23\xec\x6a\x99\x93\x7e\xac\x10\xf6\xb4\x5a\x2c\x44\x59\x29\x6d\x49\xc7\x56\x45\xa7\x21\xec\xb4\x2a\xe1\x62\x95\x8e\x17\x56\x39\xcf\x2f\x5a\xae\x5f\xd1\x32\xce\x2c\xfb\xbb\xc0\xa3\xe9\x58\x06\x5f\x3d\xfd\xa2\xaa\xb7\x90\x2b\x69\x35\xcb\x2d\xfc\xe2\x3d\xf6\xb0\xde\x64\xd3\x8d\x9f\x17\x0b\x00\x00\x62\x38\x38\xcb\x2c\x2b\xbe\xd4\x55\x55\x9c\x32\xf8\xdb\xbd\xb4\x7f\xfd\x4b\x4f\x80\x07\xb2\xed\x63\x23\xf7\x5e\x0a\x2b\x58\x21\xfe\x83\x3c\x59\x8e\x68\xfe\x21\xec\x9e\x6b\x76\x4c\x04\x6f\xc5\x5c\x3a\x85\x33\xf8\x99\x73\x8d\xc6\xdc\x8e\x59\xee\xb0\x52\x46\xd8\x01\x87\x55\x21\x7d\xc7\x50\x20\x69\x51\x14\xe8\x5c\xfb\xc5\x2a\xcd\x1e\xf1\x13\xb3\xfb\x0c\x82\x97\x19\xf2\x4f\xf5\xb6\x10\xb9\xa7\xee\x9f\x07\xc4\xbf\x0a\x69\x51\xcf\xca\xed\x68\x35\x1a\x55\xeb\x1c\x21\xea\xda\xd5\xfd\xc3\x7a\x73\x39\x0c\xda\xea\x33\x1a\x55\x1c\x50\xc3\xb3\x93\x12\xee\xda\x1b\xbe\x98\xac\x49\x56\x22\x29\xa1\x85\x7c\x9c\x2c\xda\x7d\x5d\x6e\x25\x13\xc5\x2c\x05\x47\x93\x6b\x51\x91\xf9\x1d\x4d\x47\x24\xa4\xb0\x49\xf7\xe6\xbe\xf4\x21\x18\x7c\x0f\xb5\x18\xae\x44\x36\x18\x12\x4c\x74\xec\x97\x97\x81\x2f\xe8\x67\xb0\xd8\xad\x04\x87\x1b\x10\x7c\xba\x40\x3a\xc0\x8d\x53\x65\xba\xd8\xed\x02\x37\xfd\x8e\x53\xb2\x40\x5b\xb8\x09\x75\xef\x48\xcf\xee\x69\xe0\xc7\x5d\x2d\xe1\x11\xad\x0b\x63\xb2\xcc\xe0\xeb\xe6\x54\xe1\xb7\x91\xee\x1a\x6d\xad\x25\x7c\x1d\x7c\xa4\x1f\x11\x5f\x0f\x53\xe1\x4e\x98\xaa\x60\xa7\xf7\xc9\xf2\xf2\x2d\xe4\x9b\xd6\x9e\xf7\x4d\xb5\xb5\xbf\x6f\x81\xd6\x13\x8d\xb5\xcf\x37\x12\x91\xfc\x13\x0e\x02\x8f\x99\x13\xbe\xcc\xe0\x67\x79\xfa\x62\x75\x9d\xdb\xdb\x71\x00\x8e\xc2\xe6\x7b\x47\x3c\x5a\xa1\x5f\xce\x0c\xbe\x6c\x4e\x36\xe1\x09\x5c\x13\x65\x4a\xa2\x1c\xd0\xa5\x5c\x17\xf9\xa9\xa7\xda\xdf\x20\x03\xc7\x51\x8e\xb3\x2d\xdf\x6c\x5b\xe8\xfb\xef\xb0\xae\x63\x9b\xb7\xaf\xd6\x22\x1b\xe5\xee\xbc\x8d\xa5\x28\xd1\x9e\x2a\xcc\xe0\x42\x94\xec\x11\xd3\x7f\x55\xf8\x78\xf1\x16\xe3\x82\xcc\x08\xb4\x95\x41\x71\xf8\x8c\x3f\x47\x9a\x9b\x6b\x86\x3b\x96\x63\x30\x48\xc6\xed\x74\xd4\xce\x28\xf3\x78\xd3\xcf\x2d\xf5\xc2\x0c\x3e\x4c\xda\xe3\xc3\x7a\xb3\x8c\x55\xd8\xfd\x9d\xaf\x2f\xdf\x81\xbe\x4d\x48\xb6\x4a\x6b\x75\x7c\x58\x6f\x82\x51\xb1\xcc\xe0\x5d\x6c\x83\x19\xe6\xde\x90\x91\x8c\x7e\x81\xb8\xc7\x85\x51\x29\x63\x23\x15\x91\x68\x34\x75\x61\xe1\xe6\x86\x3c\xba\x84\xdf\x7f\x6f\x3f\xdd\xba\x3e\x46\x8d\x6c\x26\x6d\x2e\x3e\x32\x49\x98\xc4\xab\x15\x38\x18\x34\xee\x50\xa3\xcc\x31\x73\x60\xe2\xfe\xae\x85\x2c\x3e\x76\xc8\x7b\x0a\x02\x36\x42\xe6\x4a\x6b\xcc\xed\xc5\x28\xee\xaf\xc7\xb7\x8f\x65\xf6\x42\x84\x2f\xa7\xf3\xed\x93\x56\x07\xc1\x51\x47\x96\x3e\x63\x8e\xe2\x10\x5d\x7a\x21\x75\xd2\x14\xb8\xf0\x70\x49\x9f\xc8\x5e\x72\x44\xae\xe4\x4e\xe9\x52\xc8\x47\x70\xa9\x64\x42\x72\x22\x20\x58\xd8\x5b\x43\xf5\x01\x47\x61\xf7\x84\x15\x7f\xf3\x91\xfd\x8d\xdc\xb7\x13\x58\xf0\x41\x3e\x10\xde\x51\x47\x89\x9c\x20\x5c\x06\x1f\x9e\x3d\x75\x64\x92\x3f\xac\x37\xe7\xe1\xc0\x84\x24\x3a\xb6\x3a\x71\x70\x7d\x05\xcf\xe7\x58\x67\x4e\x53\xa7\x1e\xa1\x23\xd0\x58\xaa\x03\x3a\x58\x4b\x96\x38\x44\xe7\xa1\x63\xeb\x23\x60\x92\x83\x27\x12\x96\x70\xa7\x5b\x66\x45\x81\x7a\x92\xdb\xad\xd8\xa4\x7d\xb8\xbf\x0b\x72\x3b\x5a\x80\x23\x1b\x1c\x9a\x70\xb0\xf0\xfa\x6a\x64\xd0\xca\xeb\x9a\x3c\xe1\x29\x83\x7e\x83\x25\xdc\xde\x42\xc5\xa4\xc8\x93\x8b\x52\x18\x43\x61\x7a\x58\x6f\x2e\x96\xc3\x86\x83\xa5\x18\x81\x42\xb7\xcd\x4a\xf0\x16\x16\x76\xbb\xe9\xdb\x15\xf3\x90\x6f\x19\x6d\x5a\xd7\x57\x8e\x75\xc6\xb5\x4d\xd7\x01\xcb\x9e\xc8\xaf\xce\xad\xe4\x42\xc6\xf9\xc0\x83\x9d\x83\x4d\x90\x72\xa1\xa0\x8e\xa9\xa9\xbe\x86\x51\x70\x60\x5a\xb3\xd3\xff\xd6\xee\x5e\x72\xb7\x7f\x60\xe6\x27\xf8\x30\xec\x42\x8b\x09\x4f\xdf\xb3\x08\xe7\x34\x8e\x1c\x92\x91\x05\x9c\x3b\x95\x25\x1e\x1b\xe1\x8d\x0d\x41\x8d\x1d\xf7\x22\xdf\x77\x69\xe8\x4e\x44\x05\x07\x25\x71\xb2\xa7\x2a\xf8\x26\x9e\x19\x5f\x05\xff\xd6\x19\x10\x09\x7b\x08\xec\x29\xde\x04\xea\x5f\x8f\x36\x47\x63\xb5\x3a\x75\xfb\xce\xc4\xdb\xcf\x8b\x26\x37\x5c\x21\xb9\xf0\xb4\xcd\x92\xd6\xec\x9e\x59\x60\x9a\x06\xd9\x28\xf6\x6f\x98\x3e\x71\x7c\x37\x2a\x8d\x27\x3c\x99\x19\xfd\xba\x61\x45\xb2\x7d\xa3\x6a\xbb\xb6\x55\x6d\xdd\xcf\x2b\x96\xa6\x60\x94\xb7\xa0\x2f\x7c\xc8\x19\x01\x3b\xc6\x41\x58\x03\x65\x03\x39\x5c\xc6\x12\x41\xfb\x75\xaf\xb8\xf9\xa1\xe1\x19\xb7\xfd\x5d\x24\xfa\xcc\xbc\x32\x7e\xcf\x8b\x29\x98\xfe\xa1\x51\x2c\x76\xb1\x2c\xfc\xc9\x4d\xe0\xc8\x88\x4e\x53\xf8\xa8\x91\x59\x74\x19\x52\xdb\xbd\xd2\x74\x6e\x1d\x45\xa3\x28\xd4\x11\xb8\x3a\xca\x9c\x19\x1b\x9e\xa3\xc2\x42\xd0\xb8\x83\x9b\x39\x2f\x90\xe8\x57\x5c\x31\x72\x27\x89\xa3\xa2\x1f\xd9\xfb\xdd\xe8\xad\x7b\x6c\x0a\x67\x32\x9f\xda\x82\x1a\x2a\x1e\xc7\x07\x69\x4a\x51\xa2\xe1\xdc\xde\x5f\x34\x55\x24\x4f\x4a\xa2\xcb\x3f\x97\x69\x56\x41\xde\xb8\xd5\xb5\x19\x2c\x2b\x7b\x1a\xe7\x71\x1b\x6f\x4f\xf9\x0b\x91\xf4\x18\x20\x89\x4e\xa6\x7e\x3d\x30\xa2\xeb\xff\xed\x9e\xa1\x94\x91\xf6\x9f\x3b\x38\xe0\xd5\x06\xc6\x4b\x21\x41\x69\x30\x8a\x4a\x83\xc6\x54\x7b\x99\xe3\xef\x6e\xd4\x51\x36\x97\x3d\x8d\x08\xb6\x2d\x5c\x56\x94\x42\x5a\x67\x5c\xe7\xae\x34\x8d\xde\x00\xf8\x5b\x83\xf6\x42\xa5\x91\x42\xdc\x54\x4a\xf4\xd7\x34\x5e\xa2\x77\x8f\x50\xdc\xeb\xfd\xdd\x78\xee\xb4\x43\x8c\xfe\xc9\x06\xf4\xe5\xa2\x12\x48\x32\x02\x6c\x50\xbb\x71\x6b\xf7\x28\x74\xf8\xb9\x4b\xea\x49\xc9\x35\xda\x24\xa3\x74\x6a\x64\x67\xf0\xee\xf9\x55\xb8\x76\xfe\x7f\x5d\x09\x8c\xc7\xd9\x20\xd1\xc6\x15\x42\x50\x4e\xa2\xeb\xb3\x7d\x7e\x4c\x2c\x85\xe6\x6e\x23\x28\xb5\xe0\xbe\x6b\x7a\x8e\xf2\xc6\xc5\xcf\x9d\x03\xf3\x5e\x3c\x6a\x06\x76\xce\x9c\xf1\x96\x13\x63\x5f\xc8\x80\x3f\x18\x60\x79\xae\x6a\x69\x07\xf1\x9f\x06\x1d\xc2\xd8\xae\x46\xf8\xe4\xfa\xca\xbb\x6b\xb4\x75\xdc\x33\x70\x33\xb7\xf0\xc7\xa6\x61\x27\x7f\x5e\xc6\x3b\x89\xbb\x5c\x5a\x0e\x31\x7e\x7f\x71\xe8\x2c\x73\xf2\xc0\x38\x81\x1d\x99\x3f\x12\x0f\x54\xf8\xd3\xa0\xb0\xbe\xa0\x1f\x89\x14\x1d\x0e\x15\xb3\x7b\x33\x64\x8e\x5e\x10\xc2\x0d\xa4\xc6\xbf\xa6\x18\x39\xeb\xcc\x89\xe8\x2f\x0a\x49\x82\xef\x8d\x6f\x10\x30\xb9\x48\x8c\xef\xef\xc9\x06\xe6\xb5\xd3\x2a\x68\x72\x7d\xb3\xa1\x1e\x61\xd8\x01\x1b\x40\xdb\x08\xec\xd8\x69\x4a\x05\xed\xe0\x85\x86\xd9\x29\xda\x64\xd4\x8a\xa4\x26\xd7\x57\x3d\x77\x00\xd7\xa2\x0e\x5d\x0e\xb4\xee\x6a\xb4\x99\x1e\x39\xab\xd8\x56\x14\xc2\x9e\x60\xa7\xf4\x1c\xc8\x19\x68\x50\x08\xf9\x74\x1d\x0e\xc3\x7e\xdb\xd7\x9b\xd3\x65\x98\xa7\xf3\x67\xd9\xf3\xfb\x64\x7a\x74\x8b\x05\x7b\xd4\xb0\x98\x7e\x44\xfb\x92\x37\x16\x91\x8a\x0e\x83\xd9\x8c\x88\xef\x09\x64\xe9\x59\x06\x5d\xcd\x8b\x79\x25\x86\x9e\x31\x88\xdf\x24\x19\x03\x25\x1d\x50\x9f\xbf\xd8\x3f\x2f\xce\x8b\xc5\x7f\x03\x00\x00\xff\xff\x36\xb7\xd7\x96\x87\x19\x00\x00"

func examplenftCdcBytes() ([]byte, error) {
	return bindataRead(
		_examplenftCdc,
		"ExampleNFT.cdc",
	)
}

func examplenftCdc() (*asset, error) {
	bytes, err := examplenftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleNFT.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc9, 0xb3, 0xb2, 0xd4, 0x25, 0xd5, 0xb9, 0x47, 0x45, 0xae, 0xcb, 0x63, 0x76, 0xf8, 0x1e, 0x16, 0xbb, 0x45, 0xec, 0x87, 0x49, 0xb0, 0xb7, 0x32, 0x5c, 0xc, 0x4d, 0x24, 0xe8, 0xd0, 0x2c, 0x2}}
	return a, nil
}

var _metadataviewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x61\x6b\xe3\x38\x10\xfd\xae\x5f\x31\x1f\x93\xd2\xda\x6d\x0f\x0a\x17\x08\x47\xe1\xda\xe3\x96\x6d\x29\x6d\xd8\x2f\xcb\xb2\x8c\xe5\x71\xac\x5d\x59\x32\x9a\x51\x4a\x28\xfd\xef\x8b\xdc\xd8\x71\xe2\x96\x5d\x7f\x30\xb6\xe7\xe9\xe9\xcd\x7b\x23\xe7\x27\x27\x4a\xad\x6a\xc3\xa0\xbd\x93\x80\x5a\xc0\x34\xad\xa5\x86\x9c\x30\x48\x4d\xd0\x90\x60\x89\x82\xc0\x82\xae\xc4\x50\x42\x1b\x7c\xeb\x99\x4a\x65\x1c\xdc\x7e\xfe\xff\xe1\xec\xfc\xea\xaf\xab\x4c\xa9\x47\xaa\x16\x50\x8b\xb4\xbc\xc8\xf3\xb5\x91\x3a\x16\x99\xf6\x4d\xee\x5d\x65\xfd\x73\xde\xdd\x0a\xeb\x8b\xbc\x41\x16\x0a\x79\x65\x4d\xcb\xf9\xe5\xf9\xe5\xc5\xf9\xdf\x17\x57\x67\xae\x92\xb3\x7e\xb3\xac\x29\x95\x7a\x92\x10\xb5\x30\xa0\x2b\x21\x10\xfb\x18\x34\x31\x68\x74\x7b\x89\xe0\x1d\x81\x0f\xd0\xf8\x40\x6a\x50\x2a\xdb\x96\xf8\x14\x34\x5a\x4b\x25\x6c\x0c\x3d\x73\x06\x37\xa8\xeb\xee\xb9\x2b\x43\xa0\x36\x10\xa7\x2e\x15\x42\x69\xaa\x8a\x42\xe2\xfb\x69\x5c\x09\xbe\x1a\xba\x3e\x05\x8e\xba\x06\x64\x40\xd0\x81\x50\x7c\x80\xc2\xf8\x75\xc0\xb6\xde\x2a\x1f\x00\xe1\xd3\xc3\xcd\x7f\x60\x1a\x5c\x13\x54\xc6\x52\xa6\x4e\x72\xa5\xda\x58\xec\x1d\xbd\xdb\x91\x7d\x49\x4a\xe0\x45\x29\x00\x80\x3c\x87\x6b\x48\x5f\x1e\x89\xbd\xdd\x50\x48\xbe\x6e\x4c\x49\x0c\xa8\x35\x31\x83\x78\x40\x60\x92\xb1\x9e\x5d\x37\x3b\x86\x3d\x11\x77\x5e\x25\x2b\x7a\xa7\x60\x46\xd9\x3a\x03\x74\x70\x7f\xbb\x9a\x1f\xd9\x26\x29\x71\xe3\x84\x42\x85\x9a\x7a\x1a\xf1\xbd\x86\x91\x84\x34\x03\xdd\xa6\x20\x35\x0a\x18\x01\x8e\x6d\xeb\x83\x1c\xaa\x48\x0d\x0f\x5b\x0f\xcc\x30\x34\xf7\xd2\xa1\x7a\x64\x15\x1d\xac\x49\x3a\x43\x66\xf3\x05\x7c\x5d\x6d\x5b\xfa\x36\x81\x84\xb7\xd5\x09\x36\xfb\xde\xa9\x58\x40\x42\xce\x17\x70\xed\xb6\x6f\xf3\xf1\x4f\xb7\xea\x75\x30\xf5\x5f\xc3\xad\xc5\x2d\x98\x14\x59\x81\x6c\xf4\x2e\xf5\x4e\xbd\xd3\x36\x26\x8b\x53\x57\x0e\x1b\xea\x86\xab\x24\xd6\xc1\xb4\x62\xbc\xeb\x59\x7c\x95\x9c\xf3\xc5\x0f\xd2\x92\xc1\x9d\x67\xd9\xbd\x30\x70\xed\xa3\x2d\x8f\xcd\x4c\x7b\x4c\x0c\xd9\xa5\xd2\x4b\x3a\xf4\xc0\x92\x74\x12\x16\xf0\x24\xc1\xb8\xf5\xa4\x38\x92\x35\x60\x06\x90\x71\x46\x66\xc3\x5b\xba\xc6\x5c\xa7\x07\x95\x77\x88\xf6\x80\xf9\x48\x56\xba\x98\x6c\x95\x25\xae\x65\xba\x4d\x4b\x23\xb2\xe5\xb1\x71\x6f\x49\x1c\xe6\xb1\xaa\x63\x53\x38\x34\x16\x02\x49\x0c\x2e\xc5\x22\xc3\xb7\xdd\xb9\x49\x07\x69\xb0\xfb\x68\xb8\xef\xd0\x6d\xd3\x0c\x8f\xfe\x01\xef\x78\x3f\x1e\xde\x7e\x25\x02\x77\x48\xd8\x18\x8e\x68\xf7\x67\x1e\x93\xe2\x94\x71\x1a\x83\xfb\xdb\xd5\x47\xc1\xed\xb5\x4f\xa3\x8b\xc1\x7c\x98\x5c\x63\x1a\x4a\x7f\x99\x3f\x89\x6d\xc4\x73\x98\xda\x31\xc9\x6f\x22\x8b\xc1\x2c\x63\x30\xd3\x42\xcf\xb3\xec\x1f\x26\x51\xbd\xaa\x5f\x01\x00\x00\xff\xff\x4d\x5e\x81\xf4\x07\x06\x00\x00"

func metadataviewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_metadataviewsCdc,
		"MetadataViews.cdc",
	)
}

func metadataviewsCdc() (*asset, error) {
	bytes, err := metadataviewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MetadataViews.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0x7f, 0xee, 0x58, 0xfb, 0xe, 0x59, 0xd5, 0xb2, 0xcc, 0xa6, 0xc1, 0x56, 0xf9, 0xd3, 0xc4, 0x41, 0x4f, 0xd4, 0x49, 0xbe, 0xa4, 0x71, 0x3f, 0x8a, 0x4c, 0x98, 0x84, 0x5, 0xf8, 0xe4, 0xf5}}
	return a, nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x8f\xdb\xba\x11\xbe\xeb\x57\xcc\xcb\x03\x9a\xdd\xc0\x6b\xf7\x50\xf4\x60\x20\x68\xda\xb7\x6f\x01\x5f\xb6\x0f\x5b\x17\x3d\x04\x01\x4c\x8b\x23\x9b\x08\x45\x2a\x24\x65\xc7\x0d\xf6\xbf\x17\x33\x24\x25\xca\xf6\x26\x9b\x5b\x73\x89\x57\x22\xbf\x99\xf9\xe6\x9b\x8f\xd4\xe2\xdd\xbb\xaa\xfa\xf5\x57\x58\xef\x11\x1e\xb4\x3d\xc2\xa3\x35\x77\x0f\xbd\xd9\xa9\xad\x46\x58\xdb\xcf\x68\xc0\x07\x61\xa4\x70\x92\x17\x6e\x1e\xad\xc9\xef\xf9\xf5\x06\x6a\x6b\x82\x13\x75\x00\x65\x02\xba\x46\xd4\x58\x55\x84\x37\xfc\x09\x61\x2f\x02\x08\xad\xc1\x58\x73\xd7\x64\xf4\xc0\xe8\x79\xb7\x87\xda\xf6\x5a\xd2\xdf\x8d\x75\x2d\x04\x3b\xaf\x56\x0d\x08\xe8\x3d\x3a\x38\x0a\x13\x3c\x04\x0b\x12\x3b\x6d\x4f\x20\xc0\xe0\x11\x4c\x13\x86\xfd\x33\x08\x7b\x54\x6e\xcc\xe6\xc8\x70\x06\x51\x56\xc1\x82\x6a\x3b\x8d\x2d\x9a\x40\xcb\xe0\xbc\x88\x31\xd7\x39\xe7\x7e\x89\xb3\x17\x07\xca\x18\x1a\xab\x89\x26\x2a\x86\x80\x5c\xaf\xd1\x83\x30\x12\x8c\x68\x95\xd9\x55\x5c\x6a\x98\x54\xef\x3b\xac\x55\xa3\xd0\xcf\x13\x83\x0f\xeb\x0d\x38\xf4\xb6\x77\x99\xaa\xda\x3a\x1c\x1e\x41\x38\x75\x89\x33\x87\x9d\x43\x8f\x54\xbb\x30\xf0\xf8\xb0\x06\x65\x18\xdd\xb7\xc2\x8d\xb5\x27\xe0\xdf\xac\xd6\x58\x07\x65\xcd\x06\x9e\x26\xf8\x23\x34\xa1\xfa\x60\x1d\x65\xcd\xd4\xbe\xf5\x8c\x5b\x0f\x7b\xe7\xd5\x8a\x5a\x59\xeb\x5e\xf2\xa2\x06\x8f\xd0\xf4\x86\xdf\x71\x0b\x04\x33\x40\x59\xd8\xa3\x41\x47\x8f\x50\x78\xa5\x4f\x55\x6b\x0f\xa9\xad\x9e\x12\x25\x5a\x6c\x1f\xc0\x36\xbc\xba\x0c\xc1\xf9\xfe\xe1\xec\x41\x49\x74\x1b\x5e\xb9\x79\xc2\x1a\xd5\x81\xfe\x1c\xd2\x1d\x48\xf4\x5c\x87\x2f\x9f\x80\xc4\x5a\x0b\x87\x45\x72\x47\x15\xf6\xe0\x6d\x8b\xd0\x39\x64\xd0\xce\x7a\xa6\x49\x2a\x5e\x51\x25\x56\xbf\xf4\xca\x21\x27\x35\x72\x56\x74\xb7\x46\x17\x84\x32\xa9\xa7\x0c\xb4\xc5\xbd\x38\x28\xeb\x86\x69\xf0\x51\x29\x27\xa0\x14\x3c\x76\xc2\x89\x80\xb0\xc5\x5a\xf4\x94\x66\x80\x9d\x3a\xa0\xe7\x18\xac\x60\xfa\x21\xb6\x4a\xab\x70\xa2\x48\x7e\x4f\xfb\x04\x38\x6c\xd0\xa1\xa9\x91\x44\x1a\x15\x5c\xa6\x44\xe9\x5a\xa3\x4f\x80\x5f\x3b\xeb\x13\x5e\xa3\x50\xcb\xa8\xba\xb1\x76\x65\xc0\x1a\x04\xeb\xa0\xb5\x0e\xab\xc4\xf9\x48\xd7\x1c\x56\x34\x83\xde\xa6\xc4\x28\x29\x7f\x9e\x55\x2b\x3e\x23\xd4\xbd\x0f\xb6\x1d\x9a\x90\x48\x9b\x0c\xd0\xb4\x11\x34\x96\x16\x0e\xc2\x29\xdb\x13\xa4\x32\xbb\xd4\x0b\x82\x8f\x7a\x98\x57\xd5\x3f\x4e\xd0\x7b\xe2\x73\x40\xe6\x12\x46\xa0\x59\x4a\xca\x36\x2c\xc9\xa9\xc6\x3d\xd4\xc2\x80\x47\x23\x2b\xda\xe5\xa2\x58\xb2\xda\x3a\x44\x77\x17\xec\x1d\xfd\x3f\xe3\xd8\x24\x3c\x6a\x99\xd9\x51\x7e\x1c\x84\xa7\x99\xd2\x12\x50\x23\xa1\x6a\xd0\x28\x77\xe8\xaa\x8b\x71\x5a\x5b\x0e\x95\xa7\x8e\x54\x6f\x6c\xd8\xa3\xe3\x14\x67\x83\x2d\xb1\x37\x78\xe2\xe6\xc4\xd0\xd2\x89\x38\x1a\x8f\x0f\xeb\xaa\x71\xb6\xbd\xe8\x29\xfb\x94\x81\x3a\x3b\x88\xc4\xce\x7a\x15\x86\x4e\x82\x35\x93\x58\x6f\x7d\x35\xd5\x68\x6d\xa9\x13\x21\xca\x37\x38\x61\x7c\x83\x6e\x5e\x55\xef\x16\x55\xb5\x58\xb0\x93\xb7\x24\xde\x38\xd5\xe7\xd6\x3c\x87\x7f\x32\x74\xf9\x96\x9a\xa5\x35\x6d\x56\x6d\x67\x5d\x88\x6d\x29\xfa\xad\x7c\xe1\xed\x8b\x45\xd5\xf5\xdb\x2b\xd0\x97\xae\xfa\xad\xaa\x00\x00\x52\x56\xc1\x06\xa1\xc1\xf4\xed\x16\x1d\x7b\x42\x6c\x1d\x2b\x55\xf9\xe8\x7a\xca\x00\x7e\x55\x3e\xf0\x44\xd0\x5e\x0a\x75\x10\x2e\x6e\xfe\x57\xdf\x75\xfa\xb4\x84\x7f\xaf\x4c\xf8\xeb\x5f\x06\xf0\xdf\x0f\x31\x4d\x11\x00\x5b\x15\x02\x4a\x38\x12\xc7\xa9\x0f\x45\xaa\x54\x87\x0a\x4a\x68\xf5\x5f\x94\x69\xfb\x10\x06\x19\xe6\xb7\xb4\x78\x35\x2e\xbc\xb9\xbd\x16\x4a\xf9\x69\x34\x91\x0e\x34\xe5\x07\x25\x98\x59\xde\xa7\x8c\x54\xb5\x08\xac\xc6\xc1\x38\x2f\x7c\x31\x01\x07\x38\x8a\x02\x04\x48\x47\xf3\x32\xdb\xc5\x02\x56\x17\x7b\x95\x07\x63\x43\xf4\x5d\x10\x75\x6d\x7b\x13\xde\x7a\x36\x7b\xb1\xc3\x19\x6c\x08\x66\xc3\xad\x86\x2d\xc2\xc6\x28\xbd\x99\x5f\xe7\xe0\x3f\x29\xf4\x8d\x92\x99\xec\x19\x67\xb1\x84\xbf\x4b\xe9\xd0\xfb\xbf\x5d\xa5\xe4\x25\x3e\x92\xc6\x51\xf2\x20\x4d\x0e\x82\xb3\xaa\x42\x66\x2a\x59\xdd\x6b\x88\x2a\xd1\x5f\x28\xe8\x3e\x2e\x99\xd4\x13\xec\xb5\x6a\x56\xd3\x4b\x4b\x92\x90\x1f\xce\xff\xf1\x7a\x72\x1e\xe9\xf2\xd0\x82\x15\xa9\xef\x1b\xaf\x28\xe6\xa0\x37\xea\x4b\x8f\xb0\xba\x4f\xa4\x89\x7a\xcf\x32\xdd\x0b\x3f\x2c\x25\x40\x8d\x01\xc6\x84\xf9\xd5\xf3\x90\xe7\x53\x3c\xc3\xda\x81\x7b\xf2\x93\x94\x1c\xa9\xec\x9a\x81\x52\x0d\x79\x3f\x5f\xa5\x1a\x65\xe2\x19\x94\x32\x27\x53\x42\x19\x1d\x8f\x30\x13\x1e\x3b\x3c\xd5\x72\x59\xeb\xe3\xc3\x7a\x79\x5e\xe6\x0f\x73\x2f\x38\xb6\xd0\xa2\x54\x74\x72\x66\xb9\x7b\xc8\xb6\x59\x98\xe6\x2b\xb8\xce\x97\x89\x29\xdf\x83\x27\x3b\xa4\xcb\xc9\x70\x8d\x1a\x62\x14\x9a\x22\xd7\x8b\x8b\x54\x80\x78\x1a\x47\x46\xdc\xa4\xb4\xa6\x37\x03\xec\x4d\xfe\xb1\xba\xcf\xb5\xde\x2e\xe1\xc3\x94\x0f\xde\x48\xf7\x90\xe9\x23\xfa\xe7\xd0\xf7\x3a\xcc\x95\x84\xf7\xef\xa1\xc4\x7a\x43\x42\x59\xdd\x67\xe5\x8f\x5e\x10\x67\xaa\xed\x7d\xa0\x21\xe6\xab\xa0\x68\x11\x44\x1c\x17\xba\xd9\xa0\xa7\x51\x58\xdd\xbf\x99\x44\x7b\xae\xa6\xbf\x7e\xd0\x8d\x34\x53\x3e\xf3\xf0\x53\xad\xc8\x17\xb9\xec\xff\x29\x50\x3e\xe9\x82\xf8\x3c\x36\x42\xf0\x2f\xe1\x76\x3d\x4b\x99\x7a\x20\xa4\x2c\x5b\x70\x16\xba\x08\x5f\x76\x24\x81\xdf\x30\x3f\xb1\x05\xb7\x2f\x17\xca\x03\x33\xb8\x64\x3a\xc6\x6b\xdb\xb6\x7c\xd7\xca\x1b\xba\x7e\xab\x95\xdf\x43\x63\xdd\xf0\x71\x31\xc9\xe5\x85\xfa\xc7\x8c\xff\x20\x84\xfa\x6c\x36\xbe\x9b\x6e\xb9\x68\x87\x61\x75\xef\x6f\x6e\x97\xf0\x31\x6a\xeb\xd3\xc5\x92\xad\x75\xce\x1e\x1f\x1f\xd6\x85\xb5\xdd\x2e\xe1\x4f\x79\x58\xaf\x1b\x46\x2a\x28\x0d\x80\xa9\x1d\x5d\x27\x26\x9f\x1f\x85\x4d\x6c\x31\xdf\xb4\x65\xfe\xfa\x18\xee\x06\xe4\x34\xd9\x5f\x5e\x14\xc6\x48\xc7\x72\x98\xd2\xd9\x20\x92\xd9\x35\xba\x4a\xd9\xdc\x2b\x7e\x27\x1c\xdf\x50\xf7\x56\xcb\xd1\x95\x53\x3e\x57\x24\x92\xef\x0d\x74\x80\x48\x5a\xbb\x84\x0f\xdf\x22\x3f\x4b\xda\xfb\x5c\xfd\x5f\xd8\xc4\xf7\x06\x24\xce\xc7\xe5\x40\x8c\xb9\x78\x90\x03\x39\x25\xd0\xb0\x29\x44\x17\x49\x1b\x95\x04\xe1\x9c\x38\xbd\x4e\x8d\x25\x60\x54\x22\x38\x0c\xbd\x33\x69\x62\x9d\x38\x65\x7b\xa2\x77\x71\xa6\x1c\xe6\x9e\xd4\xd7\x7b\xf2\x82\xae\xcb\x60\x4f\x39\x4a\x52\x37\xca\xf1\x2b\x29\xde\xc4\xcb\x2f\xe1\x2b\x71\x16\x0b\xf0\x76\x3c\xbf\x63\x73\xf8\xf3\xc1\xa1\x90\x20\x45\x10\x4c\x11\xdf\xc1\x5b\x0c\x7b\x2b\xd3\xa9\xa3\xc2\xcf\x4c\xd8\xb9\xc7\x3b\xbc\x62\xf1\x1e\x75\x33\x1f\x54\xf8\x51\xc9\x4f\xf0\xcb\x7b\x30\x4a\x2f\xe1\x0d\x61\x48\x8b\xf1\xe2\xc6\xf7\xde\xcb\xaa\x7e\x79\xad\x8f\xd7\x0e\x45\xc0\xdf\xdb\x2e\x9c\x8a\x0f\x86\xf8\x94\x5b\x86\xf4\xea\xd2\xc9\x21\x7e\x4e\x45\xce\xcf\x25\x5d\x12\x79\x62\x0a\xed\x91\xe9\xf7\x55\x49\xd2\xd5\xd8\xd4\xe0\x0f\x45\x2a\x85\x0b\x5e\x9e\x86\xe9\x24\xcc\xd2\x98\x6b\x34\xbb\xb0\xa7\x63\xf1\xcf\xe9\x34\x8c\x31\x64\x39\x8a\xf9\x18\xe4\xca\x0a\xa2\x32\x35\xcf\xd5\xff\x02\x00\x00\xff\xff\x33\x4d\x81\x27\xe0\x12\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x61, 0xca, 0x9d, 0xaa, 0x66, 0x36, 0xdf, 0xbc, 0x51, 0xdb, 0x7b, 0x51, 0xd8, 0x3d, 0x6f, 0x4e, 0x9c, 0x8e, 0x50, 0x28, 0x7c, 0x18, 0x1d, 0x2, 0xb2, 0xc2, 0x2b, 0x26, 0xa1, 0xfe, 0x2d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleNFT.cdc":       examplenftCdc,
	"MetadataViews.cdc":    metadataviewsCdc,
	"NonFungibleToken.cdc": nonfungibletokenCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleNFT.cdc": {examplenftCdc, map[string]*bintree{}},
	"MetadataViews.cdc": {metadataviewsCdc, map[string]*bintree{}},
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
