// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleNFT.cdc (6.119kB)
// ../../../contracts/Metadata.cdc (672B)
// ../../../contracts/NonFungibleToken.cdc (4.832kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplenftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xdd\x6f\xdc\xb8\x11\x7f\xdf\xbf\x62\xce\x0f\xa9\x84\xda\xab\x16\x28\xfa\x20\xd8\x71\x0e\xf1\x2d\xe0\x87\x33\x0e\xc9\xb6\x7d\x08\x82\x1e\x57\x9c\xf5\xb2\x96\x48\x81\xa4\x76\xab\xfa\xf6\x7f\x2f\x86\xd4\x07\xf5\xe5\xcd\x35\x40\x85\x20\xd6\x8a\x33\xc3\xf9\x9e\x1f\x99\x24\xb0\x3d\x08\x03\xc2\x00\x93\x80\xff\x66\x45\x99\x23\x08\xfa\xbf\x40\x69\x99\x15\x4a\x82\xda\x03\x83\x4d\xae\x4e\xf0\xa4\xe4\xcd\xa6\x92\xcf\x62\x97\x23\x6c\xd5\x0b\xca\x55\x92\xc0\xa3\x25\x7e\xa9\x2c\x94\x4c\x5b\x22\xb7\x07\x04\xb5\xdf\x8b\x4c\xb0\x1c\x8c\x65\x92\x33\xcd\x61\x57\x59\x10\x16\x98\x31\x55\x81\x1c\xac\x82\x1d\x12\xff\x11\x75\x0d\x46\x14\x22\x67\x9a\xbe\x1e\xd4\x09\x0a\x26\x6b\x78\xda\x6c\x0d\x9c\x54\x95\xf3\x5e\x25\x27\x3b\x53\x1a\x61\x5f\xc9\x8c\xf4\x63\xb9\xb0\xf5\x7a\xb5\x12\x45\xa9\xb4\x25\x1d\x5b\x15\x9d\x86\xb0\xd7\xaa\x80\xab\x75\x32\x5e\x58\x67\x3c\xbb\x6a\xb9\x7e\x46\xcb\x38\xb3\xac\xa3\x6e\x3f\x78\xaa\x55\x59\xed\x20\x53\xd2\x6a\x96\x59\xf8\xc9\xfb\xe9\x69\xb3\x4d\xa7\xdb\xbd\xae\x56\x00\x00\xc4\x70\x74\xf6\x58\x96\x7f\xae\xca\x32\xaf\x53\xf8\xdb\xa3\xb4\x7f\xfd\x4b\x4f\x80\x47\xb2\xe8\x63\x23\xf7\x51\x0a\x2b\x58\x2e\xfe\x83\x3c\x8a\x47\x34\xff\x10\xf6\xc0\x35\x3b\x45\x82\xb7\x62\xae\x9d\xae\x29\xfc\xc8\xb9\x46\x63\xee\xc7\x2c\x0f\x58\x2a\x23\xec\x80\xc3\xaa\x90\xbe\x63\xd0\x68\x54\xa5\x33\x84\x59\x93\xd6\x8f\x4f\x9b\xed\x75\xe7\xa2\xf5\xdf\x05\x9e\x3e\xa1\x51\xf9\x11\x35\xbc\x3a\x21\xad\xa0\x1c\x2d\xf4\xfb\xad\x26\x6b\x92\x15\x98\xc2\x67\xab\x85\x7c\x9e\x2c\xda\x43\x55\xec\x24\x13\xf9\x22\x05\x47\x93\x69\x51\x52\xd4\x3b\x9a\x8e\x48\x48\x61\xa3\xee\x97\xfb\xd2\x5b\x3e\xf8\x1e\x6a\x31\x5c\x99\xd9\x60\x48\x30\xd1\xb1\x5f\x8e\x03\x5f\xd0\x63\x30\xdf\xaf\x05\x87\x3b\x10\x7c\xba\x40\x3a\xc0\x9d\x53\x65\xba\xd8\xed\x02\x77\xfd\x8e\x53\xb2\x40\x5b\xb8\x0b\x75\xef\x48\xcf\xee\x6d\xe0\xc7\x7d\x25\xe1\x19\x2d\x05\xd1\x44\x71\x0a\x5f\xb6\x75\x89\x5f\x47\xba\x6b\xb4\x95\x96\xf0\x65\xf0\x91\x1e\x22\xbe\xed\x32\xe1\x41\x98\x32\x67\xf5\xfb\x28\xbe\xbe\x40\xb9\x6d\xad\x78\xdf\xa4\x76\xfb\x7c\x0d\x74\x9d\xe8\xa9\x7d\x96\x91\xae\xd1\x3f\xe1\x28\xf0\x94\x3a\xb9\x71\x0a\x3f\xca\xfa\xb3\xd5\x55\x66\xef\xc7\x6e\x3f\x09\x9b\x1d\x1c\xf1\x68\x85\x9e\x8c\x19\x5c\x34\x22\x9d\x90\x07\xbe\x18\xd3\x47\xb3\xc4\xd0\xa5\x57\x17\xe5\xa9\x6b\xda\x67\x90\x6d\xe3\x88\xce\xb3\xc5\xdf\x62\x51\xe8\xec\x6f\xb3\xa9\xe3\x58\xb6\xaa\xd2\x22\x1d\x65\xe7\xb2\x65\x85\x28\xd0\xd6\x25\xa6\x70\x25\x0a\xf6\x8c\xc9\xbf\x4a\x7c\xbe\xfa\x16\x93\x82\x2c\x08\x14\x95\x41\xfa\xfb\x9c\x3e\xcf\x74\x2f\x21\x2d\xea\x3d\xcb\x30\xe8\xd0\x1f\x55\x9e\xa3\x9b\x13\xbf\x54\xbb\x5c\x64\xa3\x86\x45\x59\xc6\x9b\x46\x69\xa9\xd9\xa5\xf0\x61\xd2\xff\x9e\x36\xdb\x78\xae\x86\x1e\x1f\x7c\x05\xf9\x1e\xf3\x75\x42\xb2\x53\x5a\xab\xd3\xd3\x66\x1b\xf4\xe0\x38\x85\x77\x73\x1b\x2c\x30\xf7\x86\x8c\x64\xf4\x0b\xc4\x3d\x2e\x82\x52\x19\x3b\x93\xfd\x91\x46\x53\xe5\x16\xee\xee\xc8\xa3\x31\xfc\xf6\x5b\xfb\xe9\xde\x75\x2a\x6a\x55\x0b\x19\x73\xf5\x91\x49\x1a\xf1\x5e\xad\xc0\xc1\xa0\x71\x8f\x1a\x65\x86\xa9\x9b\xcd\x8f\x0f\x2d\x02\xf0\xb1\x43\xde\x53\x10\x4e\x10\x32\x53\x5a\x63\x66\xaf\x46\x71\xbf\x1c\xdf\x3e\x96\xe9\x1b\x11\xbe\x9e\x0e\xb0\x5f\xb4\x3a\x0a\x8e\x7a\x66\xe9\x13\x66\x28\x8e\xb3\x4b\x6f\xa4\x4e\x92\x00\x17\x1e\x7d\xe8\x9a\xec\x25\x47\x64\x4a\xee\x95\x2e\x84\x7c\x06\x97\x4a\x26\x24\x27\x02\x42\x59\xbd\x35\x54\x1f\x70\x12\xf6\x40\xd0\xeb\x57\x1f\xd9\x5f\xc9\x7d\x7b\x81\x39\x1f\xe4\x03\x01\x09\x75\x92\xc8\x09\x11\xa5\xf0\xe1\xd5\x53\xcf\x8c\xea\xa7\xcd\xf6\x3c\x1c\x89\x10\xcd\x0e\xa6\x4e\x1c\xdc\xde\xc0\xeb\x79\xae\x0b\x27\x89\x53\x8f\x60\x07\x68\x2c\xd4\x11\x1d\x4a\x24\x4b\x1c\x4a\xf2\x48\xac\xf5\x11\x30\xc9\xc1\x13\x09\x4b\x30\xce\x2d\xb3\x3c\x47\x3d\xc9\xed\x56\x6c\xd4\xbe\x3c\x3e\x04\xb9\x3d\x5b\x80\x23\x1b\x1c\x5e\x70\x78\xeb\xf6\x66\x64\xd0\xda\xeb\x1a\xbd\x60\x9d\x42\xbf\x41\x0c\xf7\xf7\x50\x32\x29\xb2\xe8\xaa\x10\xc6\x50\x98\x9e\x36\xdb\xab\x78\xd8\x70\xb0\x10\x23\xb4\xe5\xb6\x59\x0b\xde\xe2\xad\x6e\x37\x7d\xbf\x66\x1e\x4b\xc5\xb3\x4d\xeb\xf6\xc6\xb1\x2e\xb8\xb6\xe9\x3a\x60\xd9\x0b\xf9\xd5\xb9\x95\x5c\xc8\x38\x1f\x78\xb0\x73\xb0\x09\x52\x2e\x14\xd4\x31\x35\xd5\xd7\x30\x0a\x0e\x4c\x6b\x56\xff\x6f\xed\xee\x2d\x77\xfb\x17\x66\x7e\x80\x0f\xc3\x2e\xb4\x9a\xf0\xf4\x3d\x8b\x90\x4c\xe3\xc8\x21\x19\x59\xc0\xb9\x53\x59\xe2\xa9\x11\xde\xd8\x10\xd4\xd8\xe9\x20\xb2\x43\x97\x86\xee\x80\x91\x73\x50\x12\x27\x7b\xaa\x9c\x6f\xe7\x33\xe3\x8b\xe0\x5f\x3b\x03\x66\xc2\x1e\x22\x66\x8a\x37\xa1\xe5\xcb\xd1\xe6\x68\xac\x56\x75\xb7\xef\x42\xbc\xfd\xbc\x68\x72\xc3\x15\x92\x0b\x4f\xdb\x2c\x69\xcd\x1e\x98\x05\xa6\x69\x90\x8d\x62\xff\x0d\xd3\x67\x1e\xc1\x8d\x4a\xe3\x05\x6b\xb3\xa0\x5f\x37\xac\x48\xb6\x6f\x54\x6d\xd7\xb6\xaa\xad\xfb\x65\xc5\x92\x04\x8c\xf2\x16\xf4\x85\x0f\x19\x23\x10\xc7\x38\x08\x6b\xa0\x68\xcf\x58\x94\xb1\x44\xd0\x7e\x3d\x28\x6e\xbe\x6b\x78\xce\xdb\xfe\x6e\x26\xfa\xcc\x5c\x18\xbf\xe7\xd5\x14\x2e\x7f\xd7\x28\x16\xfb\xb9\x2c\xfc\xc1\x4d\xe0\x99\x11\x9d\x24\xf0\x51\x23\xb3\xe8\x32\xa4\xb2\x07\xa5\xe9\x40\x38\x8a\x46\x4e\xa7\x71\xae\x4e\x32\x63\xc6\x86\x27\xa5\xb0\x10\x34\xee\xe1\x6e\xc9\x0b\x24\xfa\x82\x2b\x46\xee\x24\x71\x54\xf4\x23\x7b\x7f\x37\x7a\xeb\x5e\x9b\xc2\x99\xcc\xa7\xb6\xa0\x86\x8a\xcf\xe3\x83\x24\xa1\x28\xd1\x70\x6e\xaf\x03\x9a\x2a\x92\xb5\x92\xe8\xf2\xcf\x65\x9a\x55\x90\x35\x6e\x75\x6d\x06\x8b\xd2\xd6\xe3\x3c\x6e\xe3\xed\x29\x7f\x22\x92\x1e\x03\x44\xb3\x93\xa9\x5f\x0f\x8c\xe8\xfa\x7f\xbb\x67\x28\x65\xa4\xfd\xa7\x0e\x0e\x78\xb5\x81\xf1\x42\x48\x50\x1a\x8c\xa2\xd2\xa0\x31\xd5\xde\x8d\xf8\xab\x10\x75\x92\xcd\xdd\x49\x23\x82\xed\x72\x97\x15\x85\x90\xd6\x19\xd7\xb9\x2b\x49\x66\x8f\xf8\x3f\x3b\xa0\xdc\xde\x54\x34\x52\x88\x9b\x4a\x89\xfe\x9a\xc6\x4b\xf4\xdb\x23\x14\xf7\xf3\xf1\x61\x3c\x77\xda\x21\x46\xff\x64\x03\xfa\x32\x51\x0a\x24\x19\x01\x36\xa8\xdc\xb8\xb5\x07\x14\x3a\xfc\xdc\x25\xf5\xa4\xe4\x1a\x6d\xa2\x51\x3a\x35\xb2\x53\x78\xf7\x7a\x11\xae\x9d\xff\x5f\x87\xfe\xf1\x38\x1b\x24\xda\xb8\x42\x08\xca\x49\x74\x7d\xb6\xcf\x8f\x89\xa5\xd0\xdc\x5e\x04\xa5\x16\x5c\x24\x4d\xcf\x51\xde\xb8\xf9\xd3\xe6\xc0\xbc\x37\x0f\x98\x81\x9d\x0b\x67\xbc\x78\x62\xec\x1b\x19\xf0\x07\x03\x2c\xcb\x54\x25\xed\x20\xfe\xd3\xa0\x43\x18\xdb\xf5\x08\x9f\xdc\xde\x78\x77\x8d\xb6\x9e\xf7\x0c\xdc\x2d\x2d\xfc\xb1\x69\xd8\xd1\x9f\xe3\xf9\x4e\xe2\xae\x8f\xe2\x21\xc6\xef\x6f\xe4\x9c\x65\x4e\x1e\x18\x27\xb0\x23\xf3\x47\xe2\x81\x0a\x7f\x1a\x14\x56\xdb\xce\x83\x2e\xd0\x57\x23\x15\x91\x61\x47\x6c\x10\x9f\xb1\x4a\xb3\xe7\xde\x33\xd4\xc6\x83\x7a\x79\xa3\xa3\x74\xaa\x34\x2e\x5f\x93\xd4\xe8\xf6\xa6\xe7\xf6\x78\x26\x69\xb6\x48\x06\x27\xa7\x78\xa0\x71\x97\xc0\x4d\x6b\xcd\x58\xc9\x76\x22\x17\xb6\x86\xbd\xd2\x4b\x08\x60\xb0\x7b\x2e\xe4\xcb\x6d\x38\x29\xfa\xbd\x2e\x57\xee\x75\x18\xc4\xe5\x83\xde\xf9\xfd\xb0\x68\x12\xaf\xee\xd0\xb2\x51\x25\x33\xfd\x8c\x76\xc9\x0b\xab\x99\x34\x0f\x03\xd8\xf4\xcd\xdf\x13\xbc\xc2\xb3\x0c\x4a\xdd\x8b\xb9\x10\x37\xcf\x38\x8d\x99\x67\x0e\x14\x74\xc8\x75\xf9\x0a\xf9\xbc\x3a\xaf\x56\xff\x0d\x00\x00\xff\xff\x21\xb9\xb5\xfb\xe7\x17\x00\x00"

func examplenftCdcBytes() ([]byte, error) {
	return bindataRead(
		_examplenftCdc,
		"ExampleNFT.cdc",
	)
}

func examplenftCdc() (*asset, error) {
	bytes, err := examplenftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleNFT.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x51, 0x8f, 0x20, 0x98, 0x51, 0x62, 0x80, 0xa8, 0xda, 0xdf, 0xc, 0x83, 0xb7, 0x8e, 0x97, 0x55, 0xc1, 0x8c, 0xe6, 0xea, 0xe0, 0xff, 0x56, 0xde, 0xb6, 0xf6, 0x2a, 0xfb, 0xe1, 0x87, 0xc8, 0xb2}}
	return a, nil
}

var _metadataCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\x1d\x13\x18\x7b\x80\x40\x18\x83\x5d\x77\x59\xcb\x2e\x63\x0c\xd7\x55\x3a\x81\xe3\x18\x59\x6e\x09\x25\xef\x3e\x9c\x91\xd4\xad\x1b\x36\x1d\x82\x92\xff\xd3\x1f\xe9\x77\x61\x07\xba\xb7\xc2\x4a\x0b\xbc\xa2\xa8\xbd\x12\x05\xe7\xa2\x00\x00\x88\x22\xa3\xef\x03\x6b\x04\xb2\x82\xdc\x2a\x8d\xf0\x4e\x78\x7a\x43\xdf\x9b\x23\x32\x9c\x27\x72\xa6\xdb\x60\xe1\x80\x12\x09\x5f\x56\x35\x7c\x6c\x07\x87\x9f\x19\xc2\xbf\xd3\x11\x2b\xbf\xe0\x48\x78\xaa\x21\x92\x55\x0d\xcf\x76\xd8\x08\x07\x2d\x4f\xd3\xd4\x78\xd9\xc4\x4f\x9f\xe1\x85\xbc\x33\x6a\xb8\xf9\xb1\x41\x01\xab\x3a\xac\x61\x23\x4c\xf6\x90\x89\x7b\xf4\x9a\xc9\x09\xf5\x76\x61\x16\x88\x2c\x49\xb9\xbc\xc5\x4a\xbd\x1e\xae\x94\x3b\x46\x17\xa0\x4a\xd6\x8a\xe5\xd1\xb4\x8f\xd1\xab\x89\x8f\x5c\x4a\xcc\x9a\xa4\x5f\xc0\x71\x25\x84\xed\x77\xe8\x76\x56\x91\xb9\x13\x43\x60\x5a\x4d\xa1\xa3\x0e\x65\x70\xf8\x9f\x08\x12\x9f\xeb\x04\x6e\x4d\xfe\x38\x3f\x30\x35\x81\x29\x17\x66\x9f\x66\x6e\xb2\xb3\xc7\xe2\x27\x00\x00\xff\xff\xf4\x91\xd2\x96\xa0\x02\x00\x00"

func metadataCdcBytes() ([]byte, error) {
	return bindataRead(
		_metadataCdc,
		"Metadata.cdc",
	)
}

func metadataCdc() (*asset, error) {
	bytes, err := metadataCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Metadata.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0x6c, 0xda, 0xb5, 0x71, 0x3d, 0x56, 0xbc, 0xec, 0xb6, 0x35, 0xa4, 0x5a, 0x0, 0xf7, 0xb0, 0xce, 0x57, 0xf9, 0x1e, 0x85, 0xa, 0x1b, 0x98, 0xf1, 0xde, 0x65, 0x35, 0xb, 0x2f, 0x36, 0x36}}
	return a, nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x8f\xdb\xba\x11\xbe\xeb\x57\xcc\xcb\x03\x9a\xdd\xc0\x6b\xf7\x50\xf4\x60\x20\x68\xda\xb7\x6f\x01\x5f\xb6\x0f\x5b\x17\x3d\x04\x01\x4c\x8b\x23\x9b\x08\x45\x2a\x24\x65\xc7\x0d\xf6\xbf\x17\x33\x24\x25\xca\xf6\x26\x9b\x5b\x73\x89\x57\x22\xbf\x99\xf9\xe6\x9b\x8f\xd4\xe2\xdd\xbb\xaa\xfa\xf5\x57\x58\xef\x11\x1e\xb4\x3d\xc2\xa3\x35\x77\x0f\xbd\xd9\xa9\xad\x46\x58\xdb\xcf\x68\xc0\x07\x61\xa4\x70\x92\x17\x6e\x1e\xad\xc9\xef\xf9\xf5\x06\x6a\x6b\x82\x13\x75\x00\x65\x02\xba\x46\xd4\x58\x55\x84\x37\xfc\x09\x61\x2f\x02\x08\xad\xc1\x58\x73\xd7\x64\xf4\xc0\xe8\x79\xb7\x87\xda\xf6\x5a\xd2\xdf\x8d\x75\x2d\x04\x3b\xaf\x56\x0d\x08\xe8\x3d\x3a\x38\x0a\x13\x3c\x04\x0b\x12\x3b\x6d\x4f\x20\xc0\xe0\x11\x4c\x13\x86\xfd\x33\x08\x7b\x54\x6e\xcc\xe6\xc8\x70\x06\x51\x56\xc1\x82\x6a\x3b\x8d\x2d\x9a\x40\xcb\xe0\xbc\x88\x31\xd7\x39\xe7\x7e\x89\xb3\x17\x07\xca\x18\x1a\xab\x89\x26\x2a\x86\x80\x5c\xaf\xd1\x83\x30\x12\x8c\x68\x95\xd9\x55\x5c\x6a\x98\x54\xef\x3b\xac\x55\xa3\xd0\xcf\x13\x83\x0f\xeb\x0d\x38\xf4\xb6\x77\x99\xaa\xda\x3a\x1c\x1e\x41\x38\x75\x89\x33\x87\x9d\x43\x8f\x54\xbb\x30\xf0\xf8\xb0\x06\x65\x18\xdd\xb7\xc2\x8d\xb5\x27\xe0\xdf\xac\xd6\x58\x07\x65\xcd\x06\x9e\x26\xf8\x23\x34\xa1\xfa\x60\x1d\x65\xcd\xd4\xbe\xf5\x8c\x5b\x0f\x7b\xe7\xd5\x8a\x5a\x59\xeb\x5e\xf2\xa2\x06\x8f\xd0\xf4\x86\xdf\x71\x0b\x04\x33\x40\x59\xd8\xa3\x41\x47\x8f\x50\x78\xa5\x4f\x55\x6b\x0f\xa9\xad\x9e\x12\x25\x5a\x6c\x1f\xc0\x36\xbc\xba\x0c\xc1\xf9\xfe\xe1\xec\x41\x49\x74\x1b\x5e\xb9\x79\xc2\x1a\xd5\x81\xfe\x1c\xd2\x1d\x48\xf4\x5c\x87\x2f\x9f\x80\xc4\x5a\x0b\x87\x45\x72\x47\x15\xf6\xe0\x6d\x8b\xd0\x39\x64\xd0\xce\x7a\xa6\x49\x2a\x5e\x51\x25\x56\xbf\xf4\xca\x21\x27\x35\x72\x56\x74\xb7\x46\x17\x84\x32\xa9\xa7\x0c\xb4\xc5\xbd\x38\x28\xeb\x86\x69\xf0\x51\x29\x27\xa0\x14\x3c\x76\xc2\x89\x80\xb0\xc5\x5a\xf4\x94\x66\x80\x9d\x3a\xa0\xe7\x18\xac\x60\xfa\x21\xb6\x4a\xab\x70\xa2\x48\x7e\x4f\xfb\x04\x38\x6c\xd0\xa1\xa9\x91\x44\x1a\x15\x5c\xa6\x44\xe9\x5a\xa3\x4f\x80\x5f\x3b\xeb\x13\x5e\xa3\x50\xcb\xa8\xba\xb1\x76\x65\xc0\x1a\x04\xeb\xa0\xb5\x0e\xab\xc4\xf9\x48\xd7\x1c\x56\x34\x83\xde\xa6\xc4\x28\x29\x7f\x9e\x55\x2b\x3e\x23\xd4\xbd\x0f\xb6\x1d\x9a\x90\x48\x9b\x0c\xd0\xb4\x11\x34\x96\x16\x0e\xc2\x29\xdb\x13\xa4\x32\xbb\xd4\x0b\x82\x8f\x7a\x98\x57\xd5\x3f\x4e\xd0\x7b\xe2\x73\x40\xe6\x12\x46\xa0\x59\x4a\xca\x36\x2c\xc9\xa9\xc6\x3d\xd4\xc2\x80\x47\x23\x2b\xda\xe5\xa2\x58\xb2\xda\x3a\x44\x77\x17\xec\x1d\xfd\x3f\xe3\xd8\x24\x3c\x6a\x99\xd9\x51\x7e\x1c\x84\xa7\x99\xd2\x12\x50\x23\xa1\x6a\xd0\x28\x77\xe8\xaa\x8b\x71\x5a\x5b\x0e\x95\xa7\x8e\x54\x6f\x6c\xd8\xa3\xe3\x14\x67\x83\x2d\xb1\x37\x78\xe2\xe6\xc4\xd0\xd2\x89\x38\x1a\x8f\x0f\xeb\xaa\x71\xb6\xbd\xe8\x29\xfb\x94\x81\x3a\x3b\x88\xc4\xce\x7a\x15\x86\x4e\x82\x35\x93\x58\x6f\x7d\x35\xd5\x68\x6d\xa9\x13\x21\xca\x37\x38\x61\x7c\x83\x6e\x5e\x55\xef\x16\x55\xb5\x58\xb0\x93\xb7\x24\xde\x38\xd5\xe7\xd6\x3c\x87\x7f\x32\x74\xf9\x96\x9a\xa5\x35\x6d\x56\x6d\x67\x5d\x88\x6d\x29\xfa\xad\x7c\xe1\xed\x8b\x45\xd5\xf5\xdb\x2b\xd0\x97\xae\xfa\xad\xaa\x00\x00\x52\x56\xc1\x06\xa1\xc1\xf4\xed\x16\x1d\x7b\x42\x6c\x1d\x2b\x55\xf9\xe8\x7a\xca\x00\x7e\x55\x3e\xf0\x44\xd0\x5e\x0a\x75\x10\x2e\x6e\xfe\x57\xdf\x75\xfa\xb4\x84\x7f\xaf\x4c\xf8\xeb\x5f\x06\xf0\xdf\x0f\x31\x4d\x11\x00\x5b\x15\x02\x4a\x38\x12\xc7\xa9\x0f\x45\xaa\x54\x87\x0a\x4a\x68\xf5\x5f\x94\x69\xfb\x10\x06\x19\xe6\xb7\xb4\x78\x35\x2e\xbc\xb9\xbd\x16\x4a\xf9\x69\x34\x91\x0e\x34\xe5\x07\x25\x98\x59\xde\xa7\x8c\x54\xb5\x08\xac\xc6\xc1\x38\x2f\x7c\x31\x01\x07\x38\x8a\x02\x04\x48\x47\xf3\x32\xdb\xc5\x02\x56\x17\x7b\x95\x07\x63\x43\xf4\x5d\x10\x75\x6d\x7b\x13\xde\x7a\x36\x7b\xb1\xc3\x19\x6c\x08\x66\xc3\xad\x86\x2d\xc2\xc6\x28\xbd\x99\x5f\xe7\xe0\x3f\x29\xf4\x8d\x92\x99\xec\x19\x67\xb1\x84\xbf\x4b\xe9\xd0\xfb\xbf\x5d\xa5\xe4\x25\x3e\x92\xc6\x51\xf2\x20\x4d\x0e\x82\xb3\xaa\x42\x66\x2a\x59\xdd\x6b\x88\x2a\xd1\x5f\x28\xe8\x3e\x2e\x99\xd4\x13\xec\xb5\x6a\x56\xd3\x4b\x4b\x92\x90\x1f\xce\xff\xf1\x7a\x72\x1e\xe9\xf2\xd0\x82\x15\xa9\xef\x1b\xaf\x28\xe6\xa0\x37\xea\x4b\x8f\xb0\xba\x4f\xa4\x89\x7a\xcf\x32\xdd\x0b\x3f\x2c\x25\x40\x8d\x01\xc6\x84\xf9\xd5\xf3\x90\xe7\x53\x3c\xc3\xda\x81\x7b\xf2\x93\x94\x1c\xa9\xec\x9a\x81\x52\x0d\x79\x3f\x5f\xa5\x1a\x65\xe2\x19\x94\x32\x27\x53\x42\x19\x1d\x8f\x30\x13\x1e\x3b\x3c\xd5\x72\x59\xeb\xe3\xc3\x7a\x79\x5e\xe6\x0f\x73\x2f\x38\xb6\xd0\xa2\x54\x74\x72\x66\xb9\x7b\xc8\xb6\x59\x98\xe6\x2b\xb8\xce\x97\x89\x29\xdf\x83\x27\x3b\xa4\xcb\xc9\x70\x8d\x1a\x62\x14\x9a\x22\xd7\x8b\x8b\x54\x80\x78\x1a\x47\x46\xdc\xa4\xb4\xa6\x37\x03\xec\x4d\xfe\xb1\xba\xcf\xb5\xde\x2e\xe1\xc3\x94\x0f\xde\x48\xf7\x90\xe9\x23\xfa\xe7\xd0\xf7\x3a\xcc\x95\x84\xf7\xef\xa1\xc4\x7a\x43\x42\x59\xdd\x67\xe5\x8f\x5e\x10\x67\xaa\xed\x7d\xa0\x21\xe6\xab\xa0\x68\x11\x44\x1c\x17\xba\xd9\xa0\xa7\x51\x58\xdd\xbf\x99\x44\x7b\xae\xa6\xbf\x7e\xd0\x8d\x34\x53\x3e\xf3\xf0\x53\xad\xc8\x17\xb9\xec\xff\x29\x50\x3e\xe9\x82\xf8\x3c\x36\x42\xf0\x2f\xe1\x76\x3d\x4b\x99\x7a\x20\xa4\x2c\x5b\x70\x16\xba\x08\x5f\x76\x24\x81\xdf\x30\x3f\xb1\x05\xb7\x2f\x17\xca\x03\x33\xb8\x64\x3a\xc6\x6b\xdb\xb6\x7c\xd7\xca\x1b\xba\x7e\xab\x95\xdf\x43\x63\xdd\xf0\x71\x31\xc9\xe5\x85\xfa\xc7\x8c\xff\x20\x84\xfa\x6c\x36\xbe\x9b\x6e\xb9\x68\x87\x61\x75\xef\x6f\x6e\x97\xf0\x31\x6a\xeb\xd3\xc5\x92\xad\x75\xce\x1e\x1f\x1f\xd6\x85\xb5\xdd\x2e\xe1\x4f\x79\x58\xaf\x1b\x46\x2a\x28\x0d\x80\xa9\x1d\x5d\x27\x26\x9f\x1f\x85\x4d\x6c\x31\xdf\xb4\x65\xfe\xfa\x18\xee\x06\xe4\x34\xd9\x5f\x5e\x14\xc6\x48\xc7\x72\x98\xd2\xd9\x20\x92\xd9\x35\xba\x4a\xd9\xdc\x2b\x7e\x27\x1c\xdf\x50\xf7\x56\xcb\xd1\x95\x53\x3e\x57\x24\x92\xef\x0d\x74\x80\x48\x5a\xbb\x84\x0f\xdf\x22\x3f\x4b\xda\xfb\x5c\xfd\x5f\xd8\xc4\xf7\x06\x24\xce\xc7\xe5\x40\x8c\xb9\x78\x90\x03\x39\x25\xd0\xb0\x29\x44\x17\x49\x1b\x95\x04\xe1\x9c\x38\xbd\x4e\x8d\x25\x60\x54\x22\x38\x0c\xbd\x33\x69\x62\x9d\x38\x65\x7b\xa2\x77\x71\xa6\x1c\xe6\x9e\xd4\xd7\x7b\xf2\x82\xae\xcb\x60\x4f\x39\x4a\x52\x37\xca\xf1\x2b\x29\xde\xc4\xcb\x2f\xe1\x2b\x71\x16\x0b\xf0\x76\x3c\xbf\x63\x73\xf8\xf3\xc1\xa1\x90\x20\x45\x10\x4c\x11\xdf\xc1\x5b\x0c\x7b\x2b\xd3\xa9\xa3\xc2\xcf\x4c\xd8\xb9\xc7\x3b\xbc\x62\xf1\x1e\x75\x33\x1f\x54\xf8\x51\xc9\x4f\xf0\xcb\x7b\x30\x4a\x2f\xe1\x0d\x61\x48\x8b\xf1\xe2\xc6\xf7\xde\xcb\xaa\x7e\x79\xad\x8f\xd7\x0e\x45\xc0\xdf\xdb\x2e\x9c\x8a\x0f\x86\xf8\x94\x5b\x86\xf4\xea\xd2\xc9\x21\x7e\x4e\x45\xce\xcf\x25\x5d\x12\x79\x62\x0a\xed\x91\xe9\xf7\x55\x49\xd2\xd5\xd8\xd4\xe0\x0f\x45\x2a\x85\x0b\x5e\x9e\x86\xe9\x24\xcc\xd2\x98\x6b\x34\xbb\xb0\xa7\x63\xf1\xcf\xe9\x34\x8c\x31\x64\x39\x8a\xf9\x18\xe4\xca\x0a\xa2\x32\x35\xcf\xd5\xff\x02\x00\x00\xff\xff\x33\x4d\x81\x27\xe0\x12\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x61, 0xca, 0x9d, 0xaa, 0x66, 0x36, 0xdf, 0xbc, 0x51, 0xdb, 0x7b, 0x51, 0xd8, 0x3d, 0x6f, 0x4e, 0x9c, 0x8e, 0x50, 0x28, 0x7c, 0x18, 0x1d, 0x2, 0xb2, 0xc2, 0x2b, 0x26, 0xa1, 0xfe, 0x2d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleNFT.cdc":       examplenftCdc,
	"Metadata.cdc":         metadataCdc,
	"NonFungibleToken.cdc": nonfungibletokenCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleNFT.cdc": {examplenftCdc, map[string]*bintree{}},
	"Metadata.cdc": {metadataCdc, map[string]*bintree{}},
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
