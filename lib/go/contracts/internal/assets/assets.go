// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleNFT.cdc (6.862kB)
// ../../../contracts/MetadataViews.cdc (1.766kB)
// ../../../contracts/NonFungibleToken.cdc (4.832kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplenftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x5f\x6f\xdb\xba\x15\x7f\xf7\xa7\x38\x37\x0f\x9d\x8d\x25\xd6\x06\x0c\x7b\x30\xe2\xa6\x45\x73\x0d\xe4\xe1\x06\x45\xeb\x6d\x0f\x45\xb0\x4b\x8b\xc7\x31\x17\x89\x14\x48\xca\x9e\x96\xfa\xbb\x0f\x87\xd4\x1f\x4a\xa2\x92\x74\x05\x26\x14\xad\x25\x9e\x73\x78\xfe\x9f\x1f\xd9\x24\x81\xed\x41\x18\x10\x06\x98\x04\xfc\x37\xcb\x8b\x0c\x41\xd0\xdf\x39\x4a\xcb\xac\x50\x12\xd4\x1e\x18\x6c\x32\x75\x82\x7b\x25\xaf\x36\xa5\x7c\x14\xbb\x0c\x61\xab\x9e\x50\xce\x92\x04\xee\x2c\xf1\x4b\x65\xa1\x60\xda\x12\xb9\x3d\x20\xa8\xfd\x5e\xa4\x82\x65\x60\x2c\x93\x9c\x69\x0e\xbb\xd2\x82\xb0\xc0\x8c\x29\x73\xe4\x60\x15\xec\x90\xf8\x8f\xa8\x2b\x30\x22\x17\x19\xd3\xf4\xf5\xa0\x4e\x90\x33\x59\xc1\xfd\x66\x6b\xe0\xa4\xca\x8c\x77\x2a\x39\xd9\xa9\xd2\x08\xfb\x52\xa6\xa4\x1f\xcb\x84\xad\x96\xb3\x99\xc8\x0b\xa5\x2d\xe9\xd8\xa8\xe8\x34\x84\xbd\x56\x39\x5c\x2c\x93\xe1\xc2\x32\xe5\xe9\x45\xc3\xf5\x1b\x5a\xc6\x99\x65\x7f\x17\x78\x32\x2d\x4b\xef\xab\xa7\x9f\x15\xe5\x0e\x52\x25\xad\x66\xa9\x85\x5f\xbd\xc7\xee\x37\xdb\xd5\x78\xe3\xe7\xd9\x0c\x00\x80\x18\x8e\xce\x32\xcb\xb2\xaf\x65\x51\x64\xd5\x0a\xfe\x76\x27\xed\x5f\xff\xd2\x11\xe0\x91\x6c\xfb\x54\xcb\xbd\x93\xc2\x0a\x96\x89\xff\x20\x9f\x2f\x06\x34\xff\x10\xf6\xc0\x35\x3b\xcd\x05\x6f\xc4\x5c\x3a\x85\x57\xf0\x91\x73\x8d\xc6\xdc\x0c\x59\x6e\xb1\x50\x46\xd8\x1e\x87\x55\x21\x7d\xcb\x90\x21\x69\x91\x65\xe8\x5c\xfb\xd5\x2a\xcd\x1e\xf1\x33\xb3\x87\x15\x04\x2f\x13\xe4\x9f\xcb\x5d\x26\x52\x4f\xdd\xfd\xee\x11\xff\x26\xa4\x45\x3d\x29\xb7\xa5\xd5\x68\x54\xa9\x53\x84\xa8\x6b\x97\x77\xf7\x9b\xed\x65\x3f\x68\xcb\x2f\x68\x54\x76\x44\x0d\xcf\x4e\x4a\xb8\x6b\x67\xf8\x6c\xb4\x26\x59\x8e\xa4\x84\x16\xf2\x71\xb4\x68\x0f\x65\xbe\x93\x4c\x64\x93\x14\x1c\x4d\xaa\x45\x41\xe6\xb7\x34\x2d\x91\x90\xc2\xce\xdb\x37\xf7\xa5\x0b\x41\xef\x7b\xa8\x45\x7f\x25\xb2\x41\x9f\x60\xa4\x63\xb7\xbc\x08\x7c\x41\x8f\xc1\x6c\xbf\x14\x1c\xd6\x20\xf8\x78\x81\x74\x80\xb5\x53\x65\xbc\xd8\xee\x02\xeb\x6e\xc7\x31\x59\xa0\x2d\xac\x43\xdd\x5b\xd2\xb3\xfb\xd5\xf3\xe3\xbe\x94\xf0\x88\xd6\x85\x71\xbe\x58\xc1\xb7\x6d\x55\xe0\xc3\x40\x77\x8d\xb6\xd4\x12\xbe\xf5\x3e\xd2\x43\xc4\xd7\xfd\x54\xb8\x15\xa6\xc8\x58\xf5\x7e\xbe\xb8\x7c\x0b\xf9\xb6\xb1\xe7\x7d\x5d\x6d\xcd\xf3\x10\x68\x3d\xd2\x58\xfb\x7c\x23\x11\xf3\x7f\xc2\x51\xe0\x69\xe5\x84\x2f\x56\xf0\x51\x56\x5f\xad\x2e\x53\x7b\x33\x0c\xc0\x49\xd8\xf4\xe0\x88\x07\x2b\xf4\xa4\xcc\xe0\xcb\xe6\xac\x46\x3c\x81\x6b\xa2\x4c\xf3\x28\x07\xb4\x29\xd7\x46\x7e\xec\xa9\xe6\xe9\x65\xe0\x30\xca\x71\xb6\xc5\x9b\x6d\x0b\x7d\xff\x03\xd6\xb5\x6c\xd3\xf6\x95\x5a\xac\x06\xb9\x3b\x6d\x63\x2e\x72\xb4\x55\x81\x2b\xb8\x10\x39\x7b\xc4\xe4\x5f\x05\x3e\x5e\xbc\xc5\xb8\x20\x33\x02\x6d\x65\x50\x1c\x3e\xe3\xcf\x91\xe6\xe6\x9a\xe1\x9e\xa5\x18\x0c\x92\x61\x3b\x1d\xb4\x33\xca\x3c\x5e\xf7\x73\x4b\xbd\x70\x05\x1f\x46\xed\xf1\x7e\xb3\x5d\xc4\x2a\xec\xee\xd6\xd7\x97\xef\x40\x0f\x23\x92\x9d\xd2\x5a\x9d\xee\x37\xdb\x60\x54\x2c\x56\xf0\x2e\xb6\xc1\x04\x73\x67\xc8\x40\x46\xb7\x40\xdc\xc3\xc2\x28\x94\xb1\x91\x8a\x98\x6b\x34\x65\x66\x61\xbd\x26\x8f\x2e\xe0\xfb\xf7\xe6\xd3\x8d\xeb\x63\xd4\xc8\x26\xd2\xe6\xe2\x13\x93\x84\x49\xbc\x5a\x81\x83\x41\xe3\x1e\x35\xca\x14\x57\x0e\x4c\xdc\xdd\x36\x90\xc5\xc7\x0e\x79\x47\x41\xc0\x46\xc8\x54\x69\x8d\xa9\xbd\x18\xc4\xfd\xf5\xf8\x76\xb1\x5c\xbd\x10\xe1\xcb\xf1\x7c\xfb\xac\xd5\x51\x70\xd4\x91\xa5\x2f\x98\xa2\x38\x46\x97\xc6\x82\xe3\x13\xb2\xa3\x0b\x5c\x9e\x24\xc0\x85\x07\x54\xba\x22\x8f\x90\xab\x52\x25\xf7\x4a\xe7\x42\x3e\x82\x4b\x36\x13\x92\x13\x01\x01\xc7\xce\x5e\xaa\x20\x38\x09\x7b\x20\x34\xf9\xbb\x8f\xfd\xef\xe4\xe0\xbd\xc0\x8c\xf7\x32\x86\x10\x91\x3a\x49\xe4\x04\xf2\x56\xf0\xe1\xd9\x53\x47\x66\xfd\xfd\x66\x7b\xee\x8f\x54\x98\x47\x07\x5b\x2b\x0e\xae\xaf\xe0\xf9\x1c\xeb\xdd\x49\xe2\xd4\x23\xfc\x04\x1a\x73\x75\x44\x07\x7c\xc9\x12\x87\xf9\x3c\xb8\x6c\xbd\xc3\x24\x07\x4f\x24\x2c\x21\x53\xb7\xcc\xb2\x0c\xf5\x28\xfb\x1b\xb1\xf3\xe6\xc7\xdd\x6d\x90\xfd\xd1\x12\x1d\xd8\xe0\xf0\x86\x03\x8e\xd7\x57\x03\x83\x96\x5e\xd7\xf9\x13\x56\x2b\xe8\x36\x58\xc0\xcd\x0d\x14\x4c\x8a\x74\x7e\x91\x0b\x63\x28\x4c\xf7\x9b\xed\xc5\xa2\xdf\x92\x30\x17\x03\xd8\xe8\xb6\x59\x0a\xde\x00\xc7\x76\x37\x7d\xb3\x64\x1e\x14\x2e\xa2\x6d\xed\xfa\xca\xb1\x4e\xb8\xb6\xee\x4b\x60\xd9\x13\xf9\xd5\xb9\x95\x5c\xc8\x38\xef\x79\xb0\x75\xb0\x09\x52\x2e\x14\xd4\x32\xd5\xf5\x59\x33\x0a\x0e\x4c\x6b\x56\xfd\x6f\x0d\xf1\x25\x77\xfb\x1f\xcc\xfc\x02\x1f\xfa\x7d\x6a\x36\xe2\xe9\xba\x1a\x21\xa1\xda\x91\x7d\x32\xb2\x80\x73\xa7\xb2\xc4\x53\x2d\xbc\xb6\x21\xa8\xb1\xd3\x41\xa4\x87\x36\x0d\xdd\x99\x29\xe3\xa0\x24\x8e\xf6\x54\x19\xdf\xc6\x33\xe3\x9b\xe0\x0f\xad\x01\x91\xb0\x87\xd0\x9f\xe2\x4d\xb0\xff\xf5\x68\x73\x34\x56\xab\xaa\xdd\x77\x22\xde\x7e\xa2\xd4\xb9\xe1\x0a\xc9\x85\xa7\x69\xa7\xb4\x66\x0f\xcc\x02\xd3\x34\xea\x06\xb1\x7f\xc3\x7c\x8a\x23\xc0\x41\x69\x3c\x61\x65\x26\xf4\x6b\xc7\x19\xc9\xf6\x8d\xaa\xe9\xeb\x56\x35\x75\x3f\xad\x58\x92\x80\x51\xde\x82\xae\xf0\x21\x65\x04\xfd\x18\x07\x61\x0d\xe4\x75\x7f\x75\x19\x4b\x04\xcd\xd7\x83\xe2\xe6\xa7\xc6\x6b\xdc\xf6\x77\x91\xe8\x33\xf3\xca\x80\x3e\xcf\xc6\x70\xfb\xa7\x86\xb5\xd8\xc7\xb2\xf0\x17\x37\xa3\x23\x43\x3c\x49\xe0\x93\x46\x66\xd1\x65\x48\x69\x0f\x4a\xd3\xc9\x76\x10\x8d\x2c\x53\x27\xe0\xea\x24\x53\x66\x6c\x78\xd2\x0a\x0b\x41\xe3\x1e\xd6\x53\x5e\x20\xd1\xaf\xb8\x62\xe0\x4e\x12\x47\x45\x3f\xb0\xf7\x87\xf1\xdd\x84\x7b\x69\xea\x36\x33\x77\xe0\xe0\x8f\xb2\xfa\x52\x4f\xcd\xe7\xf8\x90\x3e\x47\xfa\x95\xdc\xdb\x9f\x36\x9f\xe4\x60\x07\x86\xd6\x4e\xe8\x6b\x4e\xa8\xad\x0e\xf8\x28\xeb\xde\x60\x44\xcc\x49\x75\x77\x19\x0d\xf1\xa6\xeb\xf4\xcd\x8b\xc3\xac\x24\x21\x5f\x13\x3c\x6e\xae\x81\xea\x56\x23\x2b\x25\xd1\x15\xa9\x2b\x47\xab\x20\xad\x73\xcf\xf5\x62\xcc\x0b\x5b\x0d\x8b\xbd\x89\x9a\xa7\xfc\x95\x48\x3a\x88\x34\x8f\x8e\xef\x28\x84\x6a\x87\x64\xb3\x67\x28\x65\xa0\xfd\x97\x16\x33\x79\xb5\x81\xf1\x5c\x48\x50\x1a\x8c\xa2\xfe\x41\xb3\xbc\xb9\x13\xf3\x57\x60\xea\x24\xeb\x3b\xb3\x5a\x04\xdb\x65\xae\x74\x72\x21\xad\x33\xae\x75\x57\x92\x44\x2f\x52\xfc\xe5\x4b\x73\x2f\x55\x4b\x21\x6e\x0a\x28\xfd\x6b\x6a\x2f\xd1\xbb\x87\x71\xee\xf5\xee\x76\x38\x9c\x9b\x49\x4f\x7f\x64\x8d\x9d\x53\x51\x08\x24\x19\x01\x80\x2a\x1d\x26\xb1\x07\x14\x3a\xfc\xdc\x56\xfe\xa8\x70\x6a\x6d\xe6\x83\xec\xab\x65\xaf\xe0\xdd\xf3\xab\xa8\xf7\xfc\xff\xba\x59\x19\xce\xfc\x5e\xa2\x0d\x2b\x88\xf0\xae\x44\x37\x8c\xba\xfc\x18\x59\x0a\xf5\x15\x51\x50\x8a\xc1\xb5\xe1\xf8\x38\xea\x8d\x8b\x1f\xdf\x7b\xe6\xbd\x78\x62\x0f\xec\x9c\x38\x2a\x2f\x46\xc6\xbe\x90\x01\x7f\x30\xc0\xd2\x54\x95\xd2\xf6\xe2\x3f\x0e\x3a\x84\xb1\x5d\x0e\x40\xdc\xf5\x95\x77\xd7\x60\xeb\xb8\x67\x60\x3d\xb5\xf0\xc7\xba\xe9\xce\xff\xbc\x88\x77\x12\x77\x47\xb7\xe8\x1f\x84\xba\xfb\x57\x67\x99\x93\x07\xc6\x09\x6c\xc9\xfc\xcd\x42\x4f\x85\x3f\xf5\x0a\xeb\x2b\x7a\xdc\x40\xd1\xe1\x50\x30\x7b\x30\x7d\xe6\xe8\x3d\x2b\xac\x21\x31\xfe\x35\xc1\xc8\x91\x71\x4a\x44\x77\xdf\x4a\x12\x7c\x6f\x7c\x83\x80\xd1\x7d\x6c\x7c\x7f\x4f\xd6\x33\xaf\x19\xe9\x41\x93\xeb\x9a\x0d\xf5\x08\xc3\x8e\x58\xa3\xfe\x5a\x60\xcb\x4e\x33\x28\x68\x07\x2f\x34\xcc\x56\xd1\x3a\xa3\x96\x24\x75\x7e\x7d\xd5\x71\x07\x98\x36\xea\xd0\x45\x4f\xeb\xb6\x46\xeb\xe9\x91\xb2\x82\xed\x44\x26\x6c\x05\x7b\xa5\xa7\x90\x60\x4f\x83\x4c\xc8\xa7\xeb\x70\x58\x76\xdb\xbe\xde\x9c\x2e\xc3\x3c\x9d\xbe\x12\x38\xbf\x9f\x8f\xcf\xb7\xb1\x60\x0f\x1a\x16\xd3\x8f\x68\x5f\xf2\xc6\x2c\x52\xd1\x61\x30\xeb\x11\xf1\x23\x81\xcc\x3d\x4b\xaf\xab\x79\x31\xaf\xc4\xd0\x33\x06\xf1\x1b\x25\x63\xa0\xa4\x3b\xcd\x4c\xff\xff\xc8\x79\x76\x9e\xcd\xfe\x1b\x00\x00\xff\xff\xa3\x53\xa4\x6c\xce\x1a\x00\x00"

func examplenftCdcBytes() ([]byte, error) {
	return bindataRead(
		_examplenftCdc,
		"ExampleNFT.cdc",
	)
}

func examplenftCdc() (*asset, error) {
	bytes, err := examplenftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleNFT.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x44, 0x91, 0x75, 0x5b, 0x85, 0x50, 0xd3, 0x7d, 0x38, 0x32, 0x57, 0x68, 0x4a, 0xac, 0x6, 0x4b, 0x8e, 0xb8, 0xb6, 0xa7, 0x2d, 0xda, 0x8a, 0xa0, 0x2b, 0x4b, 0x4b, 0xb0, 0x17, 0x8c, 0xa0, 0x91}}
	return a, nil
}

var _metadataviewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xd1\x6a\xe3\x38\x14\x7d\xd7\x57\xdc\xa7\x25\x29\xad\xdd\x76\x97\xc0\x1a\xc2\x52\xb6\xed\x92\x65\x5a\x4a\x9b\x99\x97\xa1\x0c\xb2\x7c\x1d\x6b\x46\x96\x8c\x74\x95\x4e\x28\xfd\xf7\x41\x8a\xed\x38\x71\xca\xcc\xf8\xc1\xd8\xd2\xd1\xd1\xb9\xe7\x5c\x29\x3d\x39\x61\x6c\x59\x49\x07\xc2\x68\xb2\x5c\x10\xc8\xba\x51\x58\xa3\x26\x07\x54\x21\xd4\x48\xbc\xe0\xc4\xc1\x11\xd7\x05\xb7\x05\x34\xd6\x34\xc6\x61\xc1\xa4\x86\xdb\x0f\x8b\x87\xb3\xf3\xd9\x9f\xb3\x84\xb1\x47\x2c\x33\xa8\x88\x1a\x97\xa5\xe9\x4a\x52\xe5\xf3\x44\x98\x3a\x35\xba\x54\xe6\x25\x8d\xaf\x5c\x99\x3c\xad\xb9\x23\xb4\x69\xa9\x64\xe3\xd2\xcb\xf3\xcb\x8b\xf3\xbf\x2f\x66\x67\xba\xa4\xb3\x6e\xb3\xa4\x2e\x18\x7b\x22\xeb\x05\x39\xe0\xba\x00\x8b\xce\x78\x2b\xd0\x81\xe0\x7a\x27\x11\x8c\x46\x30\x16\x6a\x63\x91\xf5\x4a\x69\xd3\xa0\x3b\x05\xc1\x95\xc2\x02\xd6\x12\x5f\x5c\x02\x37\x5c\x54\xf1\x3b\x4e\x83\xc5\xc6\xa2\x0b\x55\x32\x0e\x85\x2c\x4b\xb4\x81\xef\x9b\xd4\x05\x98\xb2\xaf\xfa\x14\x9c\x17\x15\x70\x07\x1c\x84\x45\x4e\xc6\x42\x2e\xcd\xca\xf2\xa6\xda\x30\x63\x81\xc3\xff\x0f\x37\xff\x81\xac\xf9\x0a\xa1\x94\x0a\x13\x76\x92\x32\xd6\xf8\x7c\xe7\xe8\x5d\x4b\xf6\x29\x28\x81\x57\xc6\x00\x00\xd2\x14\xae\xe0\x11\x9d\x51\x6b\xb4\xc1\xd3\xb5\x2c\xd0\x01\x17\x02\x9d\x03\x32\xc0\xc1\x21\x0d\xb5\xb4\x95\xb4\xab\x77\x24\x2e\xfa\x14\x6c\xe8\x5c\x82\x09\x26\xab\x04\xb8\x86\xfb\xdb\xe5\xf4\xc0\x32\x0a\x69\x4b\x4d\x68\x4b\x2e\xb0\xa3\x21\xd3\x69\x18\x48\x08\xf9\xc7\x4d\x81\x2a\x4e\x20\x09\x9c\x6f\x1a\x63\x69\x5f\x45\x28\xb6\xdf\xba\x67\xde\x15\xf7\x1a\x51\x1d\xb2\xf4\x1a\x56\x48\xd1\x8c\xc9\x34\x83\xcf\xcb\x4d\x83\xcf\x23\x88\xdd\xae\x0e\xb0\xc9\x97\xa8\x22\x83\x80\x9c\x66\x70\xa5\x37\xdb\xde\xf8\x27\xae\x7a\x3b\x62\xe8\xbf\x46\x29\x14\x24\x8d\x06\x19\xb2\x5b\x59\xe3\x9b\x60\x66\xec\x80\x96\xdb\x06\x1f\x0a\xfc\x0e\xf9\x06\x16\xd7\xbf\x53\xd2\x80\x7e\x5c\x5c\x6e\xac\x35\x2f\x41\x78\x07\x9f\xc8\x22\x83\x8f\x0b\x4d\xb3\xbf\xa6\x19\xfc\xf1\xda\x8d\xbf\x1d\x33\x66\x71\xbd\xb5\x65\x8b\x7f\x3e\x28\xf1\x5a\xba\x46\xf1\xcd\xb6\xaa\x9c\x3b\x29\xda\xa6\x8e\x01\x69\xa1\x7c\xe8\xa2\x10\x9c\xe6\x35\xc6\xb3\x53\xa0\x13\x56\x36\x41\x6d\xc7\x62\xca\xd0\x1c\x26\xff\x8a\x82\x12\xb8\x33\x8e\xda\x1f\x07\xae\x32\x5e\x15\x87\xfd\x12\xf6\x18\x19\xd4\x36\x5e\x27\x69\xdf\x09\x85\x14\x25\x64\xf0\x44\x56\xea\xd5\x68\x72\x20\xab\xc7\xf4\x20\xa9\x25\x4d\xfa\xbf\xf0\x0c\xb9\x4e\xf7\x66\x8e\x10\xed\x00\xd3\x81\xac\xf0\x38\x54\x65\x12\xb8\xe6\xe1\x35\x9e\x1a\x90\xcd\x0f\x8d\xdb\x26\xb1\x9f\xc7\xb2\xf2\x75\xae\xb9\x54\x60\x91\xbc\xd5\x21\x16\xea\xc7\xda\x6b\x21\xdc\x13\xbd\xdd\x07\xe7\xf7\x8e\xeb\x4d\x38\xa6\x83\x2b\xee\x88\xf7\xc3\xf3\xd9\xad\xe4\xe0\x22\x12\xd6\xd2\x79\xae\x76\x57\x1a\x8f\x8d\x69\xca\xd8\x06\xf7\xb7\xcb\xf7\x82\xdb\x69\x1f\x47\xe7\xad\x7c\x37\xb9\x5a\xd6\x18\x2e\xd1\x5f\x89\x6d\xc0\xb3\x9f\xda\x21\xc9\x4f\x22\xf3\x56\xce\xbd\x95\xe3\x89\x8e\x67\xde\x7d\x8c\xa2\x7a\x63\x3f\x02\x00\x00\xff\xff\xde\x2d\x87\xc2\xe6\x06\x00\x00"

func metadataviewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_metadataviewsCdc,
		"MetadataViews.cdc",
	)
}

func metadataviewsCdc() (*asset, error) {
	bytes, err := metadataviewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MetadataViews.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0xc4, 0x54, 0x17, 0x40, 0x6b, 0xf3, 0xb9, 0x53, 0xdd, 0x26, 0x5a, 0x29, 0x3a, 0xe9, 0xa9, 0xbd, 0xe4, 0x8b, 0x39, 0x33, 0x5c, 0x65, 0x6b, 0x5e, 0x29, 0xe8, 0x10, 0x94, 0x12, 0x84, 0x3}}
	return a, nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x8f\xdb\xba\x11\xbe\xeb\x57\xcc\xcb\x03\x9a\xdd\xc0\x6b\xf7\x50\xf4\x60\x20\x68\xda\xb7\x6f\x01\x5f\xb6\x0f\x5b\x17\x3d\x04\x01\x4c\x8b\x23\x9b\x08\x45\x2a\x24\x65\xc7\x0d\xf6\xbf\x17\x33\x24\x25\xca\xf6\x26\x9b\x5b\x73\x89\x57\x22\xbf\x99\xf9\xe6\x9b\x8f\xd4\xe2\xdd\xbb\xaa\xfa\xf5\x57\x58\xef\x11\x1e\xb4\x3d\xc2\xa3\x35\x77\x0f\xbd\xd9\xa9\xad\x46\x58\xdb\xcf\x68\xc0\x07\x61\xa4\x70\x92\x17\x6e\x1e\xad\xc9\xef\xf9\xf5\x06\x6a\x6b\x82\x13\x75\x00\x65\x02\xba\x46\xd4\x58\x55\x84\x37\xfc\x09\x61\x2f\x02\x08\xad\xc1\x58\x73\xd7\x64\xf4\xc0\xe8\x79\xb7\x87\xda\xf6\x5a\xd2\xdf\x8d\x75\x2d\x04\x3b\xaf\x56\x0d\x08\xe8\x3d\x3a\x38\x0a\x13\x3c\x04\x0b\x12\x3b\x6d\x4f\x20\xc0\xe0\x11\x4c\x13\x86\xfd\x33\x08\x7b\x54\x6e\xcc\xe6\xc8\x70\x06\x51\x56\xc1\x82\x6a\x3b\x8d\x2d\x9a\x40\xcb\xe0\xbc\x88\x31\xd7\x39\xe7\x7e\x89\xb3\x17\x07\xca\x18\x1a\xab\x89\x26\x2a\x86\x80\x5c\xaf\xd1\x83\x30\x12\x8c\x68\x95\xd9\x55\x5c\x6a\x98\x54\xef\x3b\xac\x55\xa3\xd0\xcf\x13\x83\x0f\xeb\x0d\x38\xf4\xb6\x77\x99\xaa\xda\x3a\x1c\x1e\x41\x38\x75\x89\x33\x87\x9d\x43\x8f\x54\xbb\x30\xf0\xf8\xb0\x06\x65\x18\xdd\xb7\xc2\x8d\xb5\x27\xe0\xdf\xac\xd6\x58\x07\x65\xcd\x06\x9e\x26\xf8\x23\x34\xa1\xfa\x60\x1d\x65\xcd\xd4\xbe\xf5\x8c\x5b\x0f\x7b\xe7\xd5\x8a\x5a\x59\xeb\x5e\xf2\xa2\x06\x8f\xd0\xf4\x86\xdf\x71\x0b\x04\x33\x40\x59\xd8\xa3\x41\x47\x8f\x50\x78\xa5\x4f\x55\x6b\x0f\xa9\xad\x9e\x12\x25\x5a\x6c\x1f\xc0\x36\xbc\xba\x0c\xc1\xf9\xfe\xe1\xec\x41\x49\x74\x1b\x5e\xb9\x79\xc2\x1a\xd5\x81\xfe\x1c\xd2\x1d\x48\xf4\x5c\x87\x2f\x9f\x80\xc4\x5a\x0b\x87\x45\x72\x47\x15\xf6\xe0\x6d\x8b\xd0\x39\x64\xd0\xce\x7a\xa6\x49\x2a\x5e\x51\x25\x56\xbf\xf4\xca\x21\x27\x35\x72\x56\x74\xb7\x46\x17\x84\x32\xa9\xa7\x0c\xb4\xc5\xbd\x38\x28\xeb\x86\x69\xf0\x51\x29\x27\xa0\x14\x3c\x76\xc2\x89\x80\xb0\xc5\x5a\xf4\x94\x66\x80\x9d\x3a\xa0\xe7\x18\xac\x60\xfa\x21\xb6\x4a\xab\x70\xa2\x48\x7e\x4f\xfb\x04\x38\x6c\xd0\xa1\xa9\x91\x44\x1a\x15\x5c\xa6\x44\xe9\x5a\xa3\x4f\x80\x5f\x3b\xeb\x13\x5e\xa3\x50\xcb\xa8\xba\xb1\x76\x65\xc0\x1a\x04\xeb\xa0\xb5\x0e\xab\xc4\xf9\x48\xd7\x1c\x56\x34\x83\xde\xa6\xc4\x28\x29\x7f\x9e\x55\x2b\x3e\x23\xd4\xbd\x0f\xb6\x1d\x9a\x90\x48\x9b\x0c\xd0\xb4\x11\x34\x96\x16\x0e\xc2\x29\xdb\x13\xa4\x32\xbb\xd4\x0b\x82\x8f\x7a\x98\x57\xd5\x3f\x4e\xd0\x7b\xe2\x73\x40\xe6\x12\x46\xa0\x59\x4a\xca\x36\x2c\xc9\xa9\xc6\x3d\xd4\xc2\x80\x47\x23\x2b\xda\xe5\xa2\x58\xb2\xda\x3a\x44\x77\x17\xec\x1d\xfd\x3f\xe3\xd8\x24\x3c\x6a\x99\xd9\x51\x7e\x1c\x84\xa7\x99\xd2\x12\x50\x23\xa1\x6a\xd0\x28\x77\xe8\xaa\x8b\x71\x5a\x5b\x0e\x95\xa7\x8e\x54\x6f\x6c\xd8\xa3\xe3\x14\x67\x83\x2d\xb1\x37\x78\xe2\xe6\xc4\xd0\xd2\x89\x38\x1a\x8f\x0f\xeb\xaa\x71\xb6\xbd\xe8\x29\xfb\x94\x81\x3a\x3b\x88\xc4\xce\x7a\x15\x86\x4e\x82\x35\x93\x58\x6f\x7d\x35\xd5\x68\x6d\xa9\x13\x21\xca\x37\x38\x61\x7c\x83\x6e\x5e\x55\xef\x16\x55\xb5\x58\xb0\x93\xb7\x24\xde\x38\xd5\xe7\xd6\x3c\x87\x7f\x32\x74\xf9\x96\x9a\xa5\x35\x6d\x56\x6d\x67\x5d\x88\x6d\x29\xfa\xad\x7c\xe1\xed\x8b\x45\xd5\xf5\xdb\x2b\xd0\x97\xae\xfa\xad\xaa\x00\x00\x52\x56\xc1\x06\xa1\xc1\xf4\xed\x16\x1d\x7b\x42\x6c\x1d\x2b\x55\xf9\xe8\x7a\xca\x00\x7e\x55\x3e\xf0\x44\xd0\x5e\x0a\x75\x10\x2e\x6e\xfe\x57\xdf\x75\xfa\xb4\x84\x7f\xaf\x4c\xf8\xeb\x5f\x06\xf0\xdf\x0f\x31\x4d\x11\x00\x5b\x15\x02\x4a\x38\x12\xc7\xa9\x0f\x45\xaa\x54\x87\x0a\x4a\x68\xf5\x5f\x94\x69\xfb\x10\x06\x19\xe6\xb7\xb4\x78\x35\x2e\xbc\xb9\xbd\x16\x4a\xf9\x69\x34\x91\x0e\x34\xe5\x07\x25\x98\x59\xde\xa7\x8c\x54\xb5\x08\xac\xc6\xc1\x38\x2f\x7c\x31\x01\x07\x38\x8a\x02\x04\x48\x47\xf3\x32\xdb\xc5\x02\x56\x17\x7b\x95\x07\x63\x43\xf4\x5d\x10\x75\x6d\x7b\x13\xde\x7a\x36\x7b\xb1\xc3\x19\x6c\x08\x66\xc3\xad\x86\x2d\xc2\xc6\x28\xbd\x99\x5f\xe7\xe0\x3f\x29\xf4\x8d\x92\x99\xec\x19\x67\xb1\x84\xbf\x4b\xe9\xd0\xfb\xbf\x5d\xa5\xe4\x25\x3e\x92\xc6\x51\xf2\x20\x4d\x0e\x82\xb3\xaa\x42\x66\x2a\x59\xdd\x6b\x88\x2a\xd1\x5f\x28\xe8\x3e\x2e\x99\xd4\x13\xec\xb5\x6a\x56\xd3\x4b\x4b\x92\x90\x1f\xce\xff\xf1\x7a\x72\x1e\xe9\xf2\xd0\x82\x15\xa9\xef\x1b\xaf\x28\xe6\xa0\x37\xea\x4b\x8f\xb0\xba\x4f\xa4\x89\x7a\xcf\x32\xdd\x0b\x3f\x2c\x25\x40\x8d\x01\xc6\x84\xf9\xd5\xf3\x90\xe7\x53\x3c\xc3\xda\x81\x7b\xf2\x93\x94\x1c\xa9\xec\x9a\x81\x52\x0d\x79\x3f\x5f\xa5\x1a\x65\xe2\x19\x94\x32\x27\x53\x42\x19\x1d\x8f\x30\x13\x1e\x3b\x3c\xd5\x72\x59\xeb\xe3\xc3\x7a\x79\x5e\xe6\x0f\x73\x2f\x38\xb6\xd0\xa2\x54\x74\x72\x66\xb9\x7b\xc8\xb6\x59\x98\xe6\x2b\xb8\xce\x97\x89\x29\xdf\x83\x27\x3b\xa4\xcb\xc9\x70\x8d\x1a\x62\x14\x9a\x22\xd7\x8b\x8b\x54\x80\x78\x1a\x47\x46\xdc\xa4\xb4\xa6\x37\x03\xec\x4d\xfe\xb1\xba\xcf\xb5\xde\x2e\xe1\xc3\x94\x0f\xde\x48\xf7\x90\xe9\x23\xfa\xe7\xd0\xf7\x3a\xcc\x95\x84\xf7\xef\xa1\xc4\x7a\x43\x42\x59\xdd\x67\xe5\x8f\x5e\x10\x67\xaa\xed\x7d\xa0\x21\xe6\xab\xa0\x68\x11\x44\x1c\x17\xba\xd9\xa0\xa7\x51\x58\xdd\xbf\x99\x44\x7b\xae\xa6\xbf\x7e\xd0\x8d\x34\x53\x3e\xf3\xf0\x53\xad\xc8\x17\xb9\xec\xff\x29\x50\x3e\xe9\x82\xf8\x3c\x36\x42\xf0\x2f\xe1\x76\x3d\x4b\x99\x7a\x20\xa4\x2c\x5b\x70\x16\xba\x08\x5f\x76\x24\x81\xdf\x30\x3f\xb1\x05\xb7\x2f\x17\xca\x03\x33\xb8\x64\x3a\xc6\x6b\xdb\xb6\x7c\xd7\xca\x1b\xba\x7e\xab\x95\xdf\x43\x63\xdd\xf0\x71\x31\xc9\xe5\x85\xfa\xc7\x8c\xff\x20\x84\xfa\x6c\x36\xbe\x9b\x6e\xb9\x68\x87\x61\x75\xef\x6f\x6e\x97\xf0\x31\x6a\xeb\xd3\xc5\x92\xad\x75\xce\x1e\x1f\x1f\xd6\x85\xb5\xdd\x2e\xe1\x4f\x79\x58\xaf\x1b\x46\x2a\x28\x0d\x80\xa9\x1d\x5d\x27\x26\x9f\x1f\x85\x4d\x6c\x31\xdf\xb4\x65\xfe\xfa\x18\xee\x06\xe4\x34\xd9\x5f\x5e\x14\xc6\x48\xc7\x72\x98\xd2\xd9\x20\x92\xd9\x35\xba\x4a\xd9\xdc\x2b\x7e\x27\x1c\xdf\x50\xf7\x56\xcb\xd1\x95\x53\x3e\x57\x24\x92\xef\x0d\x74\x80\x48\x5a\xbb\x84\x0f\xdf\x22\x3f\x4b\xda\xfb\x5c\xfd\x5f\xd8\xc4\xf7\x06\x24\xce\xc7\xe5\x40\x8c\xb9\x78\x90\x03\x39\x25\xd0\xb0\x29\x44\x17\x49\x1b\x95\x04\xe1\x9c\x38\xbd\x4e\x8d\x25\x60\x54\x22\x38\x0c\xbd\x33\x69\x62\x9d\x38\x65\x7b\xa2\x77\x71\xa6\x1c\xe6\x9e\xd4\xd7\x7b\xf2\x82\xae\xcb\x60\x4f\x39\x4a\x52\x37\xca\xf1\x2b\x29\xde\xc4\xcb\x2f\xe1\x2b\x71\x16\x0b\xf0\x76\x3c\xbf\x63\x73\xf8\xf3\xc1\xa1\x90\x20\x45\x10\x4c\x11\xdf\xc1\x5b\x0c\x7b\x2b\xd3\xa9\xa3\xc2\xcf\x4c\xd8\xb9\xc7\x3b\xbc\x62\xf1\x1e\x75\x33\x1f\x54\xf8\x51\xc9\x4f\xf0\xcb\x7b\x30\x4a\x2f\xe1\x0d\x61\x48\x8b\xf1\xe2\xc6\xf7\xde\xcb\xaa\x7e\x79\xad\x8f\xd7\x0e\x45\xc0\xdf\xdb\x2e\x9c\x8a\x0f\x86\xf8\x94\x5b\x86\xf4\xea\xd2\xc9\x21\x7e\x4e\x45\xce\xcf\x25\x5d\x12\x79\x62\x0a\xed\x91\xe9\xf7\x55\x49\xd2\xd5\xd8\xd4\xe0\x0f\x45\x2a\x85\x0b\x5e\x9e\x86\xe9\x24\xcc\xd2\x98\x6b\x34\xbb\xb0\xa7\x63\xf1\xcf\xe9\x34\x8c\x31\x64\x39\x8a\xf9\x18\xe4\xca\x0a\xa2\x32\x35\xcf\xd5\xff\x02\x00\x00\xff\xff\x33\x4d\x81\x27\xe0\x12\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x61, 0xca, 0x9d, 0xaa, 0x66, 0x36, 0xdf, 0xbc, 0x51, 0xdb, 0x7b, 0x51, 0xd8, 0x3d, 0x6f, 0x4e, 0x9c, 0x8e, 0x50, 0x28, 0x7c, 0x18, 0x1d, 0x2, 0xb2, 0xc2, 0x2b, 0x26, 0xa1, 0xfe, 0x2d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleNFT.cdc":       examplenftCdc,
	"MetadataViews.cdc":    metadataviewsCdc,
	"NonFungibleToken.cdc": nonfungibletokenCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleNFT.cdc": {examplenftCdc, map[string]*bintree{}},
	"MetadataViews.cdc": {metadataviewsCdc, map[string]*bintree{}},
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
