// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleNFT.cdc (7.217kB)
// ../../../contracts/MetadataViews.cdc (939B)
// ../../../contracts/NonFungibleToken.cdc (4.832kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplenftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x19\x5d\x6f\xdb\xba\xf5\xdd\xbf\xe2\xdc\x3c\x74\x36\x96\x58\x1b\x30\xec\xc1\x88\x6f\x5a\x34\x35\x90\x87\x1b\x14\xad\xb7\x3d\x14\xc5\x2e\x2d\x1e\xc7\x44\x24\x52\x20\x29\x7b\xba\xb9\xfe\xef\xc3\x21\xf5\x41\x49\x54\xdc\xbb\x02\xab\x51\xb8\x96\x78\xbe\xbf\x79\x92\x24\xb0\x3d\x08\x03\xc2\x00\x93\x80\xff\x61\x79\x91\x21\x08\xfa\xce\x51\x5a\x66\x85\x92\xa0\xf6\xc0\x60\x93\xa9\x13\x3c\x2a\x79\xb3\x29\xe5\x93\xd8\x65\x08\x5b\xf5\x8c\x72\x96\x24\xf0\x60\x09\x5f\x2a\x0b\x05\xd3\x96\xc0\xed\x01\x41\xed\xf7\x22\x15\x2c\x03\x63\x99\xe4\x4c\x73\xd8\x95\x16\x84\x05\x66\x4c\x99\x23\x07\xab\x60\x87\x84\x7f\x44\x5d\x81\x11\xb9\xc8\x98\xa6\xb7\x07\x75\x82\x9c\xc9\x0a\x1e\x37\x5b\x03\x27\x55\x66\xbc\x13\xc9\xd1\x4e\x95\x46\xd8\x97\x32\x25\xf9\x58\x26\x6c\xb5\x9c\xcd\x44\x5e\x28\x6d\x49\xc6\x46\x44\x27\x21\xec\xb5\xca\xe1\x6a\x99\x0c\x0f\x96\x29\x4f\xaf\x1a\xac\x5f\xd0\x32\xce\x2c\xfb\xa7\xc0\x93\x69\x51\x7a\x6f\x3d\xfc\xac\x28\x77\x90\x2a\x69\x35\x4b\x2d\x7c\xf0\x16\x7b\xdc\x6c\x57\x63\xc6\x2f\xb3\x19\x00\x00\x21\x1c\x9d\x66\x96\x65\x9f\xcb\xa2\xc8\xaa\x15\xfc\xe3\x41\xda\xbf\xff\xad\x03\xc0\x23\xe9\xf6\xbe\xa6\xfb\x20\x85\x15\x2c\x13\xbf\x21\x9f\x2f\x06\x30\xff\x12\xf6\xc0\x35\x3b\xcd\x05\x6f\xc8\x5c\x3b\x81\x57\xf0\x8e\x73\x8d\xc6\xdc\x0d\x51\xee\xb1\x50\x46\xd8\x1e\x86\x55\x21\x7c\x8b\x90\x21\x49\x91\x65\xe8\x4c\xfb\xd9\x2a\xcd\x9e\xf0\x23\xb3\x87\x15\x04\x0f\x13\xe0\x1f\xcb\x5d\x26\x52\x0f\xdd\xfd\xee\x01\xff\x22\xa4\x45\x3d\x49\xd7\xc1\x7e\x7b\x50\xe6\xb5\x7f\xe0\x28\xf0\xb4\x6c\x90\x3f\x90\xd2\x25\xcb\xb2\xea\x1a\x8c\xd5\x65\x6a\x4b\x8d\x06\x32\xf1\x8c\x60\x89\xf0\x49\x64\x19\xec\x10\x38\xee\x85\x44\x0e\x42\x02\x83\x54\xe5\xb9\x92\x0d\x8d\xd6\xc3\x4c\x72\x30\x07\xa6\x91\xc3\xce\x45\xe4\x40\x10\xd3\xb0\x6d\xd5\xf4\x2c\xdb\x88\xba\x17\xa6\xc8\x58\x55\x47\x4a\x13\x14\xa1\x4d\x24\xcb\x91\xcc\xa0\x85\x7c\x1a\x1d\x72\x34\xa9\x16\x05\xb1\x9a\x84\xb1\x87\x32\xdf\x49\x26\xb2\x16\xa2\x05\x11\x52\xd8\x79\xfb\x44\x9f\x90\xdb\x75\xef\x24\xc2\xaa\x0f\x30\xe2\xd3\x1d\x2f\xe0\xa5\x07\x6a\x30\xdb\x2f\x89\x15\xac\x1d\xc7\xf1\x61\xc0\x0d\xd6\x21\xef\x31\x68\xcb\x17\xd6\x9d\x0c\x2d\xd8\x79\xe6\xbf\x5b\x07\x68\x34\xaa\xd4\x29\x42\x34\x2d\x97\x0f\x8f\x9b\xed\x75\x3f\xe1\x97\x9f\xd0\xa8\xec\x88\x3a\xd0\xa2\x31\x6e\x97\x34\x3f\xda\x73\x41\xfa\xfe\x28\x8f\x0a\x0e\x6b\x10\xfc\xc7\xba\xba\x67\xc5\x7d\x29\xe1\x09\xad\x73\xe3\x7c\xb1\x82\x2f\xdb\xaa\xc0\xaf\x03\xd9\x35\xda\x52\x4b\xf8\xd2\x7b\x49\x1f\x02\xbe\x8d\x67\xea\xcf\x75\xe5\x6d\x3e\x5f\x03\x29\x46\x12\x68\x1f\x3f\x24\xc5\xfc\xdf\xae\x1a\xad\x1c\xed\xc5\x0a\xde\xc9\xea\xb3\xab\x08\x77\x43\x83\x9e\x84\x4d\x0f\x0e\x78\x70\x42\x9f\x94\x19\xbc\x20\xde\x6a\x84\x14\xe8\x1a\xc7\x9a\x47\x51\xa0\x0d\xa2\xd6\x97\xd7\x93\x80\xbd\x98\x1a\xba\x77\x1a\x2d\x88\xb4\xbe\xa3\xe3\x28\x7d\xdb\x07\x16\x0f\x54\x94\xdf\x54\x04\x5c\xc3\xd9\xb3\x14\x83\x66\x3d\x6c\x59\x83\xb4\x27\x8f\xf2\xba\x67\x5a\xaa\x19\x2b\x78\x3b\x2a\x23\x8f\x9b\xed\x22\x16\x89\x0f\xf7\x3e\x0e\x7d\xa6\x7e\x1d\x81\xec\x94\xd6\xea\xf4\xb8\xd9\x06\xed\x78\xb1\x82\x37\x31\x06\x13\xc8\x9d\x22\x03\x1a\xdd\x01\x61\x0f\x03\xae\x50\xc6\x46\x22\x6d\xae\xd1\x94\x99\x85\xf5\x9a\x2c\xba\x80\xdf\x7f\x6f\x5e\xdd\xb9\x7c\xa7\x84\x9f\x88\xb5\xab\xf7\x4c\xd2\xdc\xe7\xc5\x0a\x0c\x0c\x1a\xf7\xa8\x51\xa6\xb8\x72\x03\xdb\xc3\x7d\x33\x16\x7a\xdf\x21\xef\x20\xa8\xcf\x0b\x99\x2a\xad\x31\xb5\x57\x03\xbf\x5f\xf6\x6f\xe7\xcb\xd5\x2b\x1e\xbe\x1e\xf7\x81\x8f\x5a\x1d\x05\x47\x1d\x39\xfa\x84\x29\x8a\x63\xf4\x68\x4c\x38\xde\x49\x3a\xb8\xc0\xe4\x49\x02\x5c\xf8\xa1\x55\x57\x64\x11\x32\x55\xaa\xe4\x5e\xe9\x5c\xc8\x27\x70\xc1\x66\x42\x70\x37\x70\x18\x60\x9d\xbe\xb6\x2a\x10\x4e\xc2\x1e\x68\x38\xfa\xd5\xfb\xfe\x57\x32\xf0\x5e\x60\xc6\x7b\x11\x43\x53\xa7\x3a\x49\xe4\x34\x48\xaf\xe0\xed\x8b\x87\x8e\xf4\xc4\xc7\xcd\xf6\xdc\x6f\x3d\x30\x8f\x36\x80\x96\x1c\xdc\xde\xc0\xcb\x39\x56\x13\x93\xc4\x89\x47\x33\x2a\x68\xcc\xd5\x11\xdd\x1c\x47\x9a\xb8\xb9\xda\x0f\xf0\xad\x75\x68\xc0\xf2\x40\xc2\xd2\xf4\xef\x8e\x59\x96\xa1\x1e\x45\x7f\x43\x76\xde\xfc\x78\xb8\x0f\xa2\x3f\x9a\xa2\x03\x1d\x5c\xcf\x75\xc3\xf9\xed\xcd\x40\xa1\xa5\x97\x75\xfe\x8c\xd5\x0a\x3a\x06\x0b\xb8\xbb\x83\x82\x49\x91\xce\xaf\x72\x61\x0c\xb9\xe9\x71\xb3\xbd\x5a\xf4\x4b\x12\xe6\x62\x30\x9a\x3b\x36\x4b\xc1\x9b\xe1\xbc\xe5\xa6\xef\x96\xcc\x0f\xde\x8b\x68\x59\xbb\xbd\x71\xa8\x13\xa6\xad\xeb\x12\x58\xf6\x4c\x76\x75\x66\x25\x13\x32\xce\x7b\x16\x6c\x0d\x6c\x82\x90\x0b\x09\xb5\x48\x75\x7e\xd6\x88\x82\x03\xd3\x9a\x55\xff\x5b\x41\x7c\xcd\xdc\xfe\x07\x33\x3f\xc1\xdb\x7e\x9d\x9a\x8d\x70\xba\xaa\x46\x63\x40\x6d\xc8\x3e\x18\x69\xc0\xb9\x13\x59\xe2\xa9\x26\x5e\xeb\x10\xe4\xd8\xe9\x20\xd2\x43\x1b\x86\xee\x5e\x9a\x71\x50\x12\x47\x3c\x55\xc6\xb7\xf1\xc8\xf8\x22\xf8\xd7\x56\x81\x88\xdb\xc3\xeb\x15\xf9\x9b\xae\x56\x97\xbd\xcd\xd1\x58\xad\xaa\x96\xef\x84\xbf\x7d\x47\xa9\x63\xc3\x25\x92\x73\x4f\x53\x4e\xe9\xcc\x1e\x98\x05\xa6\xa9\xd5\x0d\x7c\xff\x0d\xfd\x29\x3e\x29\x0d\x52\xe3\x19\x2b\x33\x21\x5f\xdb\xce\x88\xb6\x2f\x54\x4d\x5d\xb7\xaa\xc9\xfb\x69\xc1\x92\x04\x8c\xf2\x1a\x74\x89\x0f\x29\xa3\x91\x8a\x71\x10\xd6\x74\x97\x3c\x8a\x58\x02\x68\xde\x1e\x14\x37\xdf\xd5\x5e\xe3\xba\xbf\x89\x78\x9f\x99\x0b\x0d\xfa\x3c\x1b\x8f\xa5\xdf\xd5\xac\xc5\x3e\x16\x85\x3f\xb9\x1e\x1d\x69\xe2\x49\x02\xef\x35\x32\x8b\x2e\x42\x4a\x7b\x50\x5a\xfc\xd6\xeb\xb2\xe4\x8d\x2c\x53\x27\xe0\xea\x24\x53\x66\x6c\x78\x1f\x09\x13\x41\xe3\x1e\xd6\x53\x56\x20\xd2\x17\x4c\x31\x30\x27\x91\xa3\xa4\x1f\xe8\xfb\x87\xe7\xbb\x09\xf3\x52\xd7\x6d\x7a\xee\xc0\xc0\xef\x64\xf5\xa9\xee\x9a\x2f\xf1\x26\x7d\x8e\xd4\x2b\xb9\xb7\xdf\xad\x3e\xd1\xc1\x6e\x18\x5a\x3b\xa2\x97\x8c\x50\x6b\x1d\xe0\x51\xd4\x7d\x83\x12\x31\x23\xd5\xd5\x65\xd4\xc4\x9b\xaa\xd3\x57\x2f\x3e\x66\x25\x09\xd9\x9a\xc6\xe3\x66\xd5\x56\x97\x1a\x59\x29\x89\x2e\x49\x5d\x3a\x5a\x05\x69\x1d\x7b\xae\x16\x63\x5e\xd8\x6a\x98\xec\x8d\xd7\x3c\xe4\x07\x02\xe9\x46\xa4\x79\xb4\x7d\x47\x47\xa8\xb6\x49\x36\x3c\x43\x2a\x03\xe9\x3f\xb5\x33\x93\x17\x1b\x18\xcf\x85\x04\xa5\xc1\x28\xaa\x1f\xd4\xcb\x9b\xbd\xa3\x5f\x33\xaa\x93\xac\xf7\x92\x35\x09\xb6\xcb\x5c\xea\xe4\x42\x5a\xa7\x5c\x6b\xae\x60\xe3\x13\x2e\x1c\xfc\x82\x2b\x5c\xf3\x24\x89\xc3\x26\x87\xd2\xff\xa6\xb6\x12\x3d\xfb\x31\xce\x3d\x3e\xdc\x0f\x9b\x73\xd3\xe9\xe9\x9f\xac\x67\xe7\x54\x14\x02\x89\x46\x30\x40\x95\x6e\x26\xb1\x07\x14\x3a\x7c\xdd\x66\xfe\x28\x71\x6a\x69\xe6\x83\xe8\xab\x69\xaf\xe0\xcd\xcb\xc5\xa9\xf7\xfc\xff\xda\x40\x0c\x7b\x7e\x2f\xd0\x86\x19\x44\xf3\xae\x44\xd7\x8c\xba\xf8\x18\x69\x0a\xf5\x2a\x25\x48\xc5\x60\x35\x3b\xbe\x8e\x7a\xe5\xe2\x97\xe2\x9e\x7a\xaf\xde\x83\x03\x3d\x27\xae\xbe\x8b\x91\xb2\xaf\x44\xc0\x9f\x0c\xb0\x34\x55\xa5\xb4\x3d\xff\x8f\x9d\x0e\xa1\x6f\x97\x83\x21\xee\xf6\xc6\x9b\x6b\xc0\x3a\x6e\x19\x58\x4f\x1d\xfc\xb9\x2e\xba\xf3\xbf\x2e\xe2\x95\xc4\xed\xb2\x16\xfd\x8b\x50\xb7\xe3\x76\x9a\x39\x7a\x60\x1c\xc1\x16\xcc\x6f\x0a\x7a\x22\xfc\xa5\x97\x58\x9f\xd1\xcf\x0d\xe4\x1d\x0e\x05\xb3\x07\xd3\x47\x8e\xee\xb2\x61\x0d\x89\xf1\x8f\x09\x46\xae\x8c\x53\x24\xba\x9d\x36\x51\xf0\xb5\xf1\x1b\x08\x8c\x76\xde\x71\xfe\x1e\xac\xa7\x5e\xd3\xd2\x83\x22\xd7\x15\x1b\xb7\x99\x66\x47\xac\xa7\xfe\x9a\x60\x8b\x4e\x3d\x28\x28\x07\xaf\x14\xcc\x56\xd0\x3a\xa2\x96\x44\x75\x7e\x7b\xd3\x61\x07\x33\x6d\xd4\xa0\x8b\x9e\xd4\x6d\x8e\xd6\xdd\x23\x65\x05\xdb\x89\x4c\xd8\x0a\xf6\x4a\x4f\x4d\x82\x3d\x09\x32\x21\x9f\x6f\xc3\x66\xd9\xb1\xbd\x5c\x9c\xae\xc3\x38\x9d\x5e\x09\x9c\x7f\x9e\x8f\xef\xb7\x31\x67\x0f\x0a\x16\xd3\x4f\x68\x5f\xb3\xc6\x2c\x92\xd1\xa1\x33\xeb\x16\xf1\x47\x1c\x99\x7b\x94\x5e\x55\xf3\x64\x2e\xf8\xd0\x23\x06\xfe\x1b\x05\x63\x20\xa4\xbb\xcd\x4c\xff\x0d\xea\x3c\x3b\xcf\xfe\x1b\x00\x00\xff\xff\xc2\x04\x52\x53\x31\x1c\x00\x00"

func examplenftCdcBytes() ([]byte, error) {
	return bindataRead(
		_examplenftCdc,
		"ExampleNFT.cdc",
	)
}

func examplenftCdc() (*asset, error) {
	bytes, err := examplenftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleNFT.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2c, 0xe3, 0x34, 0xb0, 0x82, 0xbd, 0x6e, 0x15, 0xf5, 0xe3, 0x52, 0x2c, 0x1f, 0xb0, 0x78, 0x94, 0x6b, 0xd1, 0xc1, 0x43, 0x22, 0x15, 0x7e, 0xc2, 0x77, 0x35, 0x12, 0xd1, 0x33, 0x13, 0x29, 0xee}}
	return a, nil
}

var _metadataviewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x6f\xd4\x30\x10\x85\xef\xfe\x15\xef\x84\x76\xab\x36\x69\x0b\x5a\x89\x5c\x50\x45\x5b\xb4\x08\x50\x55\x0a\x17\x54\x21\xc7\x9e\x6c\x2c\x12\xdb\x1a\x4f\x5a\x56\x55\xff\x3b\x72\x76\xb3\x5b\x68\x2f\x5c\xa2\x28\x79\x7e\xf3\xde\x37\x2e\x0f\x0e\x94\xba\x69\x5d\x82\x09\x5e\x58\x1b\x81\xeb\x63\x47\x3d\x79\x49\x90\x96\xd0\x93\x68\xab\x45\x23\x89\xf6\x56\xb3\x45\xe4\x10\x43\x22\xab\x9c\xc7\xe5\xa7\xe5\xd5\xd1\xf1\xe2\xf5\xa2\x50\xea\x9a\x9a\x0a\xad\x48\x4c\x55\x59\xae\x9c\xb4\x43\x5d\x98\xd0\x97\xc1\x37\x5d\xb8\x2f\xc7\x47\xdd\x85\xba\xec\x75\x12\xe2\xb2\xe9\x5c\x4c\xe5\xe9\xf1\xe9\xc9\xf1\xdb\x93\xc5\x91\x6f\xe4\x68\x1a\x56\xf4\x56\xa9\xaf\xc2\x83\x91\x04\xed\x2d\x98\x52\x18\xd8\x50\x82\xd1\x7e\x1f\x11\xc1\x13\x02\xa3\x0f\x4c\x6a\x97\x54\xd6\x91\xd2\x21\x8c\xee\x3a\xb2\xb8\x73\x74\x9f\x0a\x5c\x68\xd3\x8e\xef\xe3\x6f\x30\x45\xa6\x94\x5b\x2a\x0d\xeb\x9a\x86\x38\xfb\xfd\x72\xde\x22\x34\xbb\xd6\x87\x48\x83\x69\xa1\x13\x34\x0c\x93\x96\xc0\xa8\x5d\x58\xb1\x8e\xed\x5a\x05\x86\xc6\xc7\xab\x8b\x0f\x70\xbd\x5e\x11\x1a\xd7\x51\xa1\x0e\x4a\xa5\xe2\x50\xef\x89\x7e\xde\x9a\x7d\xcf\x49\xf0\xa0\x14\x00\x94\x25\xce\x70\x4d\x29\x74\x77\xc4\x99\xe9\x9d\xb3\x94\xa0\x8d\xa1\x94\x20\x01\x1a\x89\xe4\x69\x96\x6d\x93\xed\xe9\xbd\x49\x1a\x39\x65\x0c\x13\x25\xcc\xa8\x58\x15\xd0\x1e\x5f\x2e\x6f\xe6\xff\x20\x93\xbc\x6d\xe7\x85\xb8\xd1\x86\x26\x1b\x09\x53\x86\x27\x11\xf2\xfe\xc7\xa1\x90\x56\x0b\x9c\x20\x0d\x31\x06\x96\xbf\x53\xe4\xb2\xbb\xd1\x3b\xe7\x7d\xb9\x87\x51\x35\x29\x9b\xc1\x63\x45\x32\xc2\x98\xcd\x2b\xfc\xb8\x59\x47\xba\x7d\x26\xe1\xcd\xe9\x2c\x9b\xfd\x1c\x53\x54\xc8\xca\x79\x85\x33\xbf\xde\xdc\x8d\x77\xe3\xa9\xc7\x17\x80\xbe\x0f\x5d\x47\x46\x5c\xf0\x70\x79\x77\x2b\x0e\x43\xcc\x30\xc7\x1b\xb0\xf5\xe6\xcc\xc1\xd2\x6f\xd4\x6b\x2c\xcf\xff\xa7\xd2\x13\xfb\xe7\xe5\xea\xc0\x1c\xee\x73\xf0\x49\x3e\x73\xb6\xc2\xb7\xa5\x97\xc5\x9b\x79\x85\x57\x0f\xd3\xf7\xc7\x97\xc0\x2c\xcf\x37\x58\x36\xfa\xdb\x6d\xc5\x47\xf5\x27\x00\x00\xff\xff\x6b\xbc\xec\xe6\xab\x03\x00\x00"

func metadataviewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_metadataviewsCdc,
		"MetadataViews.cdc",
	)
}

func metadataviewsCdc() (*asset, error) {
	bytes, err := metadataviewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MetadataViews.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0xdf, 0xa9, 0xa6, 0x82, 0xc8, 0xd0, 0x1d, 0x68, 0xb8, 0x85, 0xea, 0xa2, 0x89, 0x70, 0x2e, 0x78, 0xae, 0x7e, 0x12, 0x63, 0x2e, 0x74, 0x94, 0x8f, 0x72, 0x83, 0x6a, 0xc1, 0x10, 0x70, 0xfb}}
	return a, nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x8f\xdb\xba\x11\xbe\xeb\x57\xcc\xcb\x03\x9a\xdd\xc0\x6b\xf7\x50\xf4\x60\x20\x68\xda\xb7\x6f\x01\x5f\xb6\x0f\x5b\x17\x3d\x04\x01\x4c\x8b\x23\x9b\x08\x45\x2a\x24\x65\xc7\x0d\xf6\xbf\x17\x33\x24\x25\xca\xf6\x26\x9b\x5b\x73\x89\x57\x22\xbf\x99\xf9\xe6\x9b\x8f\xd4\xe2\xdd\xbb\xaa\xfa\xf5\x57\x58\xef\x11\x1e\xb4\x3d\xc2\xa3\x35\x77\x0f\xbd\xd9\xa9\xad\x46\x58\xdb\xcf\x68\xc0\x07\x61\xa4\x70\x92\x17\x6e\x1e\xad\xc9\xef\xf9\xf5\x06\x6a\x6b\x82\x13\x75\x00\x65\x02\xba\x46\xd4\x58\x55\x84\x37\xfc\x09\x61\x2f\x02\x08\xad\xc1\x58\x73\xd7\x64\xf4\xc0\xe8\x79\xb7\x87\xda\xf6\x5a\xd2\xdf\x8d\x75\x2d\x04\x3b\xaf\x56\x0d\x08\xe8\x3d\x3a\x38\x0a\x13\x3c\x04\x0b\x12\x3b\x6d\x4f\x20\xc0\xe0\x11\x4c\x13\x86\xfd\x33\x08\x7b\x54\x6e\xcc\xe6\xc8\x70\x06\x51\x56\xc1\x82\x6a\x3b\x8d\x2d\x9a\x40\xcb\xe0\xbc\x88\x31\xd7\x39\xe7\x7e\x89\xb3\x17\x07\xca\x18\x1a\xab\x89\x26\x2a\x86\x80\x5c\xaf\xd1\x83\x30\x12\x8c\x68\x95\xd9\x55\x5c\x6a\x98\x54\xef\x3b\xac\x55\xa3\xd0\xcf\x13\x83\x0f\xeb\x0d\x38\xf4\xb6\x77\x99\xaa\xda\x3a\x1c\x1e\x41\x38\x75\x89\x33\x87\x9d\x43\x8f\x54\xbb\x30\xf0\xf8\xb0\x06\x65\x18\xdd\xb7\xc2\x8d\xb5\x27\xe0\xdf\xac\xd6\x58\x07\x65\xcd\x06\x9e\x26\xf8\x23\x34\xa1\xfa\x60\x1d\x65\xcd\xd4\xbe\xf5\x8c\x5b\x0f\x7b\xe7\xd5\x8a\x5a\x59\xeb\x5e\xf2\xa2\x06\x8f\xd0\xf4\x86\xdf\x71\x0b\x04\x33\x40\x59\xd8\xa3\x41\x47\x8f\x50\x78\xa5\x4f\x55\x6b\x0f\xa9\xad\x9e\x12\x25\x5a\x6c\x1f\xc0\x36\xbc\xba\x0c\xc1\xf9\xfe\xe1\xec\x41\x49\x74\x1b\x5e\xb9\x79\xc2\x1a\xd5\x81\xfe\x1c\xd2\x1d\x48\xf4\x5c\x87\x2f\x9f\x80\xc4\x5a\x0b\x87\x45\x72\x47\x15\xf6\xe0\x6d\x8b\xd0\x39\x64\xd0\xce\x7a\xa6\x49\x2a\x5e\x51\x25\x56\xbf\xf4\xca\x21\x27\x35\x72\x56\x74\xb7\x46\x17\x84\x32\xa9\xa7\x0c\xb4\xc5\xbd\x38\x28\xeb\x86\x69\xf0\x51\x29\x27\xa0\x14\x3c\x76\xc2\x89\x80\xb0\xc5\x5a\xf4\x94\x66\x80\x9d\x3a\xa0\xe7\x18\xac\x60\xfa\x21\xb6\x4a\xab\x70\xa2\x48\x7e\x4f\xfb\x04\x38\x6c\xd0\xa1\xa9\x91\x44\x1a\x15\x5c\xa6\x44\xe9\x5a\xa3\x4f\x80\x5f\x3b\xeb\x13\x5e\xa3\x50\xcb\xa8\xba\xb1\x76\x65\xc0\x1a\x04\xeb\xa0\xb5\x0e\xab\xc4\xf9\x48\xd7\x1c\x56\x34\x83\xde\xa6\xc4\x28\x29\x7f\x9e\x55\x2b\x3e\x23\xd4\xbd\x0f\xb6\x1d\x9a\x90\x48\x9b\x0c\xd0\xb4\x11\x34\x96\x16\x0e\xc2\x29\xdb\x13\xa4\x32\xbb\xd4\x0b\x82\x8f\x7a\x98\x57\xd5\x3f\x4e\xd0\x7b\xe2\x73\x40\xe6\x12\x46\xa0\x59\x4a\xca\x36\x2c\xc9\xa9\xc6\x3d\xd4\xc2\x80\x47\x23\x2b\xda\xe5\xa2\x58\xb2\xda\x3a\x44\x77\x17\xec\x1d\xfd\x3f\xe3\xd8\x24\x3c\x6a\x99\xd9\x51\x7e\x1c\x84\xa7\x99\xd2\x12\x50\x23\xa1\x6a\xd0\x28\x77\xe8\xaa\x8b\x71\x5a\x5b\x0e\x95\xa7\x8e\x54\x6f\x6c\xd8\xa3\xe3\x14\x67\x83\x2d\xb1\x37\x78\xe2\xe6\xc4\xd0\xd2\x89\x38\x1a\x8f\x0f\xeb\xaa\x71\xb6\xbd\xe8\x29\xfb\x94\x81\x3a\x3b\x88\xc4\xce\x7a\x15\x86\x4e\x82\x35\x93\x58\x6f\x7d\x35\xd5\x68\x6d\xa9\x13\x21\xca\x37\x38\x61\x7c\x83\x6e\x5e\x55\xef\x16\x55\xb5\x58\xb0\x93\xb7\x24\xde\x38\xd5\xe7\xd6\x3c\x87\x7f\x32\x74\xf9\x96\x9a\xa5\x35\x6d\x56\x6d\x67\x5d\x88\x6d\x29\xfa\xad\x7c\xe1\xed\x8b\x45\xd5\xf5\xdb\x2b\xd0\x97\xae\xfa\xad\xaa\x00\x00\x52\x56\xc1\x06\xa1\xc1\xf4\xed\x16\x1d\x7b\x42\x6c\x1d\x2b\x55\xf9\xe8\x7a\xca\x00\x7e\x55\x3e\xf0\x44\xd0\x5e\x0a\x75\x10\x2e\x6e\xfe\x57\xdf\x75\xfa\xb4\x84\x7f\xaf\x4c\xf8\xeb\x5f\x06\xf0\xdf\x0f\x31\x4d\x11\x00\x5b\x15\x02\x4a\x38\x12\xc7\xa9\x0f\x45\xaa\x54\x87\x0a\x4a\x68\xf5\x5f\x94\x69\xfb\x10\x06\x19\xe6\xb7\xb4\x78\x35\x2e\xbc\xb9\xbd\x16\x4a\xf9\x69\x34\x91\x0e\x34\xe5\x07\x25\x98\x59\xde\xa7\x8c\x54\xb5\x08\xac\xc6\xc1\x38\x2f\x7c\x31\x01\x07\x38\x8a\x02\x04\x48\x47\xf3\x32\xdb\xc5\x02\x56\x17\x7b\x95\x07\x63\x43\xf4\x5d\x10\x75\x6d\x7b\x13\xde\x7a\x36\x7b\xb1\xc3\x19\x6c\x08\x66\xc3\xad\x86\x2d\xc2\xc6\x28\xbd\x99\x5f\xe7\xe0\x3f\x29\xf4\x8d\x92\x99\xec\x19\x67\xb1\x84\xbf\x4b\xe9\xd0\xfb\xbf\x5d\xa5\xe4\x25\x3e\x92\xc6\x51\xf2\x20\x4d\x0e\x82\xb3\xaa\x42\x66\x2a\x59\xdd\x6b\x88\x2a\xd1\x5f\x28\xe8\x3e\x2e\x99\xd4\x13\xec\xb5\x6a\x56\xd3\x4b\x4b\x92\x90\x1f\xce\xff\xf1\x7a\x72\x1e\xe9\xf2\xd0\x82\x15\xa9\xef\x1b\xaf\x28\xe6\xa0\x37\xea\x4b\x8f\xb0\xba\x4f\xa4\x89\x7a\xcf\x32\xdd\x0b\x3f\x2c\x25\x40\x8d\x01\xc6\x84\xf9\xd5\xf3\x90\xe7\x53\x3c\xc3\xda\x81\x7b\xf2\x93\x94\x1c\xa9\xec\x9a\x81\x52\x0d\x79\x3f\x5f\xa5\x1a\x65\xe2\x19\x94\x32\x27\x53\x42\x19\x1d\x8f\x30\x13\x1e\x3b\x3c\xd5\x72\x59\xeb\xe3\xc3\x7a\x79\x5e\xe6\x0f\x73\x2f\x38\xb6\xd0\xa2\x54\x74\x72\x66\xb9\x7b\xc8\xb6\x59\x98\xe6\x2b\xb8\xce\x97\x89\x29\xdf\x83\x27\x3b\xa4\xcb\xc9\x70\x8d\x1a\x62\x14\x9a\x22\xd7\x8b\x8b\x54\x80\x78\x1a\x47\x46\xdc\xa4\xb4\xa6\x37\x03\xec\x4d\xfe\xb1\xba\xcf\xb5\xde\x2e\xe1\xc3\x94\x0f\xde\x48\xf7\x90\xe9\x23\xfa\xe7\xd0\xf7\x3a\xcc\x95\x84\xf7\xef\xa1\xc4\x7a\x43\x42\x59\xdd\x67\xe5\x8f\x5e\x10\x67\xaa\xed\x7d\xa0\x21\xe6\xab\xa0\x68\x11\x44\x1c\x17\xba\xd9\xa0\xa7\x51\x58\xdd\xbf\x99\x44\x7b\xae\xa6\xbf\x7e\xd0\x8d\x34\x53\x3e\xf3\xf0\x53\xad\xc8\x17\xb9\xec\xff\x29\x50\x3e\xe9\x82\xf8\x3c\x36\x42\xf0\x2f\xe1\x76\x3d\x4b\x99\x7a\x20\xa4\x2c\x5b\x70\x16\xba\x08\x5f\x76\x24\x81\xdf\x30\x3f\xb1\x05\xb7\x2f\x17\xca\x03\x33\xb8\x64\x3a\xc6\x6b\xdb\xb6\x7c\xd7\xca\x1b\xba\x7e\xab\x95\xdf\x43\x63\xdd\xf0\x71\x31\xc9\xe5\x85\xfa\xc7\x8c\xff\x20\x84\xfa\x6c\x36\xbe\x9b\x6e\xb9\x68\x87\x61\x75\xef\x6f\x6e\x97\xf0\x31\x6a\xeb\xd3\xc5\x92\xad\x75\xce\x1e\x1f\x1f\xd6\x85\xb5\xdd\x2e\xe1\x4f\x79\x58\xaf\x1b\x46\x2a\x28\x0d\x80\xa9\x1d\x5d\x27\x26\x9f\x1f\x85\x4d\x6c\x31\xdf\xb4\x65\xfe\xfa\x18\xee\x06\xe4\x34\xd9\x5f\x5e\x14\xc6\x48\xc7\x72\x98\xd2\xd9\x20\x92\xd9\x35\xba\x4a\xd9\xdc\x2b\x7e\x27\x1c\xdf\x50\xf7\x56\xcb\xd1\x95\x53\x3e\x57\x24\x92\xef\x0d\x74\x80\x48\x5a\xbb\x84\x0f\xdf\x22\x3f\x4b\xda\xfb\x5c\xfd\x5f\xd8\xc4\xf7\x06\x24\xce\xc7\xe5\x40\x8c\xb9\x78\x90\x03\x39\x25\xd0\xb0\x29\x44\x17\x49\x1b\x95\x04\xe1\x9c\x38\xbd\x4e\x8d\x25\x60\x54\x22\x38\x0c\xbd\x33\x69\x62\x9d\x38\x65\x7b\xa2\x77\x71\xa6\x1c\xe6\x9e\xd4\xd7\x7b\xf2\x82\xae\xcb\x60\x4f\x39\x4a\x52\x37\xca\xf1\x2b\x29\xde\xc4\xcb\x2f\xe1\x2b\x71\x16\x0b\xf0\x76\x3c\xbf\x63\x73\xf8\xf3\xc1\xa1\x90\x20\x45\x10\x4c\x11\xdf\xc1\x5b\x0c\x7b\x2b\xd3\xa9\xa3\xc2\xcf\x4c\xd8\xb9\xc7\x3b\xbc\x62\xf1\x1e\x75\x33\x1f\x54\xf8\x51\xc9\x4f\xf0\xcb\x7b\x30\x4a\x2f\xe1\x0d\x61\x48\x8b\xf1\xe2\xc6\xf7\xde\xcb\xaa\x7e\x79\xad\x8f\xd7\x0e\x45\xc0\xdf\xdb\x2e\x9c\x8a\x0f\x86\xf8\x94\x5b\x86\xf4\xea\xd2\xc9\x21\x7e\x4e\x45\xce\xcf\x25\x5d\x12\x79\x62\x0a\xed\x91\xe9\xf7\x55\x49\xd2\xd5\xd8\xd4\xe0\x0f\x45\x2a\x85\x0b\x5e\x9e\x86\xe9\x24\xcc\xd2\x98\x6b\x34\xbb\xb0\xa7\x63\xf1\xcf\xe9\x34\x8c\x31\x64\x39\x8a\xf9\x18\xe4\xca\x0a\xa2\x32\x35\xcf\xd5\xff\x02\x00\x00\xff\xff\x33\x4d\x81\x27\xe0\x12\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x61, 0xca, 0x9d, 0xaa, 0x66, 0x36, 0xdf, 0xbc, 0x51, 0xdb, 0x7b, 0x51, 0xd8, 0x3d, 0x6f, 0x4e, 0x9c, 0x8e, 0x50, 0x28, 0x7c, 0x18, 0x1d, 0x2, 0xb2, 0xc2, 0x2b, 0x26, 0xa1, 0xfe, 0x2d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleNFT.cdc":       examplenftCdc,
	"MetadataViews.cdc":    metadataviewsCdc,
	"NonFungibleToken.cdc": nonfungibletokenCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleNFT.cdc": {examplenftCdc, map[string]*bintree{}},
	"MetadataViews.cdc": {metadataviewsCdc, map[string]*bintree{}},
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
