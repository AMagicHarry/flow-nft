// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/ExampleNFT.cdc (5.247kB)
// ../../../contracts/NonFungibleToken.cdc (4.832kB)
// ../../../contracts/Views.cdc (670B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplenftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5b\x6f\xdb\xb6\x17\x7f\xf7\xa7\x38\xff\x3c\xe4\x2f\x63\x89\xb5\x01\xc3\x1e\x8c\xa4\x69\x11\xd7\x80\x1f\x66\x14\xa9\xb7\x3d\x14\xc5\x4a\x8b\xc7\x36\x11\x89\x34\x48\xca\x9e\x16\xf8\xbb\x0f\x87\xd4\x85\xba\x25\xdd\xcb\x8c\xa2\xb1\xc4\x73\xbf\xfd\x0e\x1d\xc7\xb0\x39\x08\x03\xc2\x00\x93\x80\x7f\xb1\xec\x98\x22\x08\xfa\x3f\x43\x69\x99\x15\x4a\x82\xda\x01\x83\x65\xaa\xce\xb0\x56\xf2\x76\x99\xcb\xbd\xd8\xa6\x08\x1b\xf5\x8c\x72\x12\xc7\xb0\xb2\xc4\x2f\x95\x85\x23\xd3\x96\xc8\xed\x01\x41\xed\x76\x22\x11\x2c\x05\x63\x99\xe4\x4c\x73\xd8\xe6\x16\x84\x05\x66\x4c\x9e\x21\x07\xab\x60\x8b\xc4\x7f\x42\x5d\x80\x11\x99\x48\x99\xa6\xb7\x07\x75\x86\x8c\xc9\x02\xd6\xcb\x8d\x81\xb3\xca\x53\xde\x98\xe4\x64\x27\x4a\x23\xec\x72\x99\x90\x7d\x2c\x15\xb6\x98\x4d\x26\x22\x3b\x2a\x6d\xc9\xc6\xca\x44\x67\x21\xec\xb4\xca\xe0\x6a\x16\x77\x0f\x66\x09\x4f\xae\x2a\xae\xdf\x05\x9e\x4d\x4d\xea\x9e\xfc\xf9\xe4\x98\x6f\x21\x51\xd2\x6a\x96\x58\xf8\xe8\x23\xb4\x5e\x6e\xe6\x7d\x45\x2f\x93\x09\x00\x00\x31\x9c\x9c\x27\x96\xa5\x9f\xf3\xe3\x31\x2d\xe6\xf0\xdb\x4a\xda\x5f\x7e\x6e\x08\xf0\x44\xbe\x3c\x96\x72\x57\x52\x58\xc1\x52\xf1\x37\xf2\x68\xda\xa1\xf9\x43\xd8\x03\xd7\xec\x1c\x09\x5e\x89\xb9\x71\x86\xce\xe1\x03\xe7\x1a\x8d\x79\xe8\xb2\x2c\xf0\xa8\x8c\xb0\x2d\x0e\xab\x42\xfa\x9a\x41\xa3\x51\xb9\x4e\x10\x06\x5d\x9a\xad\xd6\xcb\xcd\x8d\x0f\xce\xec\x09\x8d\x4a\x4f\xa8\xe1\xc5\x71\x57\x12\x52\xb4\xd0\x28\x9a\xf4\xce\x24\xcb\x70\x0e\x9f\xad\x16\x72\xdf\x3b\xb4\x87\x3c\xdb\x4a\x26\xd2\x51\x0a\x8e\x26\xd1\xe2\x48\x89\xae\x69\x6a\x22\x21\x85\x8d\xea\x27\xf7\xa6\x71\xb9\xf5\x3e\xb4\xa2\x7d\x32\xa0\xa0\x4d\xd0\xb3\xb1\x39\x9e\x06\xb1\xa0\x8f\xc1\x74\x37\x13\x1c\xee\x41\xf0\xfe\x01\xd9\x00\xf7\xce\x94\xfe\x61\xad\x05\xee\x1b\x8d\x7d\xb2\xc0\x5a\xb8\x0f\x6d\xaf\x49\x2f\xee\x5b\x2b\x8e\xbb\x5c\xc2\x1e\xad\x4b\x63\x34\x9d\xc3\x97\x4d\x71\xc4\xaf\x1d\xdb\x35\xda\x5c\x4b\x7f\x76\xe7\x33\xbe\x10\xe6\x98\xb2\xe2\x5d\x34\xfd\x1a\x88\xef\x89\xd6\xbe\x30\x88\x27\xfa\x13\x4e\x02\xcf\x73\x20\x29\xd3\x39\x7c\x90\xc5\x67\xab\xf3\xc4\x3e\x74\x23\x75\x16\x36\x39\x38\xe2\xce\x09\x7d\x12\x66\x10\x06\x0d\x99\xf7\x68\x03\xdb\x5b\xc4\xd1\x20\x25\xd4\xb5\x50\xa7\xe4\x66\x94\x30\xc8\x7c\x3b\x47\xe3\x2c\xad\x6a\xea\x66\x6c\x98\x6d\xda\x7a\x1b\xc4\x37\xf0\x4c\x06\xb5\xe0\x13\x7c\x19\xe8\xe1\x47\x95\xa6\x98\x78\xdd\xbd\x56\xfe\xa4\xd5\x49\x70\xd4\x37\xfd\xa3\x27\x4c\x50\x9c\x06\x8f\x1a\x91\x9f\xf2\x6d\x2a\x92\xee\x30\x68\xce\x83\x34\xc6\x31\x70\xe1\x67\xb3\x2e\x08\x0f\xd6\xcb\x0d\xcd\xd0\x9d\xd2\x99\x90\x7b\xb0\x24\xda\x84\xe4\x44\x40\x18\xd4\xf8\x62\x8b\x23\xc2\x59\xd8\x03\x01\xd3\x37\xdf\xd2\xdf\x60\xb5\x80\x9d\xc0\x94\xb7\x6a\x90\x86\xad\x3a\x4b\xe4\x84\x17\x73\x78\xff\xe2\xa9\x07\x62\xb0\x5e\x6e\x2e\xed\xe9\x01\xd1\x60\x0f\xd7\xe2\xe0\xee\x16\x5e\x2e\x43\xd5\x1f\xc7\xce\x3c\x1a\xcd\xa0\x31\x53\x27\x74\x18\x4a\x9e\x38\x18\xf1\x38\x55\x47\x87\x49\x0e\x9e\x48\x58\x02\x39\x77\xcc\xd2\x14\x75\xaf\x9f\x2a\xb1\x51\xf5\x65\xb5\xa8\x86\xda\x74\x0e\xef\x87\xbc\xea\xf8\xe0\x46\xab\xc3\xa4\xbb\xdb\x8e\x43\x33\x6f\x6b\xf4\x8c\xc5\x1c\x1a\x05\x53\x78\x78\x80\x23\x93\x22\x89\xae\x32\x61\x0c\xa5\x69\xbd\xdc\x5c\x4d\xdb\xe5\x88\x99\xe8\x20\x92\x53\x33\x13\xbc\xc2\xa4\x5a\x9b\x7e\x98\x31\x8f\x37\xd3\xc1\x92\xbe\xbb\x75\xac\x23\xa1\xe5\x1e\xc2\xc0\xb2\x67\x8a\xab\x0b\x2b\x85\x90\x71\xde\x8a\x60\x1d\x60\x13\x94\x5c\x28\xa8\x66\x22\xf2\xd5\xa2\x62\x14\x1c\x98\xd6\xac\xe8\x05\xbf\x54\x1c\x39\xe3\x46\xa2\xdd\x2d\x99\x56\xb8\xfd\x17\x66\xfe\x07\xef\x9b\x6d\x81\xb8\x26\x3d\x9e\x06\xac\x68\xe8\x97\x81\x6c\x93\x91\x07\x9c\x3b\x93\x25\x9e\x4b\xe1\xa5\x0f\x41\x8f\x9d\x0f\x22\x39\xd4\x65\xe8\xd6\xaf\x94\x83\x92\xd8\xd3\xa9\x52\xbe\x19\xae\x8c\x2f\x82\x7f\xad\x1d\x18\x48\x7b\xb8\x55\x50\xbe\x69\xa3\x78\x3b\xdb\x1c\x8d\xd5\xaa\xa8\xf5\x8e\xe4\x7b\x8f\x76\xb5\x30\x65\x6d\xb8\x46\x72\xe9\xa9\x96\x49\x3a\xb3\x07\x66\x81\x69\x04\x21\x3b\xb9\x1f\x02\xbb\xd5\xc2\x43\x9d\x8f\xef\x08\xd8\x75\x5a\xe3\x19\x0b\x33\x62\xdf\x56\x69\xad\xce\x54\x85\x7b\xb4\x7e\x50\xed\x50\xa3\xa4\x49\xa5\xaa\xbe\x1f\x37\x2c\x8e\xc1\x28\xef\x41\xd3\xf8\x90\x30\x02\x4f\xc6\x41\x58\x03\x19\x5a\xc6\x99\x65\xae\x62\x89\xa0\x7a\x7b\x50\xdc\xf4\x3c\xac\xed\x09\x96\xbc\xe9\x1c\xae\xbf\x63\x38\x94\xbe\x5f\x0f\x64\x9f\x99\x61\x09\x21\xf6\x8c\x98\x42\xb0\x50\x81\x42\xc7\xa6\x0f\xb2\x78\x2a\xc7\xfa\x4b\x1b\x3d\x2e\x03\x8d\x24\x77\x16\xee\xc7\xac\x63\xb9\x3d\xbc\x61\x62\x25\x07\xeb\xe6\xa3\x9d\x6b\x67\x5d\x4b\x5e\x77\x5a\x72\x20\x2e\x01\x1f\x85\xe3\x15\xe3\x87\x4a\xa5\x2c\xf7\x1e\xaa\x54\x6d\xd0\x76\x6b\x18\xd3\xe3\x98\x62\x9b\x8a\xa4\xbe\xe2\x94\xb5\x2f\x0b\x25\xd1\x55\x8d\xab\x0f\xab\x20\xd1\xc8\x2c\x02\x73\xc3\x01\xb3\xa3\x2d\xba\xd5\x57\x65\xc9\x53\x7e\x24\x92\x06\xb3\xa3\x41\x3c\x19\xc4\xf4\x7a\x6a\x57\x3a\x43\x29\x1d\xeb\x9f\x6a\x10\xf7\x66\x03\xe3\x99\x90\xa0\x34\x18\x45\x05\x4d\xe0\x52\xdd\xf7\xfc\xf5\x4e\x9d\x65\x79\x1f\x2c\x45\x30\xba\x61\x5a\x05\x99\x90\xd6\x39\x57\x87\x2b\x8e\x07\x2f\x2f\xbf\x0a\x69\xdd\xdd\x24\xec\x39\xe2\xa6\x44\xd2\x5f\x53\x46\x89\x9e\xfd\x5e\xe1\x1e\x57\x8b\x2e\x5a\x54\xd0\x43\xff\x7c\x43\x6b\x4c\xc4\x51\x20\xc9\x08\x10\x3d\x77\x20\x69\x0f\x28\x74\xf8\xba\x1e\x0c\xbd\x46\x29\xad\x89\x3a\x55\x57\xca\x9e\xc3\xf5\xcb\x9b\xeb\xd7\xe5\xbf\xba\xd5\x74\x41\xa8\x55\x68\xdd\xce\xa1\x05\x4c\xa2\x9b\x8e\x4d\x7d\xf4\x3c\x85\xf2\x7a\x16\xb4\x60\x70\x45\xee\xef\xc6\xde\xb9\xe1\x0d\xbd\xe5\xde\xab\x1b\x76\xe0\xe7\xc8\xfa\x3e\xed\x39\xfb\x4a\x05\xfc\xdf\x00\x4b\x12\x95\x4b\xdb\xca\x7f\x3f\xe9\x10\xe6\x76\xd6\xd9\x2a\xee\x6e\x7d\xb8\x3a\xaa\x87\x23\x03\xf7\x63\x07\x3f\x94\x43\x36\xfa\x69\x3a\x3c\x49\xdc\xfd\x78\xda\xde\xcc\x9b\xdf\x1a\x9c\x67\x4e\x1e\x18\x27\xb0\x26\xf3\xb7\x9d\x96\x09\x3f\xb6\x1a\xeb\xb1\x2a\x87\xc7\xb0\xf0\xcb\x6e\xa4\x26\x32\xec\x84\xe5\x9e\x66\xac\xd2\x6c\xdf\x44\x86\x86\x73\xd0\x2f\xaf\x4c\x94\xda\x94\x32\xe4\x33\x92\x1a\xdd\xdd\x36\xdc\x7e\x0b\x89\x4b\x15\xf1\x7a\xb9\x69\x84\x4c\x5b\x16\xd7\x05\x5c\x8e\xd6\x84\x1d\xd9\x56\xa4\xc2\x16\xb0\x53\x7a\x0c\xb7\x5b\xda\x53\x21\x9f\xef\xbe\xa7\x49\xdf\xb5\x0b\x3f\xf6\x2a\xdb\xd6\x75\xba\x91\xe9\x3d\xda\x31\x4f\x26\x03\xa5\x1a\x26\xa1\x9c\x7d\xff\x26\x01\x99\x67\x69\xb5\xab\x17\xf3\x46\xec\x3d\x63\x3f\xee\x9e\x39\x30\xd0\xed\x8c\xe3\x3f\x70\x5d\x26\x97\xc9\xe4\x9f\x00\x00\x00\xff\xff\xdd\x42\xbc\x28\x7f\x14\x00\x00"

func examplenftCdcBytes() ([]byte, error) {
	return bindataRead(
		_examplenftCdc,
		"ExampleNFT.cdc",
	)
}

func examplenftCdc() (*asset, error) {
	bytes, err := examplenftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleNFT.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0xe4, 0x70, 0x6d, 0xdd, 0x9b, 0x73, 0x6a, 0xac, 0x5f, 0xa2, 0xf4, 0x16, 0x54, 0x3f, 0xc2, 0x4, 0x6a, 0x81, 0x49, 0x12, 0xf7, 0xc7, 0x1c, 0x27, 0x37, 0x9b, 0x14, 0xea, 0x63, 0x79, 0xfa}}
	return a, nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x8f\xdb\xba\x11\xbe\xeb\x57\xcc\xcb\x03\x9a\xdd\xc0\x6b\xf7\x50\xf4\x60\x20\x68\xda\xb7\x6f\x01\x5f\xb6\x0f\x5b\x17\x3d\x04\x01\x4c\x8b\x23\x9b\x08\x45\x2a\x24\x65\xc7\x0d\xf6\xbf\x17\x33\x24\x25\xca\xf6\x26\x9b\x5b\x73\x89\x57\x22\xbf\x99\xf9\xe6\x9b\x8f\xd4\xe2\xdd\xbb\xaa\xfa\xf5\x57\x58\xef\x11\x1e\xb4\x3d\xc2\xa3\x35\x77\x0f\xbd\xd9\xa9\xad\x46\x58\xdb\xcf\x68\xc0\x07\x61\xa4\x70\x92\x17\x6e\x1e\xad\xc9\xef\xf9\xf5\x06\x6a\x6b\x82\x13\x75\x00\x65\x02\xba\x46\xd4\x58\x55\x84\x37\xfc\x09\x61\x2f\x02\x08\xad\xc1\x58\x73\xd7\x64\xf4\xc0\xe8\x79\xb7\x87\xda\xf6\x5a\xd2\xdf\x8d\x75\x2d\x04\x3b\xaf\x56\x0d\x08\xe8\x3d\x3a\x38\x0a\x13\x3c\x04\x0b\x12\x3b\x6d\x4f\x20\xc0\xe0\x11\x4c\x13\x86\xfd\x33\x08\x7b\x54\x6e\xcc\xe6\xc8\x70\x06\x51\x56\xc1\x82\x6a\x3b\x8d\x2d\x9a\x40\xcb\xe0\xbc\x88\x31\xd7\x39\xe7\x7e\x89\xb3\x17\x07\xca\x18\x1a\xab\x89\x26\x2a\x86\x80\x5c\xaf\xd1\x83\x30\x12\x8c\x68\x95\xd9\x55\x5c\x6a\x98\x54\xef\x3b\xac\x55\xa3\xd0\xcf\x13\x83\x0f\xeb\x0d\x38\xf4\xb6\x77\x99\xaa\xda\x3a\x1c\x1e\x41\x38\x75\x89\x33\x87\x9d\x43\x8f\x54\xbb\x30\xf0\xf8\xb0\x06\x65\x18\xdd\xb7\xc2\x8d\xb5\x27\xe0\xdf\xac\xd6\x58\x07\x65\xcd\x06\x9e\x26\xf8\x23\x34\xa1\xfa\x60\x1d\x65\xcd\xd4\xbe\xf5\x8c\x5b\x0f\x7b\xe7\xd5\x8a\x5a\x59\xeb\x5e\xf2\xa2\x06\x8f\xd0\xf4\x86\xdf\x71\x0b\x04\x33\x40\x59\xd8\xa3\x41\x47\x8f\x50\x78\xa5\x4f\x55\x6b\x0f\xa9\xad\x9e\x12\x25\x5a\x6c\x1f\xc0\x36\xbc\xba\x0c\xc1\xf9\xfe\xe1\xec\x41\x49\x74\x1b\x5e\xb9\x79\xc2\x1a\xd5\x81\xfe\x1c\xd2\x1d\x48\xf4\x5c\x87\x2f\x9f\x80\xc4\x5a\x0b\x87\x45\x72\x47\x15\xf6\xe0\x6d\x8b\xd0\x39\x64\xd0\xce\x7a\xa6\x49\x2a\x5e\x51\x25\x56\xbf\xf4\xca\x21\x27\x35\x72\x56\x74\xb7\x46\x17\x84\x32\xa9\xa7\x0c\xb4\xc5\xbd\x38\x28\xeb\x86\x69\xf0\x51\x29\x27\xa0\x14\x3c\x76\xc2\x89\x80\xb0\xc5\x5a\xf4\x94\x66\x80\x9d\x3a\xa0\xe7\x18\xac\x60\xfa\x21\xb6\x4a\xab\x70\xa2\x48\x7e\x4f\xfb\x04\x38\x6c\xd0\xa1\xa9\x91\x44\x1a\x15\x5c\xa6\x44\xe9\x5a\xa3\x4f\x80\x5f\x3b\xeb\x13\x5e\xa3\x50\xcb\xa8\xba\xb1\x76\x65\xc0\x1a\x04\xeb\xa0\xb5\x0e\xab\xc4\xf9\x48\xd7\x1c\x56\x34\x83\xde\xa6\xc4\x28\x29\x7f\x9e\x55\x2b\x3e\x23\xd4\xbd\x0f\xb6\x1d\x9a\x90\x48\x9b\x0c\xd0\xb4\x11\x34\x96\x16\x0e\xc2\x29\xdb\x13\xa4\x32\xbb\xd4\x0b\x82\x8f\x7a\x98\x57\xd5\x3f\x4e\xd0\x7b\xe2\x73\x40\xe6\x12\x46\xa0\x59\x4a\xca\x36\x2c\xc9\xa9\xc6\x3d\xd4\xc2\x80\x47\x23\x2b\xda\xe5\xa2\x58\xb2\xda\x3a\x44\x77\x17\xec\x1d\xfd\x3f\xe3\xd8\x24\x3c\x6a\x99\xd9\x51\x7e\x1c\x84\xa7\x99\xd2\x12\x50\x23\xa1\x6a\xd0\x28\x77\xe8\xaa\x8b\x71\x5a\x5b\x0e\x95\xa7\x8e\x54\x6f\x6c\xd8\xa3\xe3\x14\x67\x83\x2d\xb1\x37\x78\xe2\xe6\xc4\xd0\xd2\x89\x38\x1a\x8f\x0f\xeb\xaa\x71\xb6\xbd\xe8\x29\xfb\x94\x81\x3a\x3b\x88\xc4\xce\x7a\x15\x86\x4e\x82\x35\x93\x58\x6f\x7d\x35\xd5\x68\x6d\xa9\x13\x21\xca\x37\x38\x61\x7c\x83\x6e\x5e\x55\xef\x16\x55\xb5\x58\xb0\x93\xb7\x24\xde\x38\xd5\xe7\xd6\x3c\x87\x7f\x32\x74\xf9\x96\x9a\xa5\x35\x6d\x56\x6d\x67\x5d\x88\x6d\x29\xfa\xad\x7c\xe1\xed\x8b\x45\xd5\xf5\xdb\x2b\xd0\x97\xae\xfa\xad\xaa\x00\x00\x52\x56\xc1\x06\xa1\xc1\xf4\xed\x16\x1d\x7b\x42\x6c\x1d\x2b\x55\xf9\xe8\x7a\xca\x00\x7e\x55\x3e\xf0\x44\xd0\x5e\x0a\x75\x10\x2e\x6e\xfe\x57\xdf\x75\xfa\xb4\x84\x7f\xaf\x4c\xf8\xeb\x5f\x06\xf0\xdf\x0f\x31\x4d\x11\x00\x5b\x15\x02\x4a\x38\x12\xc7\xa9\x0f\x45\xaa\x54\x87\x0a\x4a\x68\xf5\x5f\x94\x69\xfb\x10\x06\x19\xe6\xb7\xb4\x78\x35\x2e\xbc\xb9\xbd\x16\x4a\xf9\x69\x34\x91\x0e\x34\xe5\x07\x25\x98\x59\xde\xa7\x8c\x54\xb5\x08\xac\xc6\xc1\x38\x2f\x7c\x31\x01\x07\x38\x8a\x02\x04\x48\x47\xf3\x32\xdb\xc5\x02\x56\x17\x7b\x95\x07\x63\x43\xf4\x5d\x10\x75\x6d\x7b\x13\xde\x7a\x36\x7b\xb1\xc3\x19\x6c\x08\x66\xc3\xad\x86\x2d\xc2\xc6\x28\xbd\x99\x5f\xe7\xe0\x3f\x29\xf4\x8d\x92\x99\xec\x19\x67\xb1\x84\xbf\x4b\xe9\xd0\xfb\xbf\x5d\xa5\xe4\x25\x3e\x92\xc6\x51\xf2\x20\x4d\x0e\x82\xb3\xaa\x42\x66\x2a\x59\xdd\x6b\x88\x2a\xd1\x5f\x28\xe8\x3e\x2e\x99\xd4\x13\xec\xb5\x6a\x56\xd3\x4b\x4b\x92\x90\x1f\xce\xff\xf1\x7a\x72\x1e\xe9\xf2\xd0\x82\x15\xa9\xef\x1b\xaf\x28\xe6\xa0\x37\xea\x4b\x8f\xb0\xba\x4f\xa4\x89\x7a\xcf\x32\xdd\x0b\x3f\x2c\x25\x40\x8d\x01\xc6\x84\xf9\xd5\xf3\x90\xe7\x53\x3c\xc3\xda\x81\x7b\xf2\x93\x94\x1c\xa9\xec\x9a\x81\x52\x0d\x79\x3f\x5f\xa5\x1a\x65\xe2\x19\x94\x32\x27\x53\x42\x19\x1d\x8f\x30\x13\x1e\x3b\x3c\xd5\x72\x59\xeb\xe3\xc3\x7a\x79\x5e\xe6\x0f\x73\x2f\x38\xb6\xd0\xa2\x54\x74\x72\x66\xb9\x7b\xc8\xb6\x59\x98\xe6\x2b\xb8\xce\x97\x89\x29\xdf\x83\x27\x3b\xa4\xcb\xc9\x70\x8d\x1a\x62\x14\x9a\x22\xd7\x8b\x8b\x54\x80\x78\x1a\x47\x46\xdc\xa4\xb4\xa6\x37\x03\xec\x4d\xfe\xb1\xba\xcf\xb5\xde\x2e\xe1\xc3\x94\x0f\xde\x48\xf7\x90\xe9\x23\xfa\xe7\xd0\xf7\x3a\xcc\x95\x84\xf7\xef\xa1\xc4\x7a\x43\x42\x59\xdd\x67\xe5\x8f\x5e\x10\x67\xaa\xed\x7d\xa0\x21\xe6\xab\xa0\x68\x11\x44\x1c\x17\xba\xd9\xa0\xa7\x51\x58\xdd\xbf\x99\x44\x7b\xae\xa6\xbf\x7e\xd0\x8d\x34\x53\x3e\xf3\xf0\x53\xad\xc8\x17\xb9\xec\xff\x29\x50\x3e\xe9\x82\xf8\x3c\x36\x42\xf0\x2f\xe1\x76\x3d\x4b\x99\x7a\x20\xa4\x2c\x5b\x70\x16\xba\x08\x5f\x76\x24\x81\xdf\x30\x3f\xb1\x05\xb7\x2f\x17\xca\x03\x33\xb8\x64\x3a\xc6\x6b\xdb\xb6\x7c\xd7\xca\x1b\xba\x7e\xab\x95\xdf\x43\x63\xdd\xf0\x71\x31\xc9\xe5\x85\xfa\xc7\x8c\xff\x20\x84\xfa\x6c\x36\xbe\x9b\x6e\xb9\x68\x87\x61\x75\xef\x6f\x6e\x97\xf0\x31\x6a\xeb\xd3\xc5\x92\xad\x75\xce\x1e\x1f\x1f\xd6\x85\xb5\xdd\x2e\xe1\x4f\x79\x58\xaf\x1b\x46\x2a\x28\x0d\x80\xa9\x1d\x5d\x27\x26\x9f\x1f\x85\x4d\x6c\x31\xdf\xb4\x65\xfe\xfa\x18\xee\x06\xe4\x34\xd9\x5f\x5e\x14\xc6\x48\xc7\x72\x98\xd2\xd9\x20\x92\xd9\x35\xba\x4a\xd9\xdc\x2b\x7e\x27\x1c\xdf\x50\xf7\x56\xcb\xd1\x95\x53\x3e\x57\x24\x92\xef\x0d\x74\x80\x48\x5a\xbb\x84\x0f\xdf\x22\x3f\x4b\xda\xfb\x5c\xfd\x5f\xd8\xc4\xf7\x06\x24\xce\xc7\xe5\x40\x8c\xb9\x78\x90\x03\x39\x25\xd0\xb0\x29\x44\x17\x49\x1b\x95\x04\xe1\x9c\x38\xbd\x4e\x8d\x25\x60\x54\x22\x38\x0c\xbd\x33\x69\x62\x9d\x38\x65\x7b\xa2\x77\x71\xa6\x1c\xe6\x9e\xd4\xd7\x7b\xf2\x82\xae\xcb\x60\x4f\x39\x4a\x52\x37\xca\xf1\x2b\x29\xde\xc4\xcb\x2f\xe1\x2b\x71\x16\x0b\xf0\x76\x3c\xbf\x63\x73\xf8\xf3\xc1\xa1\x90\x20\x45\x10\x4c\x11\xdf\xc1\x5b\x0c\x7b\x2b\xd3\xa9\xa3\xc2\xcf\x4c\xd8\xb9\xc7\x3b\xbc\x62\xf1\x1e\x75\x33\x1f\x54\xf8\x51\xc9\x4f\xf0\xcb\x7b\x30\x4a\x2f\xe1\x0d\x61\x48\x8b\xf1\xe2\xc6\xf7\xde\xcb\xaa\x7e\x79\xad\x8f\xd7\x0e\x45\xc0\xdf\xdb\x2e\x9c\x8a\x0f\x86\xf8\x94\x5b\x86\xf4\xea\xd2\xc9\x21\x7e\x4e\x45\xce\xcf\x25\x5d\x12\x79\x62\x0a\xed\x91\xe9\xf7\x55\x49\xd2\xd5\xd8\xd4\xe0\x0f\x45\x2a\x85\x0b\x5e\x9e\x86\xe9\x24\xcc\xd2\x98\x6b\x34\xbb\xb0\xa7\x63\xf1\xcf\xe9\x34\x8c\x31\x64\x39\x8a\xf9\x18\xe4\xca\x0a\xa2\x32\x35\xcf\xd5\xff\x02\x00\x00\xff\xff\x33\x4d\x81\x27\xe0\x12\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x61, 0xca, 0x9d, 0xaa, 0x66, 0x36, 0xdf, 0xbc, 0x51, 0xdb, 0x7b, 0x51, 0xd8, 0x3d, 0x6f, 0x4e, 0x9c, 0x8e, 0x50, 0x28, 0x7c, 0x18, 0x1d, 0x2, 0xb2, 0xc2, 0x2b, 0x26, 0xa1, 0xfe, 0x2d}}
	return a, nil
}

var _viewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6b\x83\x30\x14\xc7\xef\xfd\x14\xef\x34\x14\xc6\x4e\x63\x87\x40\x19\x63\xbd\xf4\xba\x6e\xbb\x8c\x32\x34\x7d\x76\x0f\xd2\x44\x5e\x9e\x15\x11\xbf\xfb\x88\xce\xcc\x56\x07\xcb\x41\xa2\xff\x5f\xfc\xbd\x7f\xca\x2a\x07\xed\xac\x70\xa6\x05\xde\x09\x6b\x0f\xed\x6a\x05\x00\x10\x12\x46\xef\x2a\xd6\x08\x64\x05\xb9\xc8\x34\xc2\x0b\x7a\x67\xce\xc8\xd0\xf6\xd4\x48\x16\x95\x85\x23\x4a\xff\x87\x24\x55\xf0\xf1\xda\x94\xb8\x9f\x21\x3c\x9c\x0e\x58\xf2\x09\x67\xc2\x5a\x41\x20\x53\x05\x4f\xb6\xd9\x09\x57\x5a\x1e\xfb\x53\xdd\xbf\xa6\x78\x76\xc6\xa0\x16\x72\x76\x61\x9e\xdc\x31\xbb\x3a\xb8\x46\x3c\xa1\x83\x82\xb7\xad\x95\x87\xfb\x54\xc1\x4d\x3b\x7e\xef\x96\xba\x6c\x37\x43\x93\x81\xdf\x5f\x4f\xe5\xfb\x61\x61\x43\xbe\x34\x59\x73\xa5\x37\x28\x60\xb3\x13\x2a\xd8\x09\x93\x3d\xce\x42\xf9\xaa\x4e\xb9\xcd\xc8\xfc\x49\x1c\xd0\x6b\xa6\x32\x74\x8b\x4c\x84\xc8\x92\x24\xf1\x2d\xac\xa9\xed\xf6\x22\x99\xa9\x2e\xe3\x05\xcf\x2f\x90\x4e\x7a\x85\xe5\xd1\x14\x77\x41\xb5\x0e\x8f\x79\x14\x5d\xeb\xb8\x9b\x43\x13\xe3\x7a\xb2\x8f\x60\xf7\x73\xd5\xdd\xea\x3b\x00\x00\xff\xff\x88\x1b\xe7\xac\x9e\x02\x00\x00"

func viewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_viewsCdc,
		"Views.cdc",
	)
}

func viewsCdc() (*asset, error) {
	bytes, err := viewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Views.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4c, 0xba, 0xf5, 0x4b, 0x46, 0x13, 0xdb, 0x52, 0x3e, 0xd3, 0xf9, 0xc6, 0x4a, 0xba, 0xa8, 0x24, 0xbd, 0xb7, 0x35, 0x50, 0xb3, 0x52, 0xff, 0xfc, 0xb3, 0xcd, 0x80, 0x9b, 0x0, 0x8d, 0xc1, 0xfa}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ExampleNFT.cdc":       examplenftCdc,
	"NonFungibleToken.cdc": nonfungibletokenCdc,
	"Views.cdc":            viewsCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ExampleNFT.cdc": {examplenftCdc, map[string]*bintree{}},
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
	"Views.cdc": {viewsCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
